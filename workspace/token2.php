{ "swagger": "2.0", "info": { "title": "VRE repository data", "description": "This is a simple API for accessing to the file content of BSC - VRE repository. ", "contact": { "email": "multiscalegenomics@gmail.com" }, "license": { "name": "Apache 2.0", "url": "http://www.apache.org/licenses/LICENSE-2.0.html" }, "version": "1.0.0" }, "host": "multiscalegenomics.bsc.es", "basePath": "VREapi//public/v1", "schemes": [ "http" ], "consumes": [ "application/json" ], "produces": [ "application/json" ], "paths": { "/products/{product_id}": { "get": { "tags": [ "Products" ], "responses": { "default": { "$ref": "#/responses/product" } } }, "patch": { "tags": [ "Products" ], "parameters": [ { "$ref": "#/parameters/product_in_body" } ], "responses": { "default": { "$ref": "#/responses/product" } } }, "parameters": [ { "$ref": "#/parameters/product_id_in_path_required" } ] }, "/files": { "get": { "tags": [ "files" ], "summary": "Show user files", "description": "Show MuG files accessible by the user. Result can be filtered and sorted", "operationId": "showUserFiles", "produces": [ "application/json" ], "parameters": [ { "name": "limit", "in": "query", "description": "Limit number of MuG files returned", "required": false, "type": "integer" }, { "name": "sort_by", "in": "query", "description": "Sort files by attribute", "required": false, "type": "string" } ], "responses": { "200": { "description": "Successful operation", "schema": { "type": "array", "items": { "$ref": "#/definitions/Mugfile" } } }, "400": { "description": "Invalid request" }, "401": { "description": "Not authentified" } }, "deprecated": true, "security": [ { "mug_auth": [ "read" ] } ] } }, "/pet/findByTags": { "get": { "tags": [ "pet" ], "summary": "Finds Pets by tags", "description": "Muliple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.", "operationId": "findPetsByTags", "produces": [ "application/xml", "application/json" ], "parameters": [ { "name": "tags", "in": "query", "description": "Tags to filter by", "required": true, "type": "array", "items": { "type": "string" }, "collectionFormat": "multi" } ], "responses": { "200": { "description": "successful operation", "schema": { "type": "array", "items": { "$ref": "#/definitions/Pet" } } }, "400": { "description": "Invalid tag value" } }, "deprecated": true, "security": [ { "petstore_auth": [ "write:pets", "read:pets" ] } ] } }, "/pet/findByStatus": { "get": { "tags": [ "pet" ], "summary": "Finds Pets by status", "description": "Multiple status values can be provided with comma separated strings", "operationId": "findPetsByStatus", "produces": [ "application/xml", "application/json" ], "parameters": [ { "name": "status", "in": "query", "description": "Status values that need to be considered for filter", "required": true, "type": "array", "items": { "type": "string", "default": "available", "enum": [ "available", "pending", "sold" ] }, "collectionFormat": "multi" } ], "responses": { "200": { "description": "successful operation", "schema": { "type": "array", "items": { "$ref": "#/definitions/Pet" } } }, "400": { "description": "Invalid status value" } }, "security": [ { "petstore_auth": [ "write:pets", "read:pets" ] } ] } }, "/pet/{petId}": { "get": { "tags": [ "pet" ], "summary": "Find pet by ID", "description": "Returns a single pet", "operationId": "getPetById", "produces": [ "application/xml", "application/json" ], "parameters": [ { "name": "petId", "in": "path", "description": "ID of pet to return", "required": true, "type": "integer", "format": "int64" } ], "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/Pet" } }, "400": { "description": "Invalid ID supplied" }, "404": { "description": "Pet not found" } }, "security": [ { "api_key": [] } ] }, "post": { "tags": [ "pet" ], "summary": "Updates a pet in the store with form data", "description": "", "operationId": "updatePetWithForm", "consumes": [ "application/x-www-form-urlencoded" ], "produces": [ "application/xml", "application/json" ], "parameters": [ { "name": "petId", "in": "path", "description": "ID of pet that needs to be updated", "required": true, "type": "integer", "format": "int64" }, { "name": "name", "in": "formData", "description": "Updated name of the pet", "required": false, "type": "string" }, { "name": "status", "in": "formData", "description": "Updated status of the pet", "required": false, "type": "string" } ], "responses": { "405": { "description": "Invalid input" } }, "security": [ { "petstore_auth": [ "write:pets", "read:pets" ] } ] }, "delete": { "tags": [ "pet" ], "summary": "Deletes a pet", "description": "", "operationId": "deletePet", "produces": [ "application/xml", "application/json" ], "parameters": [ { "name": "petId", "in": "path", "description": "Pet id to delete", "required": true, "type": "integer", "format": "int64" }, { "name": "api_key", "in": "header", "required": false, "type": "string" } ], "responses": { "400": { "description": "Invalid ID supplied" }, "404": { "description": "Pet not found" } }, "security": [ { "petstore_auth": [ "write:pets", "read:pets" ] } ] } }, "/pet": { "put": { "tags": [ "pet" ], "summary": "Update an existing pet", "description": "", "operationId": "updatePet", "consumes": [ "application/json", "application/xml" ], "produces": [ "application/xml", "application/json" ], "parameters": [ { "name": "body", "in": "body", "description": "Pet object that needs to be added to the store", "required": true, "schema": { "$ref": "#/definitions/Pet" } } ], "responses": { "400": { "description": "Invalid ID supplied" }, "404": { "description": "Pet not found" }, "405": { "description": "Validation exception" } }, "security": [ { "petstore_auth": [ "write:pets", "read:pets" ] } ] }, "post": { "tags": [ "pet" ], "summary": "Add a new pet to the store", "description": "", "operationId": "addPet", "consumes": [ "application/json", "application/xml" ], "produces": [ "application/xml", "application/json" ], "parameters": [ { "name": "body", "in": "body", "description": "Pet object that needs to be added to the store", "required": true, "schema": { "$ref": "#/definitions/Pet" } } ], "responses": { "405": { "description": "Invalid input" } }, "security": [ { "petstore_auth": [ "write:pets", "read:pets" ] } ] } }, "/pet/{petId}/uploadImage": { "post": { "tags": [ "pet" ], "summary": "uploads an image", "description": "", "operationId": "uploadFile", "consumes": [ "multipart/form-data" ], "produces": [ "application/json" ], "parameters": [ { "name": "additionalMetadata", "in": "formData", "description": "Additional data to pass to server", "required": false, "type": "string" }, { "name": "file", "in": "formData", "description": "file to upload", "required": false, "type": "file" }, { "name": "petId", "in": "path", "description": "ID of pet to update", "required": true, "type": "integer", "format": "int64" } ], "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/ApiResponse" } } }, "security": [ { "petstore_auth": [ "read:pets", "write:pets" ] } ] } }, "/store/inventory": { "get": { "tags": [ "store" ], "summary": "Returns pet inventories by status", "description": "Returns a map of status codes to quantities", "operationId": "getInventory", "produces": [ "application/json" ], "parameters": [], "responses": { "200": { "description": "successful operation", "schema": { "type": "object", "additionalProperties": { "type": "integer", "format": "int32" } } } }, "security": [ { "api_key": [] } ] } }, "/store/order": { "post": { "tags": [ "store" ], "summary": "Place an order for a pet", "description": "", "operationId": "placeOrder", "produces": [ "application/xml", "application/json" ], "parameters": [ { "name": "body", "in": "body", "description": "order placed for purchasing the pet", "required": true, "schema": { "$ref": "#/definitions/Order" } } ], "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/Order" } }, "400": { "description": "Invalid Order" } } } }, "/store/order/{orderId}": { "get": { "tags": [ "store" ], "summary": "Find purchase order by ID", "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions", "operationId": "getOrderById", "produces": [ "application/xml", "application/json" ], "parameters": [ { "name": "orderId", "in": "path", "description": "ID of pet that needs to be fetched", "required": true, "type": "integer", "format": "int64", "maximum": 10, "minimum": 1 } ], "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/Order" } }, "400": { "description": "Invalid ID supplied" }, "404": { "description": "Order not found" } } }, "delete": { "tags": [ "store" ], "summary": "Delete purchase order by ID", "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors", "operationId": "deleteOrder", "produces": [ "application/xml", "application/json" ], "parameters": [ { "name": "orderId", "in": "path", "description": "ID of the order that needs to be deleted", "required": true, "type": "integer", "format": "int64", "minimum": 1 } ], "responses": { "400": { "description": "Invalid ID supplied" }, "404": { "description": "Order not found" } } } }, "/user": { "post": { "tags": [ "user" ], "summary": "Create user", "description": "This can only be done by the logged in user.", "operationId": "createUser", "produces": [ "application/xml", "application/json" ], "parameters": [ { "name": "body", "in": "body", "description": "Created user object", "required": true, "schema": { "$ref": "#/definitions/User" } } ], "responses": { "default": { "description": "successful operation" } } } }, "/user/createWithArray": { "post": { "tags": [ "user" ], "summary": "Creates list of users with given input array", "description": "", "operationId": "createUsersWithArrayInput", "produces": [ "application/xml", "application/json" ], "parameters": [ { "name": "body", "in": "body", "description": "List of user object", "required": true, "schema": { "type": "array", "items": { "$ref": "#/definitions/User" } } } ], "responses": { "default": { "description": "successful operation" } } } }, "/user/createWithList": { "post": { "tags": [ "user" ], "summary": "Creates list of users with given input array", "description": "", "operationId": "createUsersWithListInput", "produces": [ "application/xml", "application/json" ], "parameters": [ { "name": "body", "in": "body", "description": "List of user object", "required": true, "schema": { "type": "array", "items": { "$ref": "#/definitions/User" } } } ], "responses": { "default": { "description": "successful operation" } } } }, "/user/login": { "get": { "tags": [ "user" ], "summary": "Logs user into the system", "description": "", "operationId": "loginUser", "produces": [ "application/xml", "application/json" ], "parameters": [ { "name": "username", "in": "query", "description": "The user name for login", "required": true, "type": "string" }, { "name": "password", "in": "query", "description": "The password for login in clear text", "required": true, "type": "string" } ], "responses": { "200": { "description": "successful operation", "schema": { "type": "string" }, "headers": { "X-Rate-Limit": { "description": "calls per hour allowed by the user", "type": "integer", "format": "int32" }, "X-Expires-After": { "description": "date in UTC when token expires", "type": "string", "format": "date-time" } } }, "400": { "description": "Invalid username/password supplied" } } } }, "/user/logout": { "get": { "tags": [ "user" ], "summary": "Logs out current logged in user session", "description": "", "operationId": "logoutUser", "produces": [ "application/xml", "application/json" ], "parameters": [], "responses": { "default": { "description": "successful operation" } } } }, "/user/{username}": { "get": { "tags": [ "user" ], "summary": "Get user by user name", "description": "", "operationId": "getUserByName", "produces": [ "application/xml", "application/json" ], "parameters": [ { "name": "username", "in": "path", "description": "The name that needs to be fetched. Use user1 for testing. ", "required": true, "type": "string" } ], "responses": { "200": { "description": "successful operation", "schema": { "$ref": "#/definitions/User" } }, "400": { "description": "Invalid username supplied" }, "404": { "description": "User not found" } } }, "put": { "tags": [ "user" ], "summary": "Updated user", "description": "This can only be done by the logged in user.", "operationId": "updateUser", "produces": [ "application/xml", "application/json" ], "parameters": [ { "name": "username", "in": "path", "description": "name that need to be updated", "required": true, "type": "string" }, { "name": "body", "in": "body", "description": "Updated user object", "required": true, "schema": { "$ref": "#/definitions/User" } } ], "responses": { "400": { "description": "Invalid user supplied" }, "404": { "description": "User not found" } } }, "delete": { "tags": [ "user" ], "summary": "Delete user", "description": "This can only be done by the logged in user.", "operationId": "deleteUser", "produces": [ "application/xml", "application/json" ], "parameters": [ { "name": "username", "in": "path", "description": "The name that needs to be deleted", "required": true, "type": "string" } ], "responses": { "400": { "description": "Invalid username supplied" }, "404": { "description": "User not found" } } } }, "/pets": { "get": { "description": "Returns all pets from the system that the user has access to", "operationId": "findPets", "produces": [ "application/json", "application/xml", "text/xml", "text/html" ], "parameters": [ { "name": "tags", "in": "query", "description": "tags to filter by", "required": false, "type": "array", "items": { "type": "string" }, "collectionFormat": "csv" }, { "name": "limit", "in": "query", "description": "maximum number of results to return", "required": false, "type": "integer", "format": "int32" } ], "responses": { "200": { "description": "pet response", "schema": { "type": "array", "items": { "$ref": "#/definitions/Pet" } } }, "default": { "description": "unexpected error", "schema": { "$ref": "#/definitions/ErrorModel" } } } }, "post": { "description": "Creates a new pet in the store. Duplicates are allowed", "operationId": "addPet", "produces": [ "application/json" ], "parameters": [ { "name": "pet", "in": "body", "description": "Pet to add to the store", "required": true, "schema": { "$ref": "#/definitions/NewPet" } } ], "responses": { "200": { "description": "pet response", "schema": { "$ref": "#/definitions/Pet" } }, "default": { "description": "unexpected error", "schema": { "$ref": "#/definitions/ErrorModel" } } } } }, "/pets/{id}": { "get": { "description": "Returns a user based on a single ID, if the user does not have access to the pet", "operationId": "findPetById", "produces": [ "application/json", "application/xml", "text/html", "text/xml" ], "parameters": [ { "name": "id", "in": "path", "description": "ID of pet to fetch", "required": true, "type": "integer", "format": "int64" } ], "responses": { "200": { "description": "pet response", "schema": { "$ref": "#/definitions/Pet" } }, "default": { "description": "unexpected error", "schema": { "$ref": "#/definitions/ErrorModel" } } } }, "delete": { "description": "deletes a single pet based on the ID supplied", "operationId": "deletePet", "parameters": [ { "name": "id", "in": "path", "description": "ID of pet to delete", "required": true, "type": "integer", "format": "int64" } ], "responses": { "204": { "description": "pet deleted" }, "default": { "description": "unexpected error", "schema": { "$ref": "#/definitions/ErrorModel" } } } } }, "/pets/{petId}": { "get": { "tags": [ "pets" ], "summary": "Info for a specific pet", "operationId": "showPetById", "parameters": [ { "name": "petId", "in": "path", "description": "The id of the pet to retrieve", "required": true, "type": "string" } ], "responses": { "200": { "description": "Expected response to a valid request", "schema": { "$ref": "#/definitions/Pets" } }, "default": { "description": "unexpected error", "schema": { "$ref": "#/definitions/Error" } } } } }, "/products": { "post": { "tags": [ "Products" ], "parameters": [ { "$ref": "#/parameters/product_in_body" } ], "responses": { "default": { "$ref": "#/responses/product" } } } }, "api/3rd-party": { "get": { "responses": { "200": { "description": "a response" } } } }, "api/test1": { "get": { "summary": "Example summary", "description": "Example description...\nMore description...", "responses": { "200": { "description": "a response" } } } }, "api/test2": { "get": { "summary": "Example summary", "responses": { "200": { "description": "a response" } } } }, "/pi/{item_name}": { "get": { "summary": "Get protected item", "parameters": [ { "$ref": "#/parameters/ItemName" } ], "responses": { "default": { "$ref": "#/responses/Item" } } } }, "/users/{id}": { "put": { "tags": [ "users" ], "summary": "Update user entry", "operationId": "updateUser", "parameters": [ { "name": "id", "in": "path", "description": "UUID", "required": true, "type": "string" }, { "name": "user", "in": "body", "required": true, "schema": { "$ref": "#/definitions/User" } } ], "responses": { "200": { "description": "success" }, "default": { "description": "error", "schema": { "$ref": "#/definitions/Error" } } } }, "delete": { "tags": [ "users" ], "summary": "Remove user entry", "operationId": "deleteUser", "parameters": [ { "name": "id", "in": "path", "description": "UUID", "required": true, "type": "string" } ], "responses": { "200": { "description": "success" }, "default": { "description": "error", "schema": { "$ref": "#/definitions/Error" } } } }, "options": { "responses": { "200": { "description": "Some CORS stuff" } } }, "head": { "responses": { "200": { "description": "Only checking if it exists" } } } } }, "definitions": { "ErrorModel": { "required": [ "code", "message" ], "properties": { "code": { "type": "integer", "format": "int32" }, "message": { "type": "string" } }, "type": "object" }, "Error": { "required": [ "code", "message" ], "properties": { "code": { "type": "integer", "format": "int32" }, "message": { "type": "string" } } }, "Pets": { "type": "array", "items": { "$ref": "#/definitions/Pet" } }, "Mugfile": { "required": [ "file_id" ], "properties": { "file_id": { "description": "MuG file identifier", "type": "string" }, "file_path": { "description": "File path relative to user root directory", "type": "string" }, "file_type": { "description": "File format", "type": "string" }, "data_type": { "type": "string" }, "taxon_id": { "description": "Taxon identifier refered to the data contained in the file", "type": "integer" }, "compressed": { "description": "Compression state of the file", "type": "string" }, "source_id": { "description": "MuG file identifier of the source file from which the current derives", "type": "string" }, "meta_data": { "description": "File meta data optional according the file_type and the data_type (i.e. refGenome)", "type": "object" }, "creation_time": { "description": "Stamp time of the file creation date", "type": "string" } }, "type": "object", "xml": { "name": "Mugfile" } }, "ApiResponse": { "properties": { "code": { "type": "integer", "format": "int32" }, "type": { "type": "string" }, "message": { "type": "string" } }, "type": "object" }, "Category": { "properties": { "id": { "type": "integer", "format": "int64" }, "name": { "type": "string" } }, "type": "object", "xml": { "name": "Category" } }, "Order": { "properties": { "id": { "type": "integer", "format": "int64" }, "petId": { "type": "integer", "format": "int64" }, "complete": { "type": "boolean", "default": false }, "quantity": { "type": "integer", "format": "int32" }, "shipDate": { "type": "string", "format": "date-time" }, "status": { "description": "Order Status", "type": "string", "enum": [ "placed", "approved", "delivered" ] } }, "type": "object", "xml": { "name": "Order" } }, "Pet": { "required": [ "name", "photoUrls" ], "properties": { "id": { "type": "integer", "format": "int64" }, "name": { "type": "string", "example": "doggie" }, "category": { "$ref": "#/definitions/Category" }, "photoUrls": { "type": "array", "items": { "type": "string" }, "xml": { "name": "photoUrl", "wrapped": true } }, "tags": { "type": "array", "items": { "$ref": "#/definitions/Tag" }, "xml": { "name": "tag", "wrapped": true } }, "status": { "description": "pet status in the store", "type": "string", "enum": [ "available", "pending", "sold" ] } }, "type": "object", "xml": { "name": "Pet" } }, "Tag": { "properties": { "id": { "type": "integer", "format": "int64" }, "name": { "type": "string" } }, "type": "object", "xml": { "name": "Tag" } }, "User": { "properties": { "id": { "type": "integer", "format": "int64" }, "username": { "type": "string" }, "firstName": { "type": "string" }, "lastName": { "type": "string" }, "email": { "type": "string" }, "password": { "type": "string" }, "phone": { "type": "string" }, "userStatus": { "description": "User Status", "type": "integer", "format": "int32" } }, "type": "object", "xml": { "name": "User" } }, "NewPet": { "required": [ "name" ], "properties": { "name": { "type": "string" }, "tag": { "type": "string" } }, "type": "object" }, "Product": { "properties": { "id": { "description": "The unique identifier of a product in our catalog.", "type": "integer", "format": "int64" }, "status": { "$ref": "#/definitions/product_status" } } }, "product_status": { "description": "The status of a product", "type": "string", "default": "available", "enum": [ "available", "discontinued" ] }, "Child": { "properties": { "isBaby": { "type": "boolean" }, "firstname": { "type": "string" }, "lastname": { "type": "string" } } }, "ChildWithDocBlocks": { "properties": { "isBaby": { "type": "boolean" }, "firstname": { "type": "string" }, "lastname": { "type": "string" } } }, "Customer": { "properties": { "firstname": { "description": "The firstname of the customer.", "type": "string" }, "lastname": { "description": "The lastname of the customer.", "type": "string" }, "tags": { "type": "array", "items": { "type": "string" } }, "submittedBy": { "$ref": "#/definitions/Customer" }, "friends": { "type": "array", "items": { "$ref": "#/definitions/Customer" } } } }, "Hello": { "properties": { "greet": {} } }, "NestedProperty": { "properties": { "parentProperty": { "properties": { "babyProperty": { "properties": { "theBabyOfBaby": { "properties": { "theBabyOfBabyBaby": { "type": "string" } }, "type": "boolean" } }, "type": "boolean" } }, "type": "boolean" } } } }, "parameters": { "product_id_in_path_required": { "name": "product_id", "in": "path", "description": "The ID of the product", "required": true, "type": "integer", "format": "int64" }, "product_in_body": { "name": "product", "in": "body", "schema": { "$ref": "#/definitions/Product" } }, "ItemName": { "name": "ItemName", "in": "path", "description": "protected item name", "required": true, "type": "string", "maxLength": 256 } }, "responses": { "product": { "description": "All information about a product", "schema": { "$ref": "#/definitions/Product" } }, "todo": { "description": "This API call has no documentated response (yet)" }, "Item": { "description": "A protected item" } }, "securityDefinitions": { "mug_auth": { "type": "oauth2", "flow": "accesscode", "authorizationUrl": "http://multiscalegenomics.bsc.es", "scopes": { "read": "read your files" } }, "api_key": { "type": "apiKey", "name": "api_key", "in": "header" }, "petstore_auth": { "type": "oauth2", "flow": "implicit", "authorizationUrl": "http://petstore.swagger.io/oauth/dialog", "scopes": { "read:pets": "read your pets", "write:pets": "modify pets in your account" } } }, "tags": [ { "name": "pet", "description": "Everything about your Pets", "externalDocs": { "description": "Find out more", "url": "http://swagger.io" } }, { "name": "store", "description": "Access to Petstore orders" }, { "name": "user", "description": "Operations about user", "externalDocs": { "description": "Find out more about our store", "url": "http://swagger.io" } } ], "externalDocs": { "description": "Find out more about Swagger", "url": "http://swagger.io" } }
