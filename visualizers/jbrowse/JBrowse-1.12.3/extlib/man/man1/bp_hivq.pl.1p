.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BP_HIVQ 1"
.TH BP_HIVQ 1 "2018-10-02" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
bp_hivq.PL \- an interactive command\-line interface to Bio::DB::HIV and Bio::DB::Query::HIVQuery
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 10
\& $ perl bp_hivq.PL
\& hivq> query C[subtype] SI[phenotype]
\& hivq> prerun
\& 80 sequences returned
\& Query: C[subtype] SI[phenotype]
\& hivq> outfile csi.fas
\& hivq> run
\& Download complete.
\& hivq> outfile dsi.fas
\& hivq> run D[subtype] SI[phenotype]
\& Download complete.
\& hivq> count
\& 25 sequences returned
\& Query: D[subtype] SI[phenotype]
\& hivq> exit
\& $
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The BioPerl modules Bio::DB::HIV and Bio::DB::Query::HIVQuery
together allow batch queries against the Los Alamos National
Laboratories' \s-1HIV\s0 Sequence Database using a simple query
language. \f(CW\*(C`bp_hivq.PL\*(C'\fR provides both an example of the use of these
modules, and a standalone interactive command-line interface to the
\&\s-1LANL HIV DB.\s0 Simple commands allow the user to retrieve \s-1HIV\s0 sequences
and annotations using the query language implemented in
Bio::DB::Query::HIVQuery. Visit the man pages for those modules for
more details.
.SH "USAGE"
.IX Header "USAGE"
Run the script using \f(CW\*(C`perl bp_hivq.PL\*(C'\fR or, in Unix, \f(CW\*(C`./bp_hivq.PL\*(C'\fR. You will see
the
.PP
.Vb 1
\& hivq>
.Ve
.PP
prompt. Type commands with queries to retrieve sequence and annotation
data.  See the \s-1SYNOPSIS\s0 for a sample session. Available commands
are described below.
.SS "\s-1TIPS\s0"
.IX Subsection "TIPS"
The \s-1LANL\s0 database is pretty complex and extensive. Use the \f(CW\*(C`find\*(C'\fR facility to
explore the available database tables and fields. To identify aliases for a particular field, use \f(CW\*(C`find alias [fieldname]\*(C'\fR. For example, to find a short alias to the
weirdly named field \f(CW\*(C`seq_sample.ssam_second_receptor\*(C'\fR, do
.PP
.Vb 1
\& hivq> find alias seq_sample.ssam_second_receptor
.Ve
.PP
which returns
.PP
.Vb 1
\& coreceptor             second_receptor
.Ve
.PP
Now, instead of the following query
.PP
.Vb 1
\& hivq> run C[subtype] CCR5[seq_sample.ssam_second_receptor]
.Ve
.PP
you know you can do
.PP
.Vb 1
\& hivq> run C[subtype] CCR5[coreceptor]
.Ve
.PP
Use the \f(CW\*(C`outfile\*(C'\fR command to set the file that receives the retrieved
sequences. You can change the current output file simply by issuing a
new \f(CW\*(C`outfile\*(C'\fR command during the session. The output file defaults to
standard output.
.PP
Use the \f(CW\*(C`query\*(C'\fR command to validate a query without hitting the
database. Use the \f(CW\*(C`prerun\*(C'\fR or \f(CW\*(C`count\*(C'\fR commands to get a count of
sequence hits for a query without retrieving the data. Use \f(CW\*(C`run\*(C'\fR or
\&\f(CW\*(C`do\*(C'\fR to perform a complete query, retrieving sequence data into the
currently set output files.
.PP
To process \f(CW\*(C`bp_hivq.PL\*(C'\fR commands in batch, create a text file
(\f(CW\*(C`bp_hivq.cmd\*(C'\fR, for example) containing desired commands one per
line. Then execute the following from the shell:
.PP
.Vb 1
\& $ cat bp_hivq.cmd | perl bp_hivq.PL
.Ve
.SH "COMMANDS"
.IX Header "COMMANDS"
Here is a complete list of commands. Options in single brackets (\f(CW\*(C`[req_option]\*(C'\fR) are
required; options in double brackets (\f(CW\*(C`[[opt_option]]\*(C'\fR) are optional.
.PP
.Vb 10
\& confirm            : Toggle interactive confirmation before
\&                      executing queries
\& exit               : Quit script
\& find               : Explore database schema
\&  find tables                 Display all database tables
\&  find fields                 Display all database fields (columns)
\&  find fields [table]         Display all fields in [table]
\&  find alias [field]          Display valid aliases for [field]
\& help [[command]]   : Show command help
\&                      if [[command]] not specified, list all
\&                      available commands
\& id                 : Display current session id
\& outfile [filename] : Set file for collecting retrieved data
\& ping               : Check if LANL DB is available
\& prerun [[query]]   : Execute query but retrieve hit count only
\&                      if [[query]] not specified, use current query
\& query [query]      : Validate and set current query
\& run [[query]]      : Execute query and retrieve data
\&                      if [[query]] not specified, use current query
\& state              : Display current state of the script
\&
\& bye                : Alias for \*(Aqexit\*(Aq
\& config             : Alias for \*(Aqstate\*(Aq
\& count              : Alias for \*(Aqprerun\*(Aq
\& do                 : Alias for \*(Aqrun\*(Aq
\& out                : Alias for \*(Aqoutfile\*(Aq
\& quit               : Alias for \*(Aqexit\*(Aq
.Ve
.SH "OPTIONS"
.IX Header "OPTIONS"
.Vb 1
\& \-v : verbose; turns on the internal debug() function
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Mark A. Jensen"
.IX Header "AUTHOR - Mark A. Jensen"
Mark A. Jensen  <maj@fortinbras.us>
