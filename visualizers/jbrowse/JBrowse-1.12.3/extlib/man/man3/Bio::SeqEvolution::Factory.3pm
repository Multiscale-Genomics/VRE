.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::SeqEvolution::Factory 3"
.TH Bio::SeqEvolution::Factory 3 "2018-10-02" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::SeqEvolution::Factory \- Factory object to instantiate sequence evolving classes
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    # not an instantiable class
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the factory class that can be used to call for a specific
model to mutate a sequence.
.PP
Bio::SeqEvolution::DNAPoint is the default for nucleotide sequences
and the only implementation at this point.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
.Vb 1
\&  Heikki Lehvaslaiho E<lt>heikki at bioperl dot orgE<gt>
.Ve
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Additional contributor's names and emails here
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 5
\&  Title   : new
\&  Usage   : my $obj = Bio::SeqEvolution::Factory\->new();
\&  Function: Builds a new Bio:SeqEvolution::EvolutionI object
\&  Returns : Bio:SeqEvolution::EvolutionI object
\&  Args    : \-type           => class name
.Ve
.PP
See <Bio:SeqEvolution::EvolutionI>
.SS "_load_format_module"
.IX Subsection "_load_format_module"
.Vb 6
\& Title   : _load_format_module
\& Usage   : *INTERNAL SeqIO stuff*
\& Function: Loads up (like use) a module at run time on demand
\& Example :
\& Returns :
\& Args    :
.Ve
.SS "type"
.IX Subsection "type"
.Vb 6
\& Title   : type
\& Usage   : $obj\->type($newval)
\& Function: Set used evolution model. It is set by giving a
\&           valid Bio::SeqEvolution::* class name 
\& Returns : value of type
\& Args    : newvalue (optional)
.Ve
.PP
Defaults to Bio::SeqEvolution::DNAPoint.
.SH "mutation counters"
.IX Header "mutation counters"
The next three methods set a value to limit the number of mutations
introduced the the input sequence.
.SS "identity"
.IX Subsection "identity"
.Vb 5
\& Title   : identity
\& Usage   : $obj\->identity($newval)
\& Function: Set the desired identity between original and mutated sequence
\& Returns : value of identity
\& Args    : newvalue (optional)
.Ve
.SS "pam"
.IX Subsection "pam"
.Vb 5
\& Title   : pam
\& Usage   : $obj\->pam($newval)
\& Function: Set the wanted Percentage of Accepted Mutations, PAM
\& Returns : value of PAM
\& Args    : newvalue (optional)
.Ve
.PP
When you are measuring sequence divergence, \s-1PAM\s0 needs to be
estimated. When you are generating sequences, \s-1PAM\s0 is simply the count
of mutations introduced to the reference sequence normalised to the
original sequence length.
.SS "mutation_count"
.IX Subsection "mutation_count"
.Vb 5
\& Title   : mutation_count
\& Usage   : $obj\->mutation_count($newval)
\& Function: Set the number of wanted mutations to the sequence 
\& Returns : value of mutation_count
\& Args    : newvalue (optional)
.Ve
.SS "seq"
.IX Subsection "seq"
.Vb 5
\& Title   : seq
\& Usage   : $obj\->seq($newval)
\& Function: Set the sequence object for the original sequence
\& Returns : The sequence object
\& Args    : newvalue (optional)
.Ve
.PP
Setting this will reset mutation and generated mutation counters.
.SS "seq_type"
.IX Subsection "seq_type"
.Vb 5
\& Title   : seq_type
\& Usage   : $obj\->seq_type($newval)
\& Function: Set the returned seq_type to one needed
\& Returns : value of seq_type
\& Args    : newvalue (optional)
.Ve
.PP
Defaults to Bio::PrimarySeq.
.SS "get_mutation_counter"
.IX Subsection "get_mutation_counter"
.Vb 5
\& Title   : get_mutation_counter
\& Usage   : $obj\->get_mutation_counter()
\& Function: Get the count of sequences created
\& Returns : value of counter
\& Args    : \-
.Ve
.SS "reset_mutation_counter"
.IX Subsection "reset_mutation_counter"
.Vb 5
\& Title   : reset_mutation_counter
\& Usage   : $obj\->reset_mutation_counter()
\& Function: Resert the counter of mutations
\& Returns : value of counter
\& Args    : \-
.Ve
.SS "get_sequence_counter"
.IX Subsection "get_sequence_counter"
.Vb 5
\& Title   : get_sequence_counter
\& Usage   : $obj\->get_sequence_counter()
\& Function: Get the count of sequences created
\& Returns : value of counter
\& Args    : \-
.Ve
.SS "reset_sequence_counter"
.IX Subsection "reset_sequence_counter"
.Vb 5
\& Title   : reset_sequence_counter
\& Usage   : $obj\->reset_sequence_counter()
\& Function: Resert the counter of sequences created
\& Returns : value of counter
\& Args    : \-
.Ve
.PP
This is called when ever mutated sequences are reassigned new values
using methods \fIseq()\fR and \fImutated_seq()\fR.  As a side affect, this method
also recreates the intermal alignment that is used to calculate the
sequence identity.
.SS "each_seq"
.IX Subsection "each_seq"
.Vb 6
\& Title   : each_seq
\& Usage   : $obj\->each_seq($int)
\& Function:
\& Returns : an array of sequences mutated from the reference sequence
\&           according to evolutionary parameters given
\& Args    : \-
.Ve
.SS "each_mutation"
.IX Subsection "each_mutation"
.Vb 6
\&  Title   : each_mutation
\&  Usage   : $obj\->each_mutation
\&  Function: return the mutations leading to the last generated 
\&            sequence in objects 
\&  Returns : an array of Bio::Variation::DNAMutation objects
\&  Args    : optional argument to return an array of  stringified names
.Ve
.SH "Internal methods"
.IX Header "Internal methods"
.SS "_increase_mutation_counter"
.IX Subsection "_increase_mutation_counter"
.Vb 5
\& Title   : _increase_mutation_counter
\& Usage   : $obj\->_increase_mutation_counter()
\& Function: Internal method to increase the counter of mutations performed
\& Returns : value of counter
\& Args    : \-
.Ve
.SS "_increase_sequence_counter"
.IX Subsection "_increase_sequence_counter"
.Vb 5
\& Title   : _increase_sequence_counter
\& Usage   : $obj\->_increase_sequence_counter()
\& Function: Internal method to increase the counter of sequences created
\& Returns : value of counter
\& Args    : \-
.Ve
