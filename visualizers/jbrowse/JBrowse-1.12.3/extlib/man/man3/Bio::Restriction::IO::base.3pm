.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Restriction::IO::base 3"
.TH Bio::Restriction::IO::base 3 "2018-10-02" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Restriction::IO::base \- base enzyme set
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Do not use this module directly.  Use it via the Bio::Restriction::IO class.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class defines some base methods for restriction enzyme input and
at the same time gives a base list of common enzymes.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the
Bioperl mailing lists Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Rob Edwards, redwards@utmem.edu
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Heikki Lehvaslaiho, heikki-at-bioperl-dot-org
Mark A. Jensen, maj-at-fortinbras-dot-us
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "read"
.IX Subsection "read"
.Vb 5
\& Title   : read
\& Usage   : $renzs = $stream\->read
\& Function: reads all the restrction enzymes from the stream
\& Returns : a Bio::Restriction::Restriction object
\& Args    : none
.Ve
.SS "_xln_sub"
.IX Subsection "_xln_sub"
.Vb 7
\& Title   : _xln_sub
\& Function: Translates withrefm coords to Bio::Restriction coords
\& Args    : Bio::Restriction::Enzyme object, scalar integer (cut posn)
\& Note    : Used internally; pass as a coderef to the B:R::Enzyme 
\&           constructor
\& Note    : It is convenient for each format module to have its own 
\&           version of this; not currently demanded by the interface.
.Ve
.SS "write"
.IX Subsection "write"
.Vb 6
\& Title   : write
\& Usage   : $stream\->write($renzs)
\& Function: writes restriction enzymes into the stream
\& Returns : 1 for success and 0 for error
\& Args    : a Bio::Restriction::Enzyme
\&           or a Bio::Restriction::EnzymeCollection object
.Ve
.SS "verify_prototype"
.IX Subsection "verify_prototype"
.Vb 8
\& Title     : verify_prototype
\& Purpose   : checks enzyme against current prototype list (retrieved remotely)
\& Returns   : returns TRUE if enzyme is prototype
\& Argument  : Bio::Restriction::EnzymeI
\& Comments  : This is an auxiliary method to retrieve and check an enzyme
\&             as a prototype.  It retrieves the current list, stores it
\&             as a singleton instance, then uses it to check the prototype
\&             and modify is_prototype() to true or false.  Use as follows:
\&
\&             my $col = $io\->read;
\&             for my $enz ($col\->each_enzyme) {
\&                 print $enz\->name.":".$enz\->site."\en";
\&                 print "\et".$io\->verify_prototype($enz)."\en";
\&             }
.Ve
.SS "Common \s-1REBASE\s0 parsing methods"
.IX Subsection "Common REBASE parsing methods"
The rest of the methods in this file are to be used by other \s-1REBASE\s0
parsers. They are not to be used outside subclasses of this base
class. (They are 'protected' in the sense the word is used in Java.)
.SS "_cuts_from_site"
.IX Subsection "_cuts_from_site"
.Vb 7
\& Title   : _cuts_from_site
\& Usage   : ($site, $cut, $comp_cut) = _cuts_from_site(\*(AqACGCGT(4/5)\*(Aq);
\& Function: Separates cut positions from a single site string.
\&           Does nothing to site if it does not have the cut string
\& Returns : array of site_string, forward_cut_position, reverse_cut_position
\& Args    : recognition site string
\& Note    : Not used in withrefm refactor/maj
.Ve
.SS "_meth"
.IX Subsection "_meth"
.Vb 8
\& Title   : _meth
\& Usage   : ($pos, $meth) = $self\->_meth(\*(Aq2(5)\*(Aq);
\& Function: Separates methylation position and coce from a string.
\&           Adjusts the position depending on enzyme site length
\&           and symmetry 
\& Returns : array of position and methylation code
\& Args    : 1. reference to Enzyme object
\&           2. methylation description string
.Ve
.SS "_coordinate_shift_to_cut"
.IX Subsection "_coordinate_shift_to_cut"
.Vb 8
\& Title   : _coordinate_shift_to_cut
\& Usage   : $cut = $self\->_coordinate_shift_to_cut($oricut, offset);
\& Function: Adjust cut position coordinates to start from the 
\&           first nucleotides of site
\& Returns : Cut position in correct coordinates
\& Args    : 1. Original cut position
\&           2. Length of the recognition site
\& Note    : Not used in withrefm.pm refactor/maj
.Ve
.SS "_make_multisites"
.IX Subsection "_make_multisites"
.Vb 9
\& Title   : _make_multisites
\& Usage   : $self\->_make_multisites($first_enzyme, \e@sites, \e@mets)
\& Function: Bless a Bio::Restriction::Enzyme  into
\&           Bio::Restriction::Enzyme::MultiSite and clone it as many
\&           times as there are alternative sites.
\& Returns : nothing, does in place editing
\& Args    : 1. a Bio::Restriction::Enzyme
\&           2. reference to an array of recognition site strings
\&           3. reference to an array of methylation code strings, optional
.Ve
.SS "_make_multicuts"
.IX Subsection "_make_multicuts"
.Vb 3
\& Title   : _make_multicuts
\& Usage   : $self\->_make_multicuts($first_enzyme, $precuts)
\& Function: 
\&
\&           Bless a Bio::Restriction::Enzyme into
\&           Bio::Restriction::Enzyme::MultiCut and clone it. The precut
\&           string is processed to replase the cut sites in the cloned
\&           object. Both objects refer to each other through others() method.
\&
\& Returns : nothing, does in place editing
\& Args    : 1. a Bio::Restriction::Enzyme
\&           2. precut string, e.g. \*(Aq12/7\*(Aq
.Ve
.PP
The examples we have of multiply cutting enzymes cut only four
times. This protected method deals only with a string of two
integers separated with a slash, e.g. '12/7'. The numbers represent the positions
\&\s-1BEFORE\s0 the start of the recognition site, i.e. negative positions.
.SS "_companies"
.IX Subsection "_companies"
.Vb 7
\& Title     : _companies
\& Purpose   : Defines the companies that we know about
\& Returns   : A hash
\& Argument  : Nothing
\& Comments  : An internal method to define the companies that we know about
\&             REBASE uses a code, and this converts the code to the real name
\&             (e.g. A = Amersham Pharmacia Biotech)
.Ve
