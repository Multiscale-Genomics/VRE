.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Map::Marker 3"
.TH Bio::Map::Marker 3 "2018-10-02" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Map::Marker \- An central map object representing a generic marker
that can have multiple location in several maps.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  # get map objects somehow
\&
\&  # a marker with complex localisation
\&  $o_usat = Bio::Map::Marker\->new(\-name=>\*(AqChad Super Marker 2\*(Aq,
\&                                  \-positions => [ [$map1, $position1],
\&                                                  [$map1, $position2]
\&                                                ] );
\&
\&  # The markers deal with Bio::Map::Position objects which can also
\&  # be explicitly created and passed on to markers as an array ref:
\&  $o_usat2 = Bio::Map::Marker\->new(\-name=>\*(AqChad Super Marker 3\*(Aq,
\&                                  \-positions => [ $pos1, 
\&                                                  $pos2
\&                                                ] );
\&
\&  # a marker with unique position in a map
\&  $marker1 = Bio::Map::Marker\->new(\-name=>\*(Aqhypervariable1\*(Aq,
\&                                   \-map => $map1,
\&                                   \-position => 100
\&                                   );
\&
\&  # another way of creating a marker with unique position in a map:
\&  $marker2 = Bio::Map::Marker\->new(\-name=>\*(Aqhypervariable2\*(Aq);
\&  $map1\->add_element($marker2);
\&  $marker2\->position(100);
\&
\&  # position method is a short cut for get/setting unique positions
\&  # which overwrites previous values
\&  # to place a marker to other maps or to have multiple positions
\&  # for a map within the same map use add_position()
\&
\&  $marker2\->add_position(200);  # new position in the same map
\&  $marker2\->add_position($map2,200); # new map
\&
\&  # setting a map() in a marker or adding a marker into a map are
\&  # identical mathods. Both set the bidirectional connection which is
\&  # used by the marker to remember its latest, default map.
\&
\&  # Regardes of how marker positions are created, they are stored and
\&  # returned as Bio::Map::PositionI objects:
\&
\&  # unique position
\&  print $marker1\->position\->value, "\en";
\&  # several positions
\&  foreach $pos ($marker2\->each_position($map1)) {
\&     print $pos\->value, "\en";
\&  }
.Ve
.PP
See Bio::Map::Position and Bio::Map::PositionI for more information.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A Marker is a Bio::Map::Mappable with some properties particular to markers.
It also offers a number of convienience methods to make dealing with map
elements easier.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the
Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Chad Matsalla"
.IX Header "AUTHOR - Chad Matsalla"
Email bioinformatics1@dieselwurks.com
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Heikki Lehvaslaiho heikki-at-bioperl-dot-org
Lincoln Stein      lstein@cshl.org
Jason Stajich      jason@bioperl.org
Sendu Bala         bix@sendu.me.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 11
\& Title   : new
\& Usage   : my $marker = Bio::Map::Marker\->new( \-name => \*(AqWhizzy marker\*(Aq,
\&                                                  \-position => $position);
\& Function: Builds a new Bio::Map::Marker object
\& Returns : Bio::Map::Marker
\& Args    :
\&           \-name    => name of this microsatellite
\&                       [optional], string,default \*(AqUnknown\*(Aq
\&           \-default_map => the default map for this marker, a Bio::Map::MapI
\&           \-position => map position for this marker, a Bio::Map::PositionI
\&           \-positions => array ref of Bio::Map::PositionI objects
\&
\&           position and positions can also take as values anything the
\&           corresponding methods can take
.Ve
.SS "default_map"
.IX Subsection "default_map"
.Vb 5
\& Title   : default_map
\& Usage   : my $map = $marker\->default_map();
\& Function: Get/Set the default map for the marker.
\& Returns : L<Bio::Map::MapI>
\& Args    : [optional] new L<Bio::Map::MapI>
.Ve
.SS "map"
.IX Subsection "map"
.Vb 2
\& Title   : map
\& Function: This is a synonym of the default_map() method
\&
\&                   *** does not actually add this marker to the map! ***
\&
\& Status  : deprecated, will be removed in next version
.Ve
.SS "get_position_object"
.IX Subsection "get_position_object"
.Vb 10
\& Title   : get_position_class
\& Usage   : my $position = $marker\->get_position_object();
\& Function: To get an object of the default Position class
\&           for this Marker. Subclasses should redefine this method.
\&           The Position returned needs to be a L<Bio::Map::PositionI> with
\&                   \-element set to self.
\& Returns : L<Bio::Map::PositionI>
\& Args    : none for an \*(Aqempty\*(Aq PositionI object, optionally
\&           Bio::Map::MapI and value string to set the Position\*(Aqs \-map and \-value
\&           attributes.
.Ve
.SS "position"
.IX Subsection "position"
.Vb 12
\& Title   : position
\& Usage   : my $position = $mappable\->position();
\&                   $mappable\->position($position);
\& Function: Get/Set the Position of this Marker (where it is on which map),
\&           purging all other positions before setting.
\& Returns : L<Bio::Map::PositionI>
\& Args    : Bio::Map::PositionI
\&            OR
\&           Bio::Map::MapI AND
\&           scalar
\&            OR
\&           scalar, but only if the marker has a default map
.Ve
.SS "add_position"
.IX Subsection "add_position"
.Vb 10
\& Title   : add_position
\& Usage   : $marker\->add_position($position);
\& Function: Add a Position to this marker
\& Returns : n/a
\& Args    : Bio::Map::PositionI
\&            OR
\&           Bio::Map::MapI AND
\&           scalar
\&            OR
\&           scalar, but only if the marker has a default map
.Ve
.SS "positions"
.IX Subsection "positions"
.Vb 5
\& Title   : positions
\& Usage   : $marker\->positions([$pos1, $pos2, $pos3]);
\& Function: Add multiple Bio::Map::PositionI to this marker
\& Returns : n/a
\& Args    : array ref of $map/value tuples or array ref of Bio::Map::PositionI
.Ve
.SS "in_map"
.IX Subsection "in_map"
.Vb 5
\& Title   : in_map
\& Usage   : if ( $marker\->in_map($map) ) {}
\& Function: Tests if this marker is found on a specific map
\& Returns : boolean
\& Args    : a map unique id OR Bio::Map::MapI
.Ve
