.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::AlignIO::stockholm 3"
.TH Bio::AlignIO::stockholm 3 "2018-10-02" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::AlignIO::stockholm \- stockholm sequence input/output stream
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  # Do not use this module directly.  Use it via the L<Bio::AlignIO> class.
\&
\&  use Bio::AlignIO;
\&  use strict;
\&
\&  my $in = Bio::AlignIO\->new(\-format => \*(Aqstockholm\*(Aq,
\&                             \-file   => \*(Aqt/data/testaln.stockholm\*(Aq);
\&  while( my $aln = $in\->next_aln ) {
\&
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object can transform Bio::Align::AlignI objects to and from
stockholm flat file databases.  This has been completely refactored
from the original stockholm parser to handle annotation data and now
includes a \fIwrite_aln()\fR method for (almost) complete stockholm
format output.
.PP
Stockholm alignment records normally contain additional sequence-based
and alignment-based annotation
.PP
.Vb 3
\&  GF Lines (alignment feature/annotation):
\&  #=GF <featurename> <Generic per\-file annotation, free text>
\&  Placed above the alignment
\&
\&  GC Lines (Alignment consensus)
\&  #=GC <featurename> <Generic per\-column annotation, exactly 1
\&       character per column>
\&  Placed below the alignment
\&
\&  GS Lines (Sequence annotations)
\&  #=GS <seqname> <featurename> <Generic per\-sequence annotation, free
\&       text>
\&
\&  GR Lines (Sequence meta data)
\&  #=GR <seqname> <featurename> <Generic per\-sequence AND per\-column
\&       mark up, exactly 1 character per column>
.Ve
.PP
Currently, sequence annotations (those designated with \s-1GS\s0 tags) are
parsed only for accession numbers and descriptions.  It is intended that
full parsing will be added at some point in the near future along with
a builder option for optionally parsing alignment annotation and meta data.
.PP
The following methods/tags are currently used for storing and writing
the alignment annotation data.
.PP
.Vb 7
\&    Tag        SimpleAlign
\&                 Method
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&     AC        accession
\&     ID        id
\&     DE        description
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&
\&    Tag        Bio::Annotation   TagName                    Parameters
\&               Class
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&     AU        SimpleValue       record_authors             value
\&     SE        SimpleValue       seed_source                value
\&     GA        SimpleValue       gathering_threshold        value
\&     NC        SimpleValue       noise_cutoff               value
\&     TC        SimpleValue       trusted_cutoff             value
\&     TP        SimpleValue       entry_type                 value
\&     SQ        SimpleValue       num_sequences              value
\&     PI        SimpleValue       previous_ids               value
\&     DC        Comment           database_comment           comment
\&     CC        Comment           alignment_comment          comment
\&     DR        Target            dblink                     database
\&                                                            primary_id
\&                                                            comment
\&     AM        SimpleValue       build_method               value
\&     NE        SimpleValue       pfam_family_accession      value
\&     NL        SimpleValue       sequence_start_stop        value
\&     SS        SimpleValue       sec_structure_source       value
\&     BM        SimpleValue       build_model                value
\&     RN        Reference         reference                  *
\&     RC        Reference         reference                  comment
\&     RM        Reference         reference                  pubmed
\&     RT        Reference         reference                  title
\&     RA        Reference         reference                  authors
\&     RL        Reference         reference                  location
\&    \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&  * RN is generated based on the number of Bio::Annotation::Reference objects
.Ve
.SS "Custom annotation"
.IX Subsection "Custom annotation"
Some users may want to add custom annotation beyond those mapped above.
Currently there are two methods to do so; however, the methods used for adding
such annotation may change in the future, particularly if alignment Writer
classes are introduced. In particular, do not rely on changing the global
variables \f(CW@WRITEORDER\fR or \f(CW%WRITEMAP\fR as these may be made private at some point.
.PP
1) Use (and abuse) the 'custom' tag.  The tagname for the object can differ
from the tagname used to store the object in the AnnotationCollection.
.PP
.Vb 10
\&    # AnnotationCollection from the SimpleAlign object
\&    my $coll = $aln\->annotation;
\&    my $factory = Bio::Annotation::AnnotationFactory\->new(\-type =>
\&        Bio::Annotation::SimpleValue\*(Aq);
\&    my $rfann = $factory\->create_object(\-value => $str,
\&                                        \-tagname => \*(Aqmytag\*(Aq);
\&    $coll\->add_Annotation(\*(Aqcustom\*(Aq, $rfann);
\&    $rfann = $factory\->create_object(\-value => \*(Aqfoo\*(Aq,
\&                                    \-tagname => \*(Aqbar\*(Aq);
\&    $coll\->add_Annotation(\*(Aqcustom\*(Aq, $rfann);
.Ve
.PP
\&\s-1OUTPUT:\s0
.PP
.Vb 1
\&    # STOCKHOLM 1.0
\&
\&    #=GF ID myID12345
\&    #=GF mytag katnayygqelggvnhdyddlakfyfgaglealdffnnkeaaakiinwvaEDTTRGKIQDLV??
\&    #=GF mytag TPtd~????LDPETQALLV???????????????????????NAIYFKGRWE?????????~??
\&    #=GF mytag ??HEF?A?EMDTKPY??DFQH?TNen?????GRI??????V???KVAM??MF?????????N??
\&    #=GF mytag ???DD?VFGYAEL????DE???????L??D??????A??TALELAY??????????????????
\&    #=GF mytag ?????????????KG??????Sa???TSMLILLP???????????????D??????????????
\&    #=GF mytag ???????????EGTr?????AGLGKLLQ??QL????????SREef??DLNK??L???AH????R
\&    #=GF mytag ????????????L????????????????????????????????????????R?????????R
\&    #=GF mytag ??QQ???????V???????AVRLPKFSFefefdlkeplknlgmhqafdpnsdvfklmdqavlvi
\&    #=GF mytag gdlqhayafkvd????????????????????????????????????????????????????
\&    #=GF mytag ????????????????????????????????????????????????????????????????
\&    #=GF mytag ????????????????????????????????????????????????????????????????
\&    #=GF mytag ????????????????????????????????????????????????????????????????
\&    #=GF mytag ?????????????INVDEAG?TEAAAATAAKFVPLSLppkt??????????????????PIEFV
\&    #=GF mytag ADRPFAFAIR??????E?PAT?G????SILFIGHVEDPTP?msv?
\&    #=GF bar foo
\&    ...
.Ve
.PP
2) Modify the global \f(CW@WRITEORDER\fR and \f(CW%WRITEMAP\fR.
.PP
.Vb 2
\&    # AnnotationCollection from the SimpleAlign object
\&    my $coll = $aln\->annotation;
\&
\&    # add to WRITEORDER
\&    my @order = @Bio::AlignIO::stockholm::WRITEORDER;
\&    push @order, \*(Aqmy_stuff\*(Aq;
\&    @Bio::AlignIO::stockholm::WRITEORDER = @order;
\&
\&    # make sure new tag maps to something
\&    $Bio::AlignIO::stockholm::WRITEMAP{my_stuff} = \*(AqHobbit/SimpleValue\*(Aq;
\&
\&    my $rfann = $factory\->create_object(\-value => \*(AqFrodo\*(Aq,
\&                                        \-tagname => \*(AqHobbit\*(Aq);
\&    $coll\->add_Annotation(\*(Aqmy_stuff\*(Aq, $rfann);
\&    $rfann = $factory\->create_object(\-value => \*(AqBilbo\*(Aq,
\&                                     \-tagname => \*(AqHobbit\*(Aq);
\&    $coll\->add_Annotation(\*(Aqmy_stuff\*(Aq, $rfann);
.Ve
.PP
\&\s-1OUTPUT:\s0
.PP
.Vb 1
\&    # STOCKHOLM 1.0
\&
\&    #=GF ID myID12345
\&    #=GF Hobbit Frodo
\&    #=GF Hobbit Bilbo
\&    ....
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHORS \- Chris Fields, Peter Schattner"
.IX Header "AUTHORS - Chris Fields, Peter Schattner"
Email: cjfields-at-uiuc-dot-edu, schattner@alum.mit.edu
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Andreas Kahari, ak\-at\-ebi.ac.uk
Jason Stajich, jason\-at\-bioperl.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 12
\& Title   : new
\& Usage   : my $alignio = Bio::AlignIO\->new(\-format => \*(Aqstockholm\*(Aq
\&                                          \-file   => \*(Aq>file\*(Aq);
\& Function: Initialize a new L<Bio::AlignIO::stockholm> reader or writer
\& Returns : L<Bio::AlignIO> object
\& Args    : \-line_length :  length of the line for the alignment block
\&           \-alphabet    :  symbol alphabet to set the sequences to.  If not set,
\&                           the parser will try to guess based on the alignment
\&                           accession (if present), defaulting to \*(Aqdna\*(Aq.
\&           \-spaces      :  (optional, def = 1) boolean to add a space in between
\&                           the "# STOCKHOLM 1.0" header and the annotation and
\&                           the annotation and the alignment.
.Ve
.SS "next_aln"
.IX Subsection "next_aln"
.Vb 5
\& Title   : next_aln
\& Usage   : $aln = $stream\->next_aln()
\& Function: returns the next alignment in the stream.
\& Returns : L<Bio::Align::AlignI> object
\& Args    : NONE
.Ve
.SS "write_aln"
.IX Subsection "write_aln"
.Vb 5
\& Title   : write_aln
\& Usage   : $stream\->write_aln(@aln)
\& Function: writes the $aln object into the stream in stockholm format
\& Returns : 1 for success and 0 for error
\& Args    : L<Bio::Align::AlignI> object
.Ve
.SS "line_length"
.IX Subsection "line_length"
.Vb 5
\& Title   : line_length
\& Usage   : $obj\->line_length($newval)
\& Function: Set the alignment output line length
\& Returns : value of line_length
\& Args    : newvalue (optional)
.Ve
.SS "spaces"
.IX Subsection "spaces"
.Vb 6
\& Title   : spaces
\& Usage   : $obj\->spaces(1)
\& Function: Set the \*(Aqspaces\*(Aq flag, which prints extra newlines between the
\&           header and the annotation and the annotation and the alignment
\& Returns : sequence data type
\& Args    : newvalue (optional)
.Ve
.SS "alignhandler"
.IX Subsection "alignhandler"
.Vb 5
\& Title   : alignhandler
\& Usage   : $stream\->alignhandler($handler)
\& Function: Get/Set the Bio::HandlerBaseI object
\& Returns : Bio::HandlerBaseI
\& Args    : Bio::HandlerBaseI
.Ve
