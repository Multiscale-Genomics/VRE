.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::SeqFeature::Store::DBI::SQLite 3"
.TH Bio::DB::SeqFeature::Store::DBI::SQLite 3 "2018-10-02" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::DB::SeqFeature::Store::DBI::SQLite \-\- SQLite implementation of Bio::DB::SeqFeature::Store
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::DB::SeqFeature::Store;
\&
\&  # Open the sequence database
\&  my $db = Bio::DB::SeqFeature::Store\->new(\-adaptor => \*(AqDBI::SQLite\*(Aq,
\&                                           \-dsn     => \*(Aq/path/to/database.db\*(Aq);
\&
\&  # get a feature from somewhere
\&  my $feature = Bio::SeqFeature::Generic\->new(...);
\&
\&  # store it
\&  $db\->store($feature) or die "Couldn\*(Aqt store!";
\&
\&  # primary ID of the feature is changed to indicate its primary ID
\&  # in the database...
\&  my $id = $feature\->primary_id;
\&
\&  # get the feature back out
\&  my $f  = $db\->fetch($id);
\&
\&  # change the feature and update it
\&  $f\->start(100);
\&  $db\->update($f) or die "Couldn\*(Aqt update!";
\&
\&  # searching...
\&  # ...by id
\&  my @features = $db\->fetch_many(@list_of_ids);
\&
\&  # ...by name
\&  @features = $db\->get_features_by_name(\*(AqZK909\*(Aq);
\&
\&  # ...by alias
\&  @features = $db\->get_features_by_alias(\*(Aqsma\-3\*(Aq);
\&
\&  # ...by type
\&  @features = $db\->get_features_by_name(\*(Aqgene\*(Aq);
\&
\&  # ...by location
\&  @features = $db\->get_features_by_location(\-seq_id=>\*(AqChr1\*(Aq,\-start=>4000,\-end=>600000);
\&
\&  # ...by attribute
\&  @features = $db\->get_features_by_attribute({description => \*(Aqprotein kinase\*(Aq})
\&
\&  # ...by the GFF "Note" field
\&  @result_list = $db\->search_notes(\*(Aqkinase\*(Aq);
\&
\&  # ...by arbitrary combinations of selectors
\&  @features = $db\->features(\-name => $name,
\&                            \-type => $types,
\&                            \-seq_id => $seqid,
\&                            \-start  => $start,
\&                            \-end    => $end,
\&                            \-attributes => $attributes);
\&
\&  # ...using an iterator
\&  my $iterator = $db\->get_seq_stream(\-name => $name,
\&                                     \-type => $types,
\&                                     \-seq_id => $seqid,
\&                                     \-start  => $start,
\&                                     \-end    => $end,
\&                                     \-attributes => $attributes);
\&
\&  while (my $feature = $iterator\->next_seq) {
\&    # do something with the feature
\&  }
\&
\&  # ...limiting the search to a particular region
\&  my $segment  = $db\->segment(\*(AqChr1\*(Aq,5000=>6000);
\&  my @features = $segment\->features(\-type=>[\*(AqmRNA\*(Aq,\*(Aqmatch\*(Aq]);
\&
\&  # getting & storing sequence information
\&  # Warning: this returns a string, and not a PrimarySeq object
\&  $db\->insert_sequence(\*(AqChr1\*(Aq,\*(AqGATCCCCCGGGATTCCAAAA...\*(Aq);
\&  my $sequence = $db\->fetch_sequence(\*(AqChr1\*(Aq,5000=>6000);
\&
\&  # what feature types are defined in the database?
\&  my @types    = $db\->types;
\&
\&  # create a new feature in the database
\&  my $feature = $db\->new_feature(\-primary_tag => \*(AqmRNA\*(Aq,
\&                                 \-seq_id      => \*(Aqchr3\*(Aq,
\&                                 \-start      => 10000,
\&                                 \-end        => 11000);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::DB::SeqFeature::Store::SQLite is the SQLite adaptor for
Bio::DB::SeqFeature::Store. You will not create it directly, but
instead use Bio::DB::SeqFeature::Store\->\fInew()\fR to do so.
.PP
See Bio::DB::SeqFeature::Store for complete usage instructions.
.SS "Using the SQLite adaptor"
.IX Subsection "Using the SQLite adaptor"
To establish a connection to the database, call
Bio::DB::SeqFeature::Store\->new(\-adaptor=>'DBI::SQLite',@more_args). The
additional arguments are as follows:
.PP
.Vb 2
\&  Argument name       Description
\&  \-\-\-\-\-\-\-\-\-\-\-\-\-       \-\-\-\-\-\-\-\-\-\-\-
\&
\& \-dsn              The path to the SQLite database file.
\&
\& \-namespace        A prefix to attach to each table. This allows you
\&                   to have several virtual databases in the same
\&                   physical database.
\&
\& \-temp             Boolean flag. If true, a temporary database
\&                   will be created and destroyed as soon as
\&                   the Store object goes out of scope. (synonym \-temporary)
\&
\& \-autoindex        Boolean flag. If true, features in the database will be
\&                   reindexed every time they change. This is the default.
\&
\& \-fts              Boolean flag. If true, when the \-create flag is true, the
\&                   attribute table will be created and indexed index for
\&                   full\-text search using the most recent FTS extension
\&                   supported by DBD::SQLite.
\&
\& \-tmpdir           Directory in which to place temporary files during "fast" loading.
\&                   Defaults to File::Spec\->tmpdir(). (synonyms \-dump_dir, \-dumpdir, \-tmp)
\&
\& \-dbi_options      A hashref to pass to DBI\->connect\*(Aqs 4th argument, the "attributes."
\&                   (synonyms \-options, \-dbi_attr)
\&
\& \-write            Pass true to open database for writing or updating.
.Ve
.PP
If successful, a new instance of
Bio::DB::SeqFeature::Store::DBI::SQLite will be returned.
.PP
In addition to the standard methods supported by all well-behaved
Bio::DB::SeqFeature::Store databases, several following
adaptor-specific methods are provided. These are described in the next
sections.
.SS "toplevel_types"
.IX Subsection "toplevel_types"
.Vb 6
\& Title   : toplevel_types
\& Usage   : @type_list = $db\->toplevel_types
\& Function: Get the toplevel types in the database
\& Returns : array of Bio::DB::GFF::Typename objects
\& Args    : none
\& Status  : public
.Ve
.PP
This is similar to \fItypes()\fR but only returns the types of
\&\s-1INDEXED \s0(toplevel) features.
.SH "AUTHOR"
.IX Header "AUTHOR"
Nathan Weeks \- Nathan.Weeks@ars.usda.gov
.PP
Copyright (c) 2009 Nathan Weeks
.PP
Modified 2010 to support cumulative statistics by Lincoln Stein
<lincoln.stein@gmail.com>.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself. See the Bioperl license for
more details.
