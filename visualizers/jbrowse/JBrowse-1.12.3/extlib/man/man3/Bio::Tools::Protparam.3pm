.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Protparam 3"
.TH Bio::Tools::Protparam 3 "2018-10-02" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Protparam \- submit to and parse output from protparam ;
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Bio::DB::GenBank;
\&  use Bio::Tools::Protparam;
\&
\&  my $gb = new Bio::DB::GenBank(\-retrievaltype => \*(Aqtempfile\*(Aq , 
\&                                \-format => \*(AqFasta\*(Aq);
\&  my @ids=qw(O14521 O43709 O43826);
\&  my $seqio = $gb\->get_Stream_by_acc(\e@ids );
\&
\&  while( my $seq =  $seqio\->next_seq ) {
\&
\&        my $pp = Bio::Tools::Protparam\->new(seq=>$seq\->seq);
\&
\&        print
\&        "ID : ", $seq\->display_id,"\en",
\&        "Amino acid number : ",$pp\->amino_acid_number(),"\en",
\&        "Number of negative amino acids : ",$pp\->num_neg(),"\en",
\&        "Number of positive amino acids : ",$pp\->num_pos(),"\en",
\&        "Molecular weight : ",$pp\->molecular_weight(),"\en",
\&        "Theoretical pI : ",$pp\->theoretical_pI(),"\en",
\&        "Total number of atoms : ", $pp\->total_atoms(),"\en",
\&        "Number of carbon atoms : ",$pp\->num_carbon(),"\en",
\&        "Number of hydrogen atoms : ",$pp\->num_hydrogen(),"\en",
\&        "Number of nitrogen atoms : ",$pp\->num_nitro(),"\en",
\&        "Number of oxygen atoms : ",$pp\->num_oxygen(),"\en",
\&        "Number of sulphur atoms : ",$pp\->num_sulphur(),"\en",
\&        "Half life : ", $pp\->half_life(),"\en",
\&        "Instability Index : ", $pp\->instability_index(),"\en",
\&        "Stability class : ", $pp\->stability(),"\en",
\&        "Aliphatic_index : ",$pp\->aliphatic_index(),"\en",
\&        "Gravy : ", $pp\->gravy(),"\en",
\&        "Composition of A : ", $pp\->AA_comp(\*(AqA\*(Aq),"\en",
\&        "Composition of R : ", $pp\->AA_comp(\*(AqR\*(Aq),"\en",
\&        "Composition of N : ", $pp\->AA_comp(\*(AqN\*(Aq),"\en",
\&        "Composition of D : ", $pp\->AA_comp(\*(AqD\*(Aq),"\en",
\&        "Composition of C : ", $pp\->AA_comp(\*(AqC\*(Aq),"\en",
\&        "Composition of Q : ", $pp\->AA_comp(\*(AqQ\*(Aq),"\en",
\&        "Composition of E : ", $pp\->AA_comp(\*(AqE\*(Aq),"\en",
\&        "Composition of G : ", $pp\->AA_comp(\*(AqG\*(Aq),"\en",
\&        "Composition of H : ", $pp\->AA_comp(\*(AqH\*(Aq),"\en",
\&        "Composition of I : ", $pp\->AA_comp(\*(AqI\*(Aq),"\en",
\&        "Composition of L : ", $pp\->AA_comp(\*(AqL\*(Aq),"\en",
\&        "Composition of K : ", $pp\->AA_comp(\*(AqK\*(Aq),"\en",
\&        "Composition of M : ", $pp\->AA_comp(\*(AqM\*(Aq),"\en",
\&        "Composition of F : ", $pp\->AA_comp(\*(AqF\*(Aq),"\en",
\&        "Composition of P : ", $pp\->AA_comp(\*(AqP\*(Aq),"\en",
\&        "Composition of S : ", $pp\->AA_comp(\*(AqS\*(Aq),"\en",
\&        "Composition of T : ", $pp\->AA_comp(\*(AqT\*(Aq),"\en",
\&        "Composition of W : ", $pp\->AA_comp(\*(AqW\*(Aq),"\en",
\&        "Composition of Y : ", $pp\->AA_comp(\*(AqY\*(Aq),"\en",
\&        "Composition of V : ", $pp\->AA_comp(\*(AqV\*(Aq),"\en",
\&        "Composition of B : ", $pp\->AA_comp(\*(AqB\*(Aq),"\en",
\&        "Composition of Z : ", $pp\->AA_comp(\*(AqZ\*(Aq),"\en",
\&        "Composition of X : ", $pp\->AA_comp(\*(AqX\*(Aq),"\en";
\&}
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module takes an amino acid sequence and submits it to the
Protparam program at www.expasy.org/cgi\-bin/protparam.  Many
properties of the submitted sequence are returned.
.SH "AUTHOR"
.IX Header "AUTHOR"
Richard Dobson, r.j.dobson at qmul dot ac dot uk
.SS "new"
.IX Subsection "new"
.Vb 5
\&  Title    : new
\&  Usage    : $pp = Protparam\->new(seq=>$seq\->seq);
\&  Function : Creates a new Protparam object
\&  Returns  : A Protparam object
\&  Args     : A sequence
.Ve
.SS "num_neg"
.IX Subsection "num_neg"
.Vb 5
\&  Title    : num_neg
\&  Usage    : $pp\->num_neg()
\&  Function : Retrieves the number of negative amino acids in a sequence
\&  Returns  : Returns the number of negative amino acids in a sequence
\&  Args     : none
.Ve
.SS "num_pos"
.IX Subsection "num_pos"
.Vb 5
\&  Title    : num_pos
\&  Usage    : $pp\->num_pos()
\&  Function : Retrieves the number of positive amino acids in a sequence
\&  Returns  : Returns the number of positive amino acids in a sequence
\&  Args     : none
.Ve
.SS "amino_acid_number"
.IX Subsection "amino_acid_number"
.Vb 5
\&  Title    : amino_acid_number
\&  Usage    : $pp\->amino_acid_number()
\&  Function : Retrieves the number of amino acids within a sequence
\&  Returns  : Returns the number of amino acids within a sequence
\&  Args     : none
.Ve
.SS "total_atoms"
.IX Subsection "total_atoms"
.Vb 5
\&  Title    : total_atoms
\&  Usage    : $pp\->total_atoms()
\&  Function : Retrieves the total number of atoms within a sequence
\&  Returns  : Returns the total number of atoms within a sequence
\&  Args     : none
.Ve
.SS "molecular_weight"
.IX Subsection "molecular_weight"
.Vb 5
\&  Title    : molecular_weight
\&  Usage    : $pp\->molecular_weight()
\&  Function : Retrieves the molecular weight of a sequence
\&  Returns  : Returns the molecular weight of a sequence
\&  Args     : none
.Ve
.SS "theoretical_pI"
.IX Subsection "theoretical_pI"
.Vb 5
\&  Title    : theoretical_pI
\&  Usage    : $pp\->theoretical_pI()
\&  Function : Retrieve the theoretical pI for a sequence
\&  Returns  : Return the theoretical pI for a sequence
\&  Args     : none
.Ve
.SS "num_carbon"
.IX Subsection "num_carbon"
.Vb 5
\&  Title    : num_carbon
\&  Usage    : $pp\->num_carbon()
\&  Function : Retrieves the number of carbon atoms in a sequence
\&  Returns  : Returns the number of carbon atoms in a sequence
\&  Args     : none
.Ve
.SS "num_hydrogen"
.IX Subsection "num_hydrogen"
.Vb 5
\&  Title    : num_hydrogen
\&  Usage    : $pp\->num_hydrogen
\&  Function : Retrieves the number of hydrogen atoms in a sequence
\&  Returns  : Returns the number of hydrogen atoms in a sequence
\&  Args     : none
.Ve
.SS "num_nitro"
.IX Subsection "num_nitro"
.Vb 5
\&  Title    : num_nitro
\&  Usage    : $pp\->num_nitro
\&  Function : Retrieves the number of nitrogen atoms in a sequence
\&  Returns  : Returns the number of nitrogen atoms in a sequence
\&  Args     : none
.Ve
.SS "num_oxygen"
.IX Subsection "num_oxygen"
.Vb 5
\&  Title    : num_oxygen
\&  Usage    : $pp\->num_oxygen()
\&  Function : Retrieves the number of oxygen atoms in a sequence
\&  Returns  : Returns the number of oxygen atoms in a sequence
\&  Args     : none
.Ve
.SS "num_sulphur"
.IX Subsection "num_sulphur"
.Vb 5
\&  Title    : num_sulphur
\&  Usage    : $pp\->num_sulphur()
\&  Function : Retrieves the number of sulphur atoms in a sequence
\&  Returns  : Returns the number of sulphur atoms in a sequence
\&  Args     : none
.Ve
.SS "half_life"
.IX Subsection "half_life"
.Vb 5
\&  Title    : half_life
\&  Usage    : $pp\->half_life()
\&  Function : Retrieves the half life of a sequence
\&  Returns  : Returns the half life of a sequence
\&  Args     : none
.Ve
.SS "instability_index"
.IX Subsection "instability_index"
.Vb 5
\&  Title    : instability_index
\&  Usage    : $pp\->instability_index()
\&  Function : Retrieves the instability index of a sequence
\&  Returns  : Returns the instability index of a sequence
\&  Args     : none
.Ve
.SS "stability"
.IX Subsection "stability"
.Vb 5
\&  Title    : stability
\&  Usage    : $pp\->stability()
\&  Function : Calculates whether the sequence is stable or unstable
\&  Returns  : \*(Aqstable\*(Aq or \*(Aqunstable\*(Aq
\&  Args     : none
.Ve
.SS "aliphatic_index"
.IX Subsection "aliphatic_index"
.Vb 5
\&  Title    : aliphatic_index
\&  Usage    : $pp\->aliphatic_index()
\&  Function : Retrieves the aliphatic index of the sequence
\&  Returns  : Returns the aliphatic index of the sequence
\&  Args     : none
.Ve
.SS "gravy"
.IX Subsection "gravy"
.Vb 5
\&  Title    : gravy
\&  Usage    : $pp\->gravy()
\&  Function : Retrieves the grand average of hydropathicity (GRAVY) of a sequence
\&  Returns  : Returns the grand average of hydropathicity (GRAVY) of a sequence
\&  Args     : none
.Ve
.SS "AA_comp"
.IX Subsection "AA_comp"
.Vb 5
\&  Title    : AA_comp
\&  Usage    : $pp\->AA_comp(\*(AqP\*(Aq)
\&  Function : Retrieves the percentage composition of a given amino acid for a sequence
\&  Returns  : Returns the percentage composition of a given amino acid for a sequence
\&  Args     : A single letter amino acid code eg A, R, G, P etc
.Ve
