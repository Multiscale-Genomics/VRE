.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Phenotype::OMIM::OMIMparser 3"
.TH Bio::Phenotype::OMIM::OMIMparser 3 "2018-10-02" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Phenotype::OMIM::OMIMparser \- parser for the OMIM database
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::Phenotype::OMIM::OMIMparser;
\&
\&  # The OMIM database is available as textfile at:
\&  # ftp://ncbi.nlm.nih.gov/repository/OMIM/omim.txt.Z
\&  # The genemap is available as textfile at:
\&  # ftp://ncbi.nlm.nih.gov/repository/OMIM/genemap
\&
\&  $omim_parser = Bio::Phenotype::OMIM::OMIMparser\->new( \-genemap  => "/path/to/genemap",
\&                                                        \-omimtext => "/path/to/omim.txt" );
\&
\&  while ( my $omim_entry = $omim_parser\->next_phenotype() ) {
\&    # This prints everything.
\&    print( $omim_entry\->to_string() );
\&    print "\en\en";
\&
\&    # This gets individual data (some of them object\-arrays)
\&    # (and illustrates the relevant methods of OMIMentry).
\&    my $numb  = $omim_entry\->MIM_number();                     # *FIELD* NO
\&    my $title = $omim_entry\->title();                          # *FIELD* TI \- first line
\&    my $alt   = $omim_entry\->alternative_titles_and_symbols(); # *FIELD* TI \- additional lines
\&    my $mtt   = $omim_entry\->more_than_two_genes();            # "#" before title
\&    my $sep   = $omim_entry\->is_separate();                    # "*" before title
\&    my $desc  = $omim_entry\->description();                    # *FIELD* TX
\&    my $mm    = $omim_entry\->mapping_method();                 # from genemap
\&    my $gs    = $omim_entry\->gene_status();                    # from genemap
\&    my $cr    = $omim_entry\->created();                        # *FIELD* CD
\&    my $cont  = $omim_entry\->contributors();                   # *FIELD* CN
\&    my $ed    = $omim_entry\->edited();                         # *FIELD* ED
\&    my $sa    = $omim_entry\->additional_references();          # *FIELD* SA
\&    my $cs    = $omim_entry\->clinical_symptoms_raw();              # *FIELD* CS
\&    my $comm  = $omim_entry\->comment();                        # from genemap
\&
\&    my $mini_mim   = $omim_entry\->miniMIM();                   # *FIELD* MN
\&      # A Bio::Phenotype::OMIM::MiniMIMentry object.
\&      # class Bio::Phenotype::OMIM::MiniMIMentry
\&      # provides the following:
\&      # \- description()
\&      # \- created()
\&      # \- contributors()
\&      # \- edited() 
\&      #
\&    # Prints the contents of the MINI MIM entry (most OMIM entries do
\&    # not have MINI MIM entries, though).
\&    print $mini_mim\->description()."\en";
\&    print $mini_mim\->created()."\en";
\&    print $mini_mim\->contributors()."\en";
\&    print $mini_mim\->edited()."\en";
\&
\&    my @corrs      = $omim_entry\->each_Correlate();            # from genemap
\&      # Array of Bio::Phenotype::Correlate objects.
\&      # class Bio::Phenotype::Correlate
\&      # provides the following:
\&      # \- name()
\&      # \- description() (not used)
\&      # \- species() (always mouse)
\&      # \- type() ("OMIM mouse correlate")
\&      # \- comment() 
\&
\&    my @refs       = $omim_entry\->each_Reference();            # *FIELD* RF
\&      # Array of Bio::Annotation::Reference objects.
\&
\&
\&    my @avs        = $omim_entry\->each_AllelicVariant();       # *FIELD* AV
\&      # Array of Bio::Phenotype::OMIM::OMIMentryAllelicVariant objects.
\&      # class Bio::Phenotype::OMIM::OMIMentryAllelicVariant
\&      # provides the following:
\&      # \- number (e.g ".0001" )
\&      # \- title (e.g "ALCOHOL INTOLERANCE" )
\&      # \- symbol (e.g "ALDH2*2" )
\&      # \- description (e.g "The ALDH2*2\-encoded protein has a change ..." )
\&      # \- aa_ori  (used if information in the form "LYS123ARG" is found)
\&      # \- aa_mut (used if information in the form "LYS123ARG" is found)
\&      # \- position (used if information in the form "LYS123ARG" is found)
\&      # \- additional_mutations (used for e.g. "1\-BP DEL, 911T")
\&
\&    my @cps        = $omim_entry\->each_CytoPosition();         # from genemap
\&      # Array of Bio::Map::CytoPosition objects.
\&
\&    my @gss        = $omim_entry\->each_gene_symbol();          # from genemap
\&      # Array of strings.
\&
\&    # do something ...
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This parser returns Bio::Phenotype::OMIM::OMIMentry objects
(which inherit from Bio::Phenotype::PhenotypeI).
It parses the \s-1OMIM\s0 database available as 
ftp://ncbi.nlm.nih.gov/repository/OMIM/omim.txt.Z 
together with (optionally) the gene map file at
ftp://ncbi.nlm.nih.gov/repository/OMIM/genemap.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the 
Bioperl mailing lists  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Christian M. Zmasek
.PP
Email: czmasek\-at\-burnham.org  or  cmzmasek@yahoo.com
.PP
\&\s-1WWW:  \s0 http://monochrome\-effect.net/
.PP
Address:
.PP
.Vb 3
\&  Genomics Institute of the Novartis Research Foundation
\&  10675 John Jay Hopkins Drive
\&  San Diego, CA 92121
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 7
\& Title   : new
\& Usage   : $omim_parser = Bio::Phenotype::OMIM::OMIMparser\->new( \-genemap  => "/path/to/genemap",
\&                                                                 \-omimtext => "/path/to/omim.txt" );                      
\& Function: Creates a new OMIMparser.
\& Returns : A new OMIMparser object.
\& Args    : \-genemap  => the genemap file name (optional)
\&           \-omimtext => the omim text file name
.Ve
.SS "next_phenotype"
.IX Subsection "next_phenotype"
.Vb 8
\& Title   : next_phenotype()
\& Usage   : while ( my $omim_entry = $omim_parser\->next_phenotype() ) {
\&               # do something with $omim_entry
\&           }    
\& Function: Returns an Bio::Phenotype::OMIM::OMIMentry or
\&           undef once the end of the omim text file is reached.
\& Returns : A Bio::Phenotype::OMIM::OMIMentry.
\& Args    :
.Ve
.SS "init"
.IX Subsection "init"
.Vb 5
\& Title   : init()
\& Usage   : $omim_parser\->init();   
\& Function: Initializes this OMIMparser to all "".
\& Returns : 
\& Args    :
.Ve
.SS "genemap_file_name"
.IX Subsection "genemap_file_name"
.Vb 5
\& Title   : genemap_file_name
\& Usage   : $omimparser\->genemap_file_name( "genemap" );
\& Function: Set/get for the genemap file name.
\& Returns : The genemap file name [string].
\& Args    : The genemap file name [string] (optional).
.Ve
.SS "omimtxt_file_name"
.IX Subsection "omimtxt_file_name"
.Vb 5
\& Title   : omimtxt_file_name
\& Usage   : $omimparser\->omimtxt_file_name( "omim.txt" );
\& Function: Set/get for the omim text file name.
\& Returns : The the omim text file name [string].
\& Args    : The the omim text file name [string] (optional).
.Ve
