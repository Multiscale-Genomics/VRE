.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Ontology::TermI 3"
.TH Bio::Ontology::TermI 3 "2018-10-02" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Ontology::TermI \- interface for ontology terms
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  #get Bio::Ontology::TermI somehow.
\&
\&  print $term\->identifier(), "\en";
\&  print $term\->name(), "\en";
\&  print $term\->definition(), "\en";
\&  print $term\->is_obsolete(), "\en";
\&  print $term\->comment(), "\en";
\&
\&  foreach my $synonym ( $term\->get_synonyms() ) {
\&      print $synonym, "\en";
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is \*(L"dumb\*(R" interface for ontology terms providing basic methods
(it provides no functionality related to graphs).
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Christian M. Zmasek
.PP
Email: czmasek\-at\-burnham.org  or  cmzmasek@yahoo.com
.PP
\&\s-1WWW:  \s0 http://monochrome\-effect.net/
.PP
Address:
.PP
.Vb 3
\&  Genomics Institute of the Novartis Research Foundation
\&  10675 John Jay Hopkins Drive
\&  San Diego, CA 92121
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods.
.SS "identifier"
.IX Subsection "identifier"
.Vb 7
\& Title   : identifier
\& Usage   : $term\->identifier( "0003947" );
\&           or
\&           print $term\->identifier();
\& Function: Set/get for the identifier of this Term.
\& Returns : The identifier [scalar].
\& Args    : The identifier [scalar] (optional).
.Ve
.SS "name"
.IX Subsection "name"
.Vb 7
\& Title   : name
\& Usage   : $term\->name( "N\-acetylgalactosaminyltransferase" );
\&           or
\&           print $term\->name();
\& Function: Set/get for the name of this Term.
\& Returns : The name [scalar].
\& Args    : The name [scalar] (optional).
.Ve
.SS "definition"
.IX Subsection "definition"
.Vb 7
\& Title   : definition
\& Usage   : $term\->definition( "Catalysis of ..." );
\&           or
\&           print $term\->definition();
\& Function: Set/get for the definition of this Term.
\& Returns : The definition [scalar].
\& Args    : The definition [scalar] (optional).
.Ve
.SS "ontology"
.IX Subsection "ontology"
.Vb 5
\& Title   : ontology
\& Usage   : $ont = $term\->ontology();
\&           or 
\&           $term\->ontology( $ont );
\& Function: Get the ontology this term is in.
\&
\&           An implementation may not permit the value of this
\&           attribute to be changed once it is set, since that may have
\&           serious consequences (note that with the ontology in hand
\&           you can query for all related terms etc).
\&
\&           Note for implementors: you will almost certainly have to
\&           take special precaution in order not to create cyclical
\&           references in memory.
\&
\& Returns : The ontology of this Term as a Bio::Ontology::OntologyI
\&           implementing object.
\& Args    : On set, the  ontology of this Term as a Bio::Ontology::OntologyI
\&           implementing object or a string representing its name.
.Ve
.PP
See Bio::Ontology::OntologyI.
.SS "version"
.IX Subsection "version"
.Vb 7
\& Title   : version
\& Usage   : $term\->version( "1.00" );
\&           or 
\&           print $term\->version();
\& Function: Set/get for version information.
\& Returns : The version [scalar].
\& Args    : The version [scalar] (optional).
.Ve
.SS "is_obsolete"
.IX Subsection "is_obsolete"
.Vb 7
\& Title   : is_obsolete
\& Usage   : $term\->is_obsolete( 1 );
\&           or
\&           if ( $term\->is_obsolete() )
\& Function: Set/get for the obsoleteness of this Term.
\& Returns : the obsoleteness [0 or 1].
\& Args    : the obsoleteness [0 or 1] (optional).
.Ve
.SS "comment"
.IX Subsection "comment"
.Vb 7
\& Title   : comment
\& Usage   : $term\->comment( "Consider the term ..." );
\&           or 
\&           print $term\->comment();
\& Function: Set/get for an arbitrary comment about this Term.
\& Returns : A comment.
\& Args    : A comment (optional).
.Ve
.SS "get_synonyms"
.IX Subsection "get_synonyms"
.Vb 3
\& Title   : get_synonyms
\& Usage   : @aliases = $term\->get_synonyms();
\& Function: Returns a list of aliases of this Term.
\&
\&           If an implementor of this interface permits modification of
\&           this array property, the class should define at least
\&           methods add_synonym() and remove_synonyms(), with obvious
\&           functionality.
\&
\& Returns : A list of aliases [array of [scalar]].
\& Args    :
.Ve
.SS "get_dblinks"
.IX Subsection "get_dblinks"
.Vb 3
\& Title   : get_dblinks()
\& Usage   : @ds = $term\->get_dblinks();
\& Function: Returns a list of each dblink of this term.
\&
\&           If an implementor of this interface permits modification of
\&           this array property, the class should define at least
\&           methods add_dblink() and remove_dblinks(), with obvious
\&           functionality.
\&
\& Returns : A list of dblinks [array of [scalars]].
\& Args    : 
\& Note    : This has been deprecated in favor of get_dbxrefs()
.Ve
.SS "get_dbxrefs"
.IX Subsection "get_dbxrefs"
.Vb 3
\& Title   : get_dbxrefs()
\& Usage   : @ds = $term\->get_dbxrefs();
\& Function: Returns a list of each link for this term.
\&
\&           If an implementor of this interface permits modification of
\&           this array property, the class should define at least
\&           methods add_dbxref() and remove_dbxrefs(), with obvious
\&           functionality.
\&
\& Returns : A list of dblinks.  This can return a mixed \*(Aqbag\*(Aq of scalars and
\&           L<Bio::Annotation::DBLink> instances, or specific subgroups
\&           can be returned based on passed arguments
\& Args    : implementation\-specific
.Ve
.SS "get_secondary_ids"
.IX Subsection "get_secondary_ids"
.Vb 3
\& Title   : get_secondary_ids
\& Usage   : @ids = $term\->get_secondary_ids();
\& Function: Returns a list of secondary identifiers of this Term.
\&
\&           Secondary identifiers mostly originate from merging terms,
\&           or possibly also from splitting terms.
\&
\&           If an implementor of this interface permits modification of
\&           this array property, the class should define at least
\&           methods add_secondary_id() and remove_secondary_ids(), with
\&           obvious functionality.
\&
\& Returns : A list of secondary identifiers [array of [scalar]]
\& Args    :
.Ve
.SH "Deprecated methods"
.IX Header "Deprecated methods"
Used for looking up the methods that supersedes them.
.SS "category"
.IX Subsection "category"
.Vb 9
\& Title   : category
\& Usage   :
\& Function: This method is deprecated. Use ontology() instead. We provide
\&           an implementation here that preserves backwards compatibility,
\&           but if you do not have legacy code using it you should not be
\&           calling this method.
\& Example :
\& Returns :
\& Args    :
.Ve
