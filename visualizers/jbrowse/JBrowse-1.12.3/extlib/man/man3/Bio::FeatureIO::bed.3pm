.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::FeatureIO::bed 3pm"
.TH Bio::FeatureIO::bed 3pm "2014-09-05" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::FeatureIO::bed \- read/write features from UCSC BED format
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  my $in = Bio::FeatureIO(\-format => \*(Aqbed\*(Aq, \-file => \*(Aqfile.bed\*(Aq);
\&  for my $feat ($in\->next_feature) {
\&    # do something with $feat (a Bio::SeqFeature::Annotated object)
\&  }
\&
\&  my $out = Bio::FeatureIO(\-format=>\*(Aqbed\*(Aq);
\&  for my $feat ($seq\->get_seqFeatures) {
\&    $out\->write_feature($feat);
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
See <http://www.genome.ucsc.edu/goldenPath/help/customTrack.html#BED>.
.PP
Currently for read and write only the first 6 fields (chr, start, end, name,
score, strand) are supported.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  http://bugzilla.open\-bio.org/
.Ve
.SH "AUTHOR \- Allen Day"
.IX Header "AUTHOR - Allen Day"
Email allenday@ucla.edu
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Sendu Bala, bix@sendu.me.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "_initialize"
.IX Subsection "_initialize"
.Vb 10
\& Title   : _initialize
\& Function: initializes BED for reading/writing
\& Args    : all optional:
\&           name          description
\&           \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\&           \-name         the name for the BED track, stored in header
\&                         name defaults to localtime()
\&           \-description  the description for the BED track, stored in
\&                         header.  defaults to localtime().
\&           \-use_score    whether or not the score attribute of
\&                         features should be used when rendering them.
\&                         the higher the score the darker the color.
\&                         defaults to 0 (false)
.Ve
.SS "use_score"
.IX Subsection "use_score"
.Vb 6
\& Title   : use_score
\& Usage   : $obj\->use_score($newval)
\& Function: should score be used to adjust feature color when rendering?  set to true if so.
\& Example : 
\& Returns : value of use_score (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "name"
.IX Subsection "name"
.Vb 6
\& Title   : name
\& Usage   : $obj\->name($newval)
\& Function: name of BED track
\& Example : 
\& Returns : value of name (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "description"
.IX Subsection "description"
.Vb 6
\& Title   : description
\& Usage   : $obj\->description($newval)
\& Function: description of BED track
\& Example : 
\& Returns : value of description (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
