.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Map::SimpleMap 3"
.TH Bio::Map::SimpleMap 3 "2018-10-02" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Map::SimpleMap \- A MapI implementation handling the basics of a Map
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Bio::Map::SimpleMap;
\&
\&    my $map = Bio::Map::SimpleMap\->new(\-name => \*(Aqgenethon\*(Aq,
\&                                      \-type => \*(AqGenetic\*(Aq,
\&                                      \-units=> \*(AqcM\*(Aq,
\&                                      \-species => $human);
\&
\&    foreach my $marker ( @markers ) { # get a list of markers somewhere
\&                $map\->add_element($marker);
\&    }
\&
\&    foreach my $marker ($map\->get_elements) {
\&        # do something with this Bio::Map::MappableI
\&    }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the basic implementation of a Bio::Map::MapI. It handles the
essential storage of name, species, type, and units.
.PP
It knows which map elements (mappables) belong to it, and their
position.
.PP
Subclasses might need to redefine or hardcode \fItype()\fR, \fIlength()\fR and
\&\fIunits()\fR.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason@bioperl.org
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Heikki Lehvaslaiho heikki-at-bioperl-dot-org
Lincoln Stein      lstein@cshl.org
Sendu Bala         bix@sendu.me.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 8
\& Title   : new
\& Usage   : my $obj = Bio::Map::SimpleMap\->new();
\& Function: Builds a new Bio::Map::SimpleMap object
\& Returns : Bio::Map::SimpleMap
\& Args    : \-name    => name of map (string)
\&           \-species => species for this map (Bio::Species) [optional]
\&           \-units   => map units (string)
\&           \-uid     => Unique Id [defaults to a unique integer]
.Ve
.SS "species"
.IX Subsection "species"
.Vb 5
\& Title   : species
\& Usage   : my $species = $map\->species;
\& Function: Get/Set Species for a map
\& Returns : Bio::Taxon object or string
\& Args    : (optional) Bio::Taxon or string
.Ve
.SS "units"
.IX Subsection "units"
.Vb 5
\& Title   : units
\& Usage   : $map\->units(\*(AqcM\*(Aq);
\& Function: Get/Set units for a map
\& Returns : units for a map
\& Args    : units for a map (string)
.Ve
.SS "type"
.IX Subsection "type"
.Vb 5
\& Title   : type
\& Usage   : my $type = $map\->type
\& Function: Get/Set Map type
\& Returns : String coding map type
\& Args    : (optional) string
.Ve
.SS "name"
.IX Subsection "name"
.Vb 5
\& Title   : name
\& Usage   : my $name = $map\->name
\& Function: Get/Set Map name
\& Returns : Map name
\& Args    : (optional) string
.Ve
.SS "length"
.IX Subsection "length"
.Vb 8
\& Title   : length
\& Usage   : my $length = $map\->length();
\& Function: Retrieves the length of the map.
\&           It is possible for the length to be unknown for maps such as
\&           Restriction Enzyme, will return 0 in that case.
\& Returns : integer representing length of map in current units
\&           will return 0 if length is not calculateable
\& Args    : none
.Ve
.SS "unique_id"
.IX Subsection "unique_id"
.Vb 5
\& Title   : unique_id
\& Usage   : my $id = $map\->unique_id;
\& Function: Get/Set the unique ID for this map
\& Returns : a unique identifier
\& Args    : [optional] new identifier to set
.Ve
.SS "add_element"
.IX Subsection "add_element"
.Vb 4
\& Title   : add_element
\& Usage   : $map\->add_element($element)
\& Function: Tell a Bio::Map::MappableI object its default Map is this one; same
\&           as calling $element\->default_map($map).
\&
\&                   *** does not actually add the element to this map! ***
\&
\& Returns : none
\& Args    : Bio::Map::MappableI object
\& Status  : Deprecated, will be removed in next version
.Ve
.SS "get_elements"
.IX Subsection "get_elements"
.Vb 6
\& Title   : get_elements
\& Usage   : my @elements = $map\->get_elements;
\& Function: Retrieves all the elements on a map (unordered unless all elements
\&           have just 1 position on the map, in which case sorted)
\& Returns : Array of Map elements (L<Bio::Map::MappableI>)
\& Args    : none
.Ve
.SS "each_element"
.IX Subsection "each_element"
.Vb 3
\& Title   : each_element
\& Function: Synonym of the get_elements() method.
\& Status  : deprecated, will be removed in the next version
.Ve
.SS "purge_element"
.IX Subsection "purge_element"
.Vb 5
\& Title   : purge_element
\& Usage   : $map\->purge_element($element)
\& Function: Purge an element from the map.
\& Returns : none
\& Args    : Bio::Map::MappableI object
.Ve
.SS "annotation"
.IX Subsection "annotation"
.Vb 8
\& Title   : annotation
\& Usage   : $map\->annotation($an_col);
\&           my $an_col = $map\->annotation();
\& Function: Get the annotation collection (see Bio::AnnotationCollectionI)
\&           for this annotatable object.
\& Returns : a Bio::AnnotationCollectionI implementing object, or undef
\& Args    : none to get, OR
\&           a Bio::AnnotationCollectionI implementing object to set
.Ve
