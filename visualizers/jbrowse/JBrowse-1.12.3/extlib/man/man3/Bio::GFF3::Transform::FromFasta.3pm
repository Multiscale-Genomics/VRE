.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::GFF3::Transform::FromFasta 3pm"
.TH Bio::GFF3::Transform::FromFasta 3pm "2014-02-28" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::GFF3::Transform::FromFasta \- make gff3 for the sequences in a fasta file
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::GFF3::Transform::FromFasta \*(Aqgff3_from_fasta\*(Aq;
\&
\&  gff3_from_fasta(
\&    in            => [ \*(Aqfile1\*(Aq, $filehandle, ... ],
\&    out           => \e*STDOUT,
\&    type          => \*(Aqcontig\*(Aq,
\&    fasta_section => 1,
\&    source        => \*(AqMyAnalysis\*(Aq,
\&  );
.Ve
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .SS "gff3_from_fasta( in => \e@files_or_fhs, out => $fh, type => 'SO_type' )"
.el .SS "gff3_from_fasta( in => \e@files_or_fhs, out => \f(CW$fh\fP, type => 'SO_type' )"
.IX Subsection "gff3_from_fasta( in => @files_or_fhs, out => $fh, type => 'SO_type' )"
\fIArguments\fR
.IX Subsection "Arguments"
.IP "in" 4
.IX Item "in"
.Vb 1
\&  in   => \e@files_or_fhs
.Ve
.Sp
Arrayref of filenames or filehandles containing \s-1FASTA.\s0
.IP "out" 4
.IX Item "out"
.Vb 1
\&  out  => $file,
.Ve
.Sp
Filename or filehandle to write \s-1GFF3\s0 to.
.IP "type" 4
.IX Item "type"
.Vb 1
\&  type => \*(AqSO_type\*(Aq,
.Ve
.Sp
String Sequence Ontology term name for the features being made.
.IP "source" 4
.IX Item "source"
.Vb 1
\&  source => \*(Aqfasta\*(Aq,
.Ve
.Sp
Source name to put in the gff3.  Default 'fasta'.
.IP "fasta_section" 4
.IX Item "fasta_section"
.Vb 1
\&  fasta_section => 0,
.Ve
.Sp
Default off. if true, write the actual sequencesh '##FASTA' section.
.SH "AUTHOR"
.IX Header "AUTHOR"
Robert Buels <rmb32@cornell.edu>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2012 by Robert Buels.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
