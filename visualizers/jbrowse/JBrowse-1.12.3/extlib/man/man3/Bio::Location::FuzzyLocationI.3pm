.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Location::FuzzyLocationI 3"
.TH Bio::Location::FuzzyLocationI 3 "2018-10-02" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Location::FuzzyLocationI \- Abstract interface of a Location on a Sequence
which has unclear start/end location
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    # Get a FuzzyLocationI object somehow
\&    print "Fuzzy FT location string is ", $location\->to_FTstring();
\&    print "location is of the type ", $location\->loc_type, "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This interface encapsulates the necessary methods for representing a
Fuzzy Location, one that does not have clear start and/or end points.
This will initially serve to handle features from Genbank/EMBL feature
tables that are written as 1^100 meaning between bases 1 and 100 or
<100..300 meaning it starts somewhere before 100.  Advanced
implementations of this interface may be able to handle the necessary
logic of overlaps/intersection/contains/union.  It was constructed to
handle fuzzy locations that can be represented in Genbank/EMBL.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason-at-bioperl-dot-org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SH "LocationI methods"
.IX Header "LocationI methods"
.SS "location_type"
.IX Subsection "location_type"
.Vb 5
\&  Title   : loc_type
\&  Usage   : my $location_type = $location\->location_type();
\&  Function: Get location type encoded as text
\&  Returns : string (\*(AqEXACT\*(Aq, \*(AqWITHIN\*(Aq, \*(AqIN\-BETWEEN\*(Aq)
\&  Args    : none
.Ve
.SH "Bio::LocationI methods"
.IX Header "Bio::LocationI methods"
Bio::LocationI methods follow
.SS "min_start"
.IX Subsection "min_start"
.Vb 5
\&  Title   : min_start
\&  Usage   : my $minstart = $location\->min_start();
\&  Function: Get minimum starting location of feature startpoint   
\&  Returns : integer or undef if no maximum starting point.
\&  Args    : none
.Ve
.SS "max_start"
.IX Subsection "max_start"
.Vb 5
\&  Title   : max_start
\&  Usage   : my $maxstart = $location\->max_start();
\&  Function: Get maximum starting location of feature startpoint  
\&  Returns : integer or undef if no maximum starting point.
\&  Args    : none
.Ve
.SS "start_pos_type"
.IX Subsection "start_pos_type"
.Vb 6
\&  Title   : start_pos_type
\&  Usage   : my $start_pos_type = $location\->start_pos_type();
\&  Function: Get start position type (ie <,>, ^) 
\&  Returns : type of position coded as text 
\&            (\*(AqBEFORE\*(Aq, \*(AqAFTER\*(Aq, \*(AqEXACT\*(Aq,\*(AqWITHIN\*(Aq, \*(AqBETWEEN\*(Aq)
\&  Args    : none
.Ve
.SS "min_end"
.IX Subsection "min_end"
.Vb 5
\&  Title   : min_end
\&  Usage   : my $minend = $location\->min_end();
\&  Function: Get minimum ending location of feature endpoint 
\&  Returns : integer or undef if no minimum ending point.
\&  Args    : none
.Ve
.SS "max_end"
.IX Subsection "max_end"
.Vb 5
\&  Title   : max_end
\&  Usage   : my $maxend = $location\->max_end();
\&  Function: Get maximum ending location of feature endpoint 
\&  Returns : integer or undef if no maximum ending point.
\&  Args    : none
.Ve
.SS "end_pos_type"
.IX Subsection "end_pos_type"
.Vb 6
\&  Title   : end_pos_type
\&  Usage   : my $end_pos_type = $location\->end_pos_type();
\&  Function: Get end position type (ie <,>, ^) 
\&  Returns : type of position coded as text 
\&            (\*(AqBEFORE\*(Aq, \*(AqAFTER\*(Aq, \*(AqEXACT\*(Aq,\*(AqWITHIN\*(Aq, \*(AqBETWEEN\*(Aq)
\&  Args    : none
.Ve
.SS "seq_id"
.IX Subsection "seq_id"
.Vb 5
\&  Title   : seq_id
\&  Usage   : my $seqid = $location\->seq_id();
\&  Function: Get/Set seq_id that location refers to
\&  Returns : seq_id
\&  Args    : [optional] seq_id value to set
.Ve
.SS "coordinate_policy"
.IX Subsection "coordinate_policy"
.Vb 4
\&  Title   : coordinate_policy
\&  Usage   : $policy = $location\->coordinate_policy();
\&            $location\->coordinate_policy($mypolicy); # set may not be possible
\&  Function: Get the coordinate computing policy employed by this object.
\&
\&            See Bio::Location::CoordinatePolicyI for documentation about
\&            the policy object and its use.
\&
\&            The interface *does not* require implementing classes to accept
\&            setting of a different policy. The implementation provided here
\&            does, however, allow one to do so.
\&
\&            Implementors of this interface are expected to initialize every
\&            new instance with a CoordinatePolicyI object. The implementation
\&            provided here will return a default policy object if none has
\&            been set yet. To change this default policy object call this
\&            method as a class method with an appropriate argument. Note that
\&            in this case only subsequently created Location objects will be
\&            affected.
\&
\&  Returns : A Bio::Location::CoordinatePolicyI implementing object.
\&  Args    : On set, a Bio::Location::CoordinatePolicyI implementing object.
.Ve
.SS "to_FTstring"
.IX Subsection "to_FTstring"
.Vb 5
\&  Title   : to_FTstring
\&  Usage   : my $locstr = $location\->to_FTstring()
\&  Function: returns the FeatureTable string of this location
\&  Returns : string
\&  Args    : none
.Ve
