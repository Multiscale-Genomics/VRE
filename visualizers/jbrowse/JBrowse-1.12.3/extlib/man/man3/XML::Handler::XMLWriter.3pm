.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "XML::Handler::XMLWriter 3pm"
.TH XML::Handler::XMLWriter 3pm "2003-10-21" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::Handler::XMLWriter \- a PerlSAX handler for writing readable XML
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use XML::Parser::PerlSAX;
\& use XML::Handler::XMLWriter;
\&
\& $my_handler = XML::Handler::XMLWriter\->new( I<OPTIONS> );
\&
\& XML::Parser::PerlSAX\->new\->parse(Source => { SystemId => \*(AqREC\-xml\-19980210.xml\*(Aq },
\&                                  Handler => $my_handler);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\f(CW\*(C`XML::Handler::XMLWriter\*(C'\fR is a PerlSAX handler for writing readable
\&\s-1XML \s0(in contrast to Canonical \s-1XML,\s0 for example).
XML::Handler::XMLWriter can be used with a parser to reformat \s-1XML,\s0
with \s-1XML::DOM\s0 or XML::Grove to write out \s-1XML,\s0 or with other PerlSAX
modules that generate events.
.PP
\&\f(CW\*(C`XML::Handler::XMLWriter\*(C'\fR is intended to be used with PerlSAX event
generators and does not perform any checking itself (for example,
matching start and end element events).  If you want to generate \s-1XML\s0
directly from your Perl code, use the XML::Writer module.  XML::Writer
has an easy to use interface and performs many checks to make sure
that the \s-1XML\s0 you generate is well-formed.
.PP
\&\f(CW\*(C`XML::Handler::XMLWriter\*(C'\fR is a subclass of \f(CW\*(C`XML::Handler::Subs\*(C'\fR.
\&\f(CW\*(C`XML::Handler::XMLWriter\*(C'\fR can be further subclassed to alter it's
behavior or to add element-specific handling.  In the subclass, each
time an element starts, a method by that name prefixed with `s_' is
called with the element to be processed.  Each time an element ends, a
method with that name prefixed with `e_' is called.  Any special
characters in the element name are replaced by underscores.  If there
isn't a start or end method for an element, the default action is to
write the start or end tag.  Start and end methods can use the
`\f(CW\*(C`print_start_element()\*(C'\fR' and `\f(CW\*(C`print_end_element()\*(C'\fR' methods to
print start or end tags.  Subclasses can call the `\f(CW\*(C`print()\*(C'\fR' method
to write additional output.
.PP
Subclassing XML::Handler::XMLWriter in this way is similar to
XML::Parser's Stream style.
.PP
XML::Handler::Subs maintains a stack of element names,
`\f(CW\*(C`$self\-\*(C'\fR{Names}', and a stack of element nodes, `\f(CW\*(C`$self\-\*(C'\fR{Nodes}>'
that can be used by subclasses.  The current element is pushed on the
stacks before calling an element-name start method and popped off the
stacks after calling the element-name end method.
.PP
See XML::Handler::Subs for additional methods.
.PP
In addition to the standard PerlSAX handler methods (see PerlSAX for
descriptions), XML::Handler::XMLWriter supports the following methods:
.IP "new( \fI\s-1OPTIONS\s0\fR )" 4
.IX Item "new( OPTIONS )"
Creates and returns a new instance of XML::Handler::XMLWriter with the
given \fI\s-1OPTIONS\s0\fR.  Options may be changed at any time by modifying
them directly in the hash returned.  \fI\s-1OPTIONS\s0\fR can be a list of key,
value pairs or a hash.  The following \fI\s-1OPTIONS\s0\fR are supported:
.RS 4
.IP "Output" 4
.IX Item "Output"
An IO::Handle or one of it's subclasses (such as IO::File), if this
parameter is not present and the AsString option is not used, the
module will write to standard output.
.IP "AsString" 4
.IX Item "AsString"
Return the generated \s-1XML\s0 as a string from the `\f(CW\*(C`parse()\*(C'\fR' method of
the PerlSAX event generator.
.IP "Newlines" 4
.IX Item "Newlines"
A true or false value; if this parameter is present and its value is
true, then the module will insert an extra newline before the closing
delimiter of start, end, and empty tags to guarantee that the document
does not end up as a single, long line.  If the paramter is not
present, the module will not insert the newlines.
.IP "IsSGML" 4
.IX Item "IsSGML"
A true or false value; if this parameter is present and its value is
true, then the module will generate \s-1SGML\s0 rather than \s-1XML.\s0
.RE
.RS 4
.RE
.IP "print_start_element($element)" 4
.IX Item "print_start_element($element)"
Print a start tag for `\f(CW$element\fR'.  This is the default action for
the PerlSAX `\f(CW\*(C`start_element()\*(C'\fR' handler, but subclasses may use this
if they define a start method for an element.
.IP "print_end_element($element)" 4
.IX Item "print_end_element($element)"
Prints an end tag for `\f(CW$element\fR'.  This is the default action for
the PerlSAX `\f(CW\*(C`end_element()\*(C'\fR' handler, but subclasses may use this
if they define a start method for an element.
.IP "print($output)" 4
.IX Item "print($output)"
Write `\f(CW$output\fR' to Output and/or append it to the string to be
returned.  Subclasses may use this to write additional output.
.SH "TODO"
.IX Header "TODO"
.IP "\(bu" 4
An Elements option that provides finer control over newlines than the
Newlines option, where you can choose before and after newline for
element start and end tags.  Inspired by the Python XMLWriter.
.IP "\(bu" 4
Support Doctype and \s-1XML\s0 declarations.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ken MacLeod, ken@bitsko.slc.ut.us
This module is partially derived from XML::Writer by David Megginson.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1), \fIPerlSAX.pod\fR\|(3)
