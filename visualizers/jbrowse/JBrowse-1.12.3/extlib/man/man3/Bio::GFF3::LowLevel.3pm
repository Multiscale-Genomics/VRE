.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::GFF3::LowLevel 3pm"
.TH Bio::GFF3::LowLevel 3pm "2014-02-28" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::GFF3::LowLevel \- fast, low\-level functions for parsing and formatting GFF3
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::GFF3::LowLevel qw/ gff3_parse_feature /;
\&
\&  open my $gff3_fh, \*(Aqmyfile.gff3\*(Aq or die;
\&  while( <$gff3_fh> ) {
\&    next if /^#/;
\&    my $feat = gff3_parse_feature( $_ );
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
These are low-level, fast functions for parsing \s-1GFF\s0 version 3 files.
All they do is convert back and forth between low-level Perl data
structures and \s-1GFF3\s0 text.
.PP
Sometimes this is what you need when you are just doing simple
transformations on \s-1GFF3.  I\s0 found myself writing these functions over
and over again, until I finally got fed up enough to just package them
up properly.
.PP
These functions do no validation, do not reconstruct feature
hierarchies, or anything like that.  If you want that, use
Bio::FeatureIO.
.PP
All of the functions in this module are \s-1EXPORT_OK,\s0 meaning that you
can add their name after using this module to make them available in
your namespace.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
.ie n .SS "gff3_parse_feature( $line )"
.el .SS "gff3_parse_feature( \f(CW$line\fP )"
.IX Subsection "gff3_parse_feature( $line )"
Given a string containing a \s-1GFF3\s0 feature line (i.e. not a comment),
parses it and returns a hashref of its information, of the form:
.PP
.Vb 10
\&    {
\&        seq_id => \*(Aqchr02\*(Aq,
\&        source => \*(AqAUGUSTUS\*(Aq,
\&        type   => \*(Aqtranscript\*(Aq,
\&        start  => \*(Aq23486\*(Aq,
\&        end    => \*(Aq48209\*(Aq,
\&        score  => \*(Aq0.02\*(Aq,
\&        strand => \*(Aq+\*(Aq,
\&        phase  => undef,
\&        attributes => {
\&            ID => [
\&                \*(Aqchr02.g3.t1\*(Aq
\&              ],
\&            Parent => [
\&                \*(Aqchr02.g3\*(Aq
\&              ],
\&          },
\&    }
.Ve
.PP
Note that all values are simple scalars, except for \f(CW\*(C`attributes\*(C'\fR,
which is a hashref as returned by \*(L"gff3_parse_attributes\*(R" below.
.PP
Unescaping is performed according to the \s-1GFF3\s0 specification.
.ie n .SS "gff3_parse_attributes( $attr_string )"
.el .SS "gff3_parse_attributes( \f(CW$attr_string\fP )"
.IX Subsection "gff3_parse_attributes( $attr_string )"
Given a \s-1GFF3\s0 attribute string, parse it and return a hashref of its
data, of the form:
.PP
.Vb 4
\&    {
\&      \*(Aqattribute_name\*(Aq => [ value, value, ... ],
\&      ...
\&    }
.Ve
.PP
Always returns a hashref.  If the passed attribute string is
undefined, or \*(L".\*(R", the hashref returned will be empty.  Attribute
values are always arrayrefs, even if they have only one value.
.ie n .SS "gff3_parse_directive( $line )"
.el .SS "gff3_parse_directive( \f(CW$line\fP )"
.IX Subsection "gff3_parse_directive( $line )"
Parse a \s-1GFF3\s0 directive/metadata line.  Returns a hashref as:
.PP
.Vb 3
\&  {  directive => \*(Aqdirective\-name\*(Aq,
\&     value     => \*(Aqthe contents of the directive\*(Aq
\&  }
.Ve
.PP
Or nothing if the line could not be parsed as a \s-1GFF3\s0 directive.
.PP
In addition, \f(CW\*(C`sequence\-region\*(C'\fR and \f(CW\*(C`genome\-build\*(C'\fR directives are
parsed further.  \f(CW\*(C`sequence\-region\*(C'\fR hashrefs have additional
\&\f(CW\*(C`seq_id\*(C'\fR, \f(CW\*(C`start\*(C'\fR, and \f(CW\*(C`end\*(C'\fR keys, and \f(CW\*(C`genome\-build\*(C'\fR hashrefs
have additional \f(CW\*(C`source\*(C'\fR and \f(CW\*(C`buildname\*(C'\fR keys
.SS "gff3_format_feature( \e%fields )"
.IX Subsection "gff3_format_feature( %fields )"
Given a hashref of feature information in the same format returned by
\&\*(L"gff3_parse_feature\*(R" above, constructs a correctly-escaped line of
\&\s-1GFF3\s0 encoding that information.
.PP
The line ends with a single newline character, a UNIX-style line
ending, regardless of the local operating system.
.SS "gff3_format_attributes( \e%attrs )"
.IX Subsection "gff3_format_attributes( %attrs )"
Given a hashref of \s-1GFF3\s0 attributes in the same format returned by
\&\*(L"gff3_parse_attributes\*(R" above, returns a correctly formatted and
escaped \s-1GFF3\s0 attribute string (the 9th column of a \s-1GFF3\s0 feature line)
encoding those attributes.
.PP
For convenience, single-valued attributes can have simple scalars as
values in the passed hashref.  For example, if a feature has only one
\&\f(CW\*(C`ID\*(C'\fR attribute (as it should), you can pass \f(CW\*(C`{ ID => \*(Aqfoo\*(Aq }\*(C'\fR
instead of \f(CW\*(C`{ ID => [\*(Aqfoo\*(Aq] }}\*(C'\fR.
.ie n .SS "gff3_escape( $string )"
.el .SS "gff3_escape( \f(CW$string\fP )"
.IX Subsection "gff3_escape( $string )"
Given a string, escapes special characters in that string according to
the \s-1GFF3\s0 specification.
.ie n .SS "gff3_unescape( $string )"
.el .SS "gff3_unescape( \f(CW$string\fP )"
.IX Subsection "gff3_unescape( $string )"
Unescapes a GFF3\-escaped string.
.SH "AUTHOR"
.IX Header "AUTHOR"
Robert Buels <rmb32@cornell.edu>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2012 by Robert Buels.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
