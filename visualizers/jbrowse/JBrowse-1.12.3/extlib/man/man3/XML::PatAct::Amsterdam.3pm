.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "XML::PatAct::Amsterdam 3pm"
.TH XML::PatAct::Amsterdam 3pm "2003-10-21" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::PatAct::Amsterdam \- An action module for simplistic style\-sheets
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& use XML::PatAct::Amsterdam;
\&
\& my $patterns = [ PATTERN => { Before => \*(Aqbefore\*(Aq,
\&                               After => \*(Aqafter\*(Aq },
\&                  ... ];
\&
\& my $matcher = XML::PatAct::Amsterdam\->new( I<OPTIONS> );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
XML::PatAct::Amsterdam is a PerlSAX handler for applying
pattern-action lists to \s-1XML\s0 parses or trees.  XML::PatAct::Amsterdam
applies a very simple style sheet to an instance and outputs the
result.  Amsterdam gets it's name from the Amsterdam \s-1SGML\s0 Parser (\s-1ASP\s0)
which inspired this module.
.PP
\&\s-1CAUTION:\s0 Amsterdam is a very simple style module, you will run into
it's limitations quickly with even moderately complex \s-1XML\s0 instances,
be aware of and prepared to switch to more complete style modules.
.PP
New XML::PatAct::Amsterdam instances are creating by calling `\fInew()\fR'.
Parameters can be passed as a list of key, value pairs or a hash.  A
Patterns and Matcher options are required.  The following \fI\s-1OPTIONS\s0\fR
are supported:
.IP "Patterns" 4
.IX Item "Patterns"
The pattern-action list to apply.  The list is an anonymous array of
pattern, action pairs.  Each action in the list contains either or
both a Before and an After string to copy to the output before and
after processing an \s-1XML\s0 element.  The Before and After strings may
contain attribute names enclosed in square brackets (`\f(CW\*(C`[\*(C'\fR' \fI\s-1NAME\s0\fR
`\f(CW\*(C`]\*(C'\fR'), these are replaced with the value of the attribute with that
name.  The special \fI\s-1NAME\s0\fR `\f(CW\*(C`_element\*(C'\fR' will be replaced with the
element's name.
.IP "Matcher" 4
.IX Item "Matcher"
An instance of the pattern or query matching module.
.IP "Output" 4
.IX Item "Output"
An IO::Handle or one of it's subclasses (such as IO::File), if this
parameter is not present and the AsString option is not used, the
module will write to standard output.
.IP "AsString" 4
.IX Item "AsString"
Return the generated output as a string from the `\f(CW\*(C`parse()\*(C'\fR' method
of the PerlSAX event generator.
.SH "AUTHOR"
.IX Header "AUTHOR"
Ken MacLeod, ken@bitsko.slc.ut.us
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIperl\fR\|(1)
.PP
``Using PatAct Modules'' and ``Creating PatAct Modules'' in libxml-perl.
