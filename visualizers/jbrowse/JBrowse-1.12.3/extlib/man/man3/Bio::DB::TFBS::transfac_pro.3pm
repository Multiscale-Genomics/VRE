.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::TFBS::transfac_pro 3"
.TH Bio::DB::TFBS::transfac_pro 3 "2018-10-02" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::DB::TFBS::transfac_pro \- An implementation of Bio::DB::TFBS
which uses local flat files for transfac pro
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::DB::Taxonomy;
\&
\&  my $db = new Bio::DB::Taxonomy(\-source => \*(Aqtransfac_pro\*(Aq
\&                                 \-dat_dir => $directory);
\&
\&  # we\*(Aqre interested in the gene P5
\&  my ($gene_id) = $db\->get_gene_ids(\-name => \*(AqP5\*(Aq); # G000001
\&
\&  # we want all the transcription factors that bind to our gene
\&  my @factor_ids = $db\->get_factor_ids(\-gene => $gene_id);
\&
\&  # get info about those TFs
\&  foreach my $factor_id (@factor_ids) {
\&    my $factor = $db\->get_factor($factor_id);
\&    my $name = $factor\->universal_name;
\&    # etc. \- see Bio::Map::TranscriptionFactor, eg. find out where it binds
\&  }
\&
\&  # get a matrix
\&  my $matrix = $db\->get_matrix(\*(AqM00001\*(Aq);
\&
\&  # get a binding site sequence
\&  my $seq = $db\->get_site(\*(AqR00001\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an implementation which uses local flat files and the DB_File
module \s-1RECNO\s0 data structures to manage a local copy of the Transfac Pro \s-1TFBS\s0
database.
.PP
Required database files require a license which can be obtained via
http://www.biobase\-international.com/pages/index.php?id=170
.PP
Within the linux installation tarball you will find a cgibin tar ball, and
inside that is a data directory containing the .dat files needed by this
module. Point to that data directory with \-dat_dir
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Sendu Bala"
.IX Header "AUTHOR - Sendu Bala"
Email bix@sendu.me.uk
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Based on Bio::DB::Taxonomy::flatfile by Jason Stajich
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 10
\& Title   : new
\& Usage   : my $obj = new Bio::DB::TFBS::transfac_pro();
\& Function: Builds a new Bio::DB::TFBS::transfac_pro object 
\& Returns : an instance of Bio::DB::TTFBS::transfac_pro
\& Args    : \-dat_dir   => name of directory where Transfac Pro .dat files
\&                         (required to initially build indexes)
\&           \-tax_db    => Bio::DB::Taxonomy object, used when initially building
\&                         indexes, gives better results for species information
\&                         but not required.
\&           \-index_dir => name of directory where index files should be created
\&                         or already exist. (defaults to \-dat_dir, required if
\&                         \-dat_dir not supplied)
\&           \-force     => 1 replace current indexes even if they exist
.Ve
.SS "Bio::DB::TFBS Interface implementation"
.IX Subsection "Bio::DB::TFBS Interface implementation"
.SS "get_reference"
.IX Subsection "get_reference"
.Vb 5
\& Title   : get_reference
\& Usage   : my $ref = $obj\->get_reference($id);
\& Function: Get a literature reference.
\& Returns : Bio::Annotation::Reference
\& Args    : string \- a reference id (\*(AqRE...\*(Aq)
.Ve
.SS "get_genemap"
.IX Subsection "get_genemap"
.Vb 6
\& Title   : get_genemap
\& Usage   : my $map = $obj\->get_genemap($id);
\& Function: Get a GeneMap for a gene.
\& Returns : Bio::Map::GeneMap
\& Args    : string \- a gene id (\*(AqG...\*(Aq), and optionally int (number of bp
\&           upstream)
.Ve
.SS "get_seq"
.IX Subsection "get_seq"
.Vb 7
\& Title   : get_seq
\& Usage   : my $seq = $obj\->get_seq($id);
\& Function: Get the sequence of a site. The sequence will be annotated with the
\&           the tags \*(Aqrelative_start\*(Aq, \*(Aqrelative_end\*(Aq, \*(Aqrelative_type\*(Aq and
\&           \*(Aqrelative_to\*(Aq.
\& Returns : Bio::Seq
\& Args    : string \- a site id (\*(AqR...\*(Aq)
.Ve
.SS "get_fragment"
.IX Subsection "get_fragment"
.Vb 5
\& Title   : get_fragment
\& Usage   : my $seq = $obj\->get_fragment($id);
\& Function: Get the sequence of a fragment.
\& Returns : Bio::Seq
\& Args    : string \- a site id (\*(AqFR...\*(Aq)
.Ve
.SS "get_matrix"
.IX Subsection "get_matrix"
.Vb 7
\& Title   : get_matrix
\& Usage   : my $matrix = $obj\->get_matrix($id);
\& Function: Get a matrix that describes a binding site.
\& Returns : Bio::Matrix::PSM::SiteMatrix
\& Args    : string \- a matrix id (\*(AqM...\*(Aq), optionally a sequence string from
\&           which base frequencies will be calculated for the matrix model
\&           (default 0.25 each)
.Ve
.SS "get_aln"
.IX Subsection "get_aln"
.Vb 10
\& Title   : get_aln
\& Usage   : my $aln = $obj\->get_aln($id);
\& Function: Get the alignment that was used to generate a matrix. Each sequence
\&           in the alignment will have an accession_number corresponding to the
\&           Transfac site id, and id() based on that but unique within the
\&           alignment.
\& Returns : Bio::SimpleAlign
\& Args    : string \- a matrix id (\*(AqM...\*(Aq), optionally true to, when a matrix
\&           lists no sequences, search for sequences via the matrix\*(Aqs factors,
\&           picking the sites that best match the matrix
.Ve
.SS "get_factor"
.IX Subsection "get_factor"
.Vb 5
\& Title   : get_factor
\& Usage   : my $factor = $obj\->get_factor($id);
\& Function: Get the details of a transcription factor.
\& Returns : Bio::Map::TranscriptionFactor
\& Args    : string \- a factor id (\*(AqT...\*(Aq)
.Ve
.SS "get_reference_ids"
.IX Subsection "get_reference_ids"
.Vb 7
\& Title   : get_reference_ids
\& Usage   : my @ids = $obj\->get_reference_ids(\-key => $value);
\& Function: Get all the reference ids that are associated with the supplied
\&           args.
\& Returns : list of strings (ids)
\& Args    : \-key => value, where value is a string id, and key is one of:
\&           \-pubmed \-site \-gene \-matrix \-factor
.Ve
.SS "get_site_ids"
.IX Subsection "get_site_ids"
.Vb 7
\& Title   : get_site_ids
\& Usage   : my @ids = $obj\->get_site_ids(\-key => $value);
\& Function: Get all the site ids that are associated with the supplied
\&           args.
\& Returns : list of strings (ids)
\& Args    : \-key => value, where value is a string id, and key is one of:
\&           \-id \-species \-gene \-matrix \-factor \-reference
.Ve
.SS "get_matrix_ids"
.IX Subsection "get_matrix_ids"
.Vb 7
\& Title   : get_matrix_ids
\& Usage   : my @ids = $obj\->get_matrix_ids(\-key => $value);
\& Function: Get all the matrix ids that are associated with the supplied
\&           args.
\& Returns : list of strings (ids)
\& Args    : \-key => value, where value is a string id, and key is one of:
\&           \-id \-name \-site \-factor \-reference
.Ve
.SS "get_factor_ids"
.IX Subsection "get_factor_ids"
.Vb 8
\& Title   : get_factor_ids
\& Usage   : my @ids = $obj\->get_factor_ids(\-key => $value);
\& Function: Get all the factor ids that are associated with the supplied
\&           args.
\& Returns : list of strings (ids)
\& Args    : \-key => value, where value is a string id, and key is one of:
\&           \-id \-name \-species \-interactors \-gene \-matrix \-site \-reference
\&           NB: \-gene only gets factor ids for genes that encode factors
.Ve
.SS "get_fragment_ids"
.IX Subsection "get_fragment_ids"
.Vb 7
\& Title   : get_fragment_ids
\& Usage   : my @ids = $obj\->get_fragment_ids(\-key => $value);
\& Function: Get all the fragment ids that are associated with the supplied
\&           args.
\& Returns : list of strings (ids)
\& Args    : \-key => value, where value is a string id, and key is one of:
\&           \-id \-species \-gene \-factor \-reference
.Ve
.SS "Helper methods"
.IX Subsection "Helper methods"
.SS "index_directory"
.IX Subsection "index_directory"
.Vb 6
\& Title   : index_directory
\& Function : Get/set the location that index files are stored. (this module
\&           will index the supplied database)
\& Usage   : $obj\->index_directory($newval)
\& Returns : value of index_directory (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
