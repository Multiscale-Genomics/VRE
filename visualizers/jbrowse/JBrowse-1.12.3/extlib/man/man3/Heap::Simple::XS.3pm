.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Heap::Simple::XS 3pm"
.TH Heap::Simple::XS 3pm "2008-01-13" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Heap::Simple::XS \- An XS implementation of the Heap::Simple interface
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&    # Let Heap::Simple decide which implementation that provides its interface
\&    # it will load and use. This may be Heap::Simple::XS or it may not be.
\&    # Still, this is the normal way of using Heap::Simple
\&    use Heap::Simple;
\&    my $heap = Heap::Simple\->new(...);
\&    # Use heap as described in the Heap::Simple documentation
\&
\&    # If for some reason you insist on using this version:
\&    use Heap::Simple::XS;
\&    my $heap = Heap::Simple::XS\->new(...);
\&    # Use the XS heap as described in the Heap::Simple documentation
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module provides an \s-1XS\s0 implementation of the interface described
in Heap::Simple. Look there for a description.
.SH "NOTES"
.IX Header "NOTES"
.IP "\(bu" 4
Even though this implementation is written in C, it fully supports
overloading and magic (like ties).
.IP "\(bu" 4
The dirty option will do several things.
.RS 4
.IP "\(bu" 4
It will cause scalars for the \f(CW\*(C`<\*(C'\fR and \f(CW\*(C`>\*(C'\fR orders
to be stored internally as an \s-1NV \s0(double or long double). This means you lose
magic, overload and any internal integer representation.
.IP "\(bu" 4
The \f(CW\*(C`<\*(C'\fR and \f(CW\*(C`>\*(C'\fR order will cause \f(CW\*(C`Array\*(C'\fR and \f(CW\*(C`Hash\*(C'\fR elements
to get their key internally cached as an \s-1NV.\s0 So indirect changes to the value
won't be noticed anymore (but most of the time you shouldn't do that anyways).
It also means these will start behaving like a wrapped heap type, so they
return true for wrapped and support
key_insert and
key_absorb.
.IP "\(bu" 4
The \f(CW\*(C`<\*(C'\fR and \f(CW\*(C`>\*(C'\fR order will cause \f(CW\*(C`Object\*(C'\fR and \f(CW\*(C`Any\*(C'\fR elements
to store the key as an \s-1NV \s0(these two already were wrapped heap types).
.IP "\(bu" 4
It has no effect on \f(CW\*(C`Method\*(C'\fR and \f(CW\*(C`Function\*(C'\fR element types since it's
assumed you \fBwant\fR the key recalculations for these for some reason (if you
didn't, you would have asked for \f(CW\*(C`Object\*(C'\fR or \f(CW\*(C`Any\*(C'\fR elements).
.RE
.RS 4
.RE
.IP "\(bu" 4
Heap::Simple\->implementation will return \f(CW"Heap::Simple::XS"\fR if it selected
this module.
.SH "EXPORT"
.IX Header "EXPORT"
None.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Heap::Simple,
Heap::Simple::Perl
.SH "AUTHOR"
.IX Header "AUTHOR"
Ton Hospel, <Heap\-Simple\-XS@ton.iguana.be>
.PP
Parts are inspired by code by Joseph N. Hall
<http://www.perlfaq.com/faqs/id/196>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2004 by Ton Hospel
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.6.1 or,
at your option, any later version of Perl 5 you may have available.
