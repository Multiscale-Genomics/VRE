.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::SeqFeature::Store::Loader 3"
.TH Bio::DB::SeqFeature::Store::Loader 3 "2018-10-02" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::DB::SeqFeature::Store::Loader \-\- Loader
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\& # non\-instantiable base class
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is the base class for Bio::DB::SeqFeature::Loader::GFF3Loader,
Bio::DB::SeqFeature::Loader::GFFLoader, and
Bio::DB::SeqFeature::FeatureFileLoader. Please see the manual pages
for these modules.
.SS "new"
.IX Subsection "new"
.Vb 6
\& Title   : new
\& Usage   : $loader = Bio::DB::SeqFeature::Store::GFF3Loader\->new(@options)
\& Function: create a new parser
\& Returns : a Bio::DB::SeqFeature::Store::GFF3Loader gff3 parser and loader
\& Args    : several \- see below
\& Status  : public
.Ve
.PP
This method creates a new \s-1GFF3\s0 loader and establishes its connection
with a Bio::DB::SeqFeature::Store database. Arguments are \-name=>$value
pairs as described in this table:
.PP
.Vb 2
\& Name               Value
\& \-\-\-\-               \-\-\-\-\-
\&
\& \-store             A writable Bio::DB::SeqFeature::Store database handle.
\&
\& \-seqfeature_class  The name of the type of Bio::SeqFeatureI object to create
\&                      and store in the database (Bio::DB::SeqFeature by default)
\&
\& \-sf_class          A shorter alias for \-seqfeature_class
\&
\& \-verbose           Send progress information to standard error.
\&
\& \-fast              If true, activate fast loading (see below)
\&
\& \-chunk_size        Set the storage chunk size for nucleotide/protein sequences
\&                       (default 2000 bytes)
\&
\& \-tmp               Indicate a temporary directory to use when loading non\-normalized
\&                       features.
\&
\& \-map_coords        A code ref that will transform a list of ($ref,[$start1,$end1]...)
\&                       coordinates into a list of ($newref,[$newstart1,$newend1]...)
\&
\& \-index_subfeatures Indicate true if subfeatures should be indexed. Default is true.
\&
\& \-summary_stats     Rebuild summary stats at the end of loading (not incremental,
\&                     so takes a long time)
.Ve
.PP
When you call \fInew()\fR, a connection to a Bio::DB::SeqFeature::Store
database should already have been established and the database
initialized (if appropriate).
.PP
Some combinations of Bio::SeqFeatures and Bio::DB::SeqFeature::Store
databases support a fast loading mode. Currently the only reliable
implementation of fast loading is the combination of DBI::mysql with
Bio::DB::SeqFeature. The other important restriction on fast loading
is the requirement that a feature that contains subfeatures must occur
in the \s-1GFF3\s0 file before any of its subfeatures. Otherwise the
subfeatures that occurred before the parent feature will not be
attached to the parent correctly. This restriction does not apply to
normal (slow) loading.
.PP
If you use an unnormalized feature class, such as
Bio::SeqFeature::Generic, then the loader needs to create a temporary
database in which to cache features until all their parts and subparts
have been seen. This temporary databases uses the \*(L"berkeleydb\*(R" adaptor. The
\&\-tmp option specifies the directory in which that database will be
created. If not present, it defaults to the system default tmp
directory specified by File::Spec\->\fItmpdir()\fR.
.PP
The \-chunk_size option allows you to tune the representation of
DNA/Protein sequence in the Store database. By default, sequences are
split into 2000 base/residue chunks and then reassembled as
needed. This avoids the problem of pulling a whole chromosome into
memory in order to fetch a short subsequence from somewhere in the
middle. Depending on your usage patterns, you may wish to tune this
parameter using a chunk size that is larger or smaller than the
default.
.SS "load"
.IX Subsection "load"
.Vb 6
\& Title   : load
\& Usage   : $count = $loader\->load(@ARGV)
\& Function: load the indicated files or filehandles
\& Returns : number of feature lines loaded
\& Args    : list of files or filehandles
\& Status  : public
.Ve
.PP
Once the loader is created, invoke its \fIload()\fR method with a list of
\&\s-1GFF3\s0 or \s-1FASTA\s0 file paths or previously-opened filehandles in order to
load them into the database. Compressed files ending with .gz, .Z and
\&.bz2 are automatically recognized and uncompressed on the fly. Paths
beginning with http: or ftp: are treated as URLs and opened using the
\&\s-1LWP GET\s0 program (which must be on your path).
.PP
\&\s-1FASTA\s0 files are recognized by their initial \*(L">\*(R" character. Do not feed
the loader a file that is neither \s-1GFF3\s0 nor \s-1FASTA\s0; I don't know what
will happen, but it will probably not be what you expect.
.SS "accessors"
.IX Subsection "accessors"
The following read-only accessors return values passed or created during \fInew()\fR:
.PP
.Vb 1
\& store()          the long\-term Bio::DB::SeqFeature::Store object
\&
\& tmp_store()      the temporary Bio::DB::SeqFeature::Store object used
\&                    during loading
\&
\& sfclass()        the Bio::SeqFeatureI class
\&
\& fast()           whether fast loading is active
\&
\& seq_chunk_size() the sequence chunk size
\&
\& verbose()        verbose progress messages
.Ve
.SS "Internal Methods"
.IX Subsection "Internal Methods"
The following methods are used internally and may be overridden by
subclasses.
.IP "default_seqfeature_class" 4
.IX Item "default_seqfeature_class"
.Vb 1
\&  $class = $loader\->default_seqfeature_class
.Ve
.Sp
Return the default SeqFeatureI class (Bio::DB::SeqFeature).
.IP "subfeatures_normalized" 4
.IX Item "subfeatures_normalized"
.Vb 1
\&  $flag = $loader\->subfeatures_normalized([$new_flag])
.Ve
.Sp
Get or set a flag that indicates that the subfeatures are
normalized. This is deduced from the SeqFeature class information.
.IP "subfeatures_in_table" 4
.IX Item "subfeatures_in_table"
.Vb 1
\&  $flag = $loader\->subfeatures_in_table([$new_flag])
.Ve
.Sp
Get or set a flag that indicates that feature/subfeature relationships
are stored in a table. This is deduced from the SeqFeature class and
Store information.
.IP "load_fh" 4
.IX Item "load_fh"
.Vb 1
\&  $count = $loader\->load_fh($filehandle)
.Ve
.Sp
Load the \s-1GFF3\s0 data at the other end of the filehandle and return true
if successful. Internally, \fIload_fh()\fR invokes:
.Sp
.Vb 3
\&  start_load();
\&  do_load($filehandle);
\&  finish_load();
.Ve
.IP "start_load, finish_load" 4
.IX Item "start_load, finish_load"
These methods are called at the start and end of a filehandle load.
.IP "build_summary" 4
.IX Item "build_summary"
.Vb 1
\&  $loader\->build_summary
.Ve
.Sp
Call this to rebuild the summary coverage statistics. This is done automatically
if \fInew()\fR was passed a true value for \-summary_stats at create time.
.IP "do_load" 4
.IX Item "do_load"
.Vb 1
\&  $count = $loader\->do_load($fh)
.Ve
.Sp
This is called by \fIload_fh()\fR to load the \s-1GFF3\s0 file's filehandle and
return the number of lines loaded.
.IP "load_line" 4
.IX Item "load_line"
.Vb 1
\&    $loader\->load_line($data);
.Ve
.Sp
Load a line of a \s-1GFF3\s0 file. You must bracket this with calls to
\&\fIstart_load()\fR and \fIfinish_load()\fR!
.Sp
.Vb 3
\&    $loader\->start_load();
\&    $loader\->load_line($_) while <FH>;
\&    $loader\->finish_load();
.Ve
.IP "handle_feature" 4
.IX Item "handle_feature"
.Vb 1
\&  $loader\->handle_feature($data_line)
.Ve
.Sp
This method is called to process a single data line. It manipulates
information stored a data structure called \f(CW$self\fR\->{load_data}.
.IP "handle_meta" 4
.IX Item "handle_meta"
.Vb 1
\&  $loader\->handle_meta($data_line)
.Ve
.Sp
This method is called to process a single data line. It manipulates
information stored a data structure called \f(CW$self\fR\->{load_data}.
.IP "store_current_feature" 4
.IX Item "store_current_feature"
.Vb 1
\&  $loader\->store_current_feature()
.Ve
.Sp
This method is called to store the currently active feature in the
database. It uses a data structure stored in \f(CW$self\fR\->{load_data}.
.IP "parse_attributes" 4
.IX Item "parse_attributes"
.Vb 1
\& ($reserved,$unreserved) = $loader\->parse_attributes($attribute_line)
.Ve
.Sp
This method parses the information contained in the \f(CW$attribute_line\fR
into two hashrefs, one containing the values of reserved attribute
tags (e.g. \s-1ID\s0) and the other containing the values of unreserved ones.
.IP "start_or_finish_sequence" 4
.IX Item "start_or_finish_sequence"
.Vb 1
\&  $loader\->start_or_finish_sequence(\*(AqChr9\*(Aq)
.Ve
.Sp
This method is called at the beginning and end of a fasta section.
.IP "load_sequence" 4
.IX Item "load_sequence"
.Vb 1
\&  $loader\->load_sequence(\*(Aqgatttcccaaa\*(Aq)
.Ve
.Sp
This method is called to load some amount of sequence after
\&\fIstart_or_finish_sequence()\fR is first called.
.IP "open_fh" 4
.IX Item "open_fh"
.Vb 1
\& my $io_file = $loader\->open_fh($filehandle_or_path)
.Ve
.Sp
This method opens up the indicated file or pipe, using some
intelligence to recognized compressed files and URLs and doing the
right thing.
.IP "loaded_ids" 4
.IX Item "loaded_ids"
.Vb 2
\& my $ids    = $loader\->loaded_ids;
\& my $id_cnt = @$ids;
.Ve
.Sp
After performing a load, this returns an array ref containing all the
feature primary ids that were created during the load.
.IP "local_ids" 4
.IX Item "local_ids"
.Vb 2
\& my $ids    = $self\->local_ids;
\& my $id_cnt = @$ids;
.Ve
.Sp
After performing a load, this returns an array ref containing all the
load file IDs that were contained within the file just loaded.
.IP "time" 4
.IX Item "time"
.Vb 1
\& my $time = $loader\->time
.Ve
.Sp
This method returns the current time in seconds, using Time::HiRes if available.
.IP "unescape" 4
.IX Item "unescape"
.Vb 1
\& my $unescaped = GFF3Loader::unescape($escaped)
.Ve
.Sp
This is an internal utility.  It is the same as CGI::Util::unescape,
but doesn't change pluses into spaces and ignores unicode escapes.
.SH "BUGS"
.IX Header "BUGS"
This is an early version, so there are certainly some bugs. Please
use the BioPerl bug tracking system to report bugs.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
bioperl,
Bio::DB::SeqFeature::Store,
Bio::DB::SeqFeature::Segment,
Bio::DB::SeqFeature::NormalizedFeature,
Bio::DB::SeqFeature::Store::GFF3Loader,
Bio::DB::SeqFeature::Store::DBI::mysql,
Bio::DB::SeqFeature::Store::berkeleydb
.SH "AUTHOR"
.IX Header "AUTHOR"
Lincoln Stein <lstein@cshl.org>.
.PP
Copyright (c) 2006 Cold Spring Harbor Laboratory.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
