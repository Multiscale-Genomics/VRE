.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::Taxonomy::sqlite 3"
.TH Bio::DB::Taxonomy::sqlite 3 "2018-10-02" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::DB::Taxonomy::sqlite \- SQLite\-based implementation of Bio::DB::Taxonomy::flatfile
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::DB::Taxonomy;
\&
\&  my $db = Bio::DB::Taxonomy\->new(\-source    => \*(Aqsqlite\*(Aq,
\&                                  \-db        => \*(Aqmytax.db\*(Aq  # default \*(Aqtaxonomy.sqlite\*(Aq
\&                                  \-nodesfile => \*(Aqnodes.dmp\*(Aq,
\&                                  \-namesfile => \*(Aqnames.dmp\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is an implementation of Bio::DB::Taxonomy which stores and accesses the
\&\s-1NCBI\s0 taxonomy using a simple SQLite3 database stored locally on disk.
.PP
With this implementation, one can do the same basic searches as with the 'flatfile'
database.  A test lookup of 1000 \s-1NCBI\s0 TaxIDs with full lineage information took
about 2 seconds on my older MacBook Pro laptop with an on-disk implementation.
.PP
A few key differences:
.IP "\(bu" 4
You can use typical \s-1SQL\s0 syntax to run a query search; for instance, if you want you can run:
.Sp
.Vb 1
\&   @ids = sort $db\->get_taxonids(\*(AqChloroflexi%\*(Aq);
.Ve
.IP "\(bu" 4
In-memory database is allowed
.Sp
.Vb 4
\&  my $db = Bio::DB::Taxonomy\->new(\-source    => \*(Aqsqlite\*(Aq,
\&                                  \-db        => \*(Aq:memory:\*(Aq,
\&                                  \-nodesfile => \*(Aqnodes.dmp\*(Aq,
\&                                  \-namesfile => \*(Aqnames.dmp\*(Aq);
.Ve
.PP
The required database files, nodes.dmp and names.dmp can be obtained from
ftp://ftp.ncbi.nih.gov/pub/taxonomy/taxdump.tar.gz
.SH "TODO"
.IX Header "TODO"
.IP "\(bu" 4
Small optimizations, such as optimizing name lookups
.IP "\(bu" 4
Possibly use recursive \s-1CTE\s0 <http://www.sqlite.org/lang_with.html> to do lineage lookups
.IP "\(bu" 4
Clean up \s-1SQL \s0(still kind of a mess right now)
.IP "\(bu" 4
Check compat. with other NCBI-specific Bio::DB::Taxonomy implementations
.IP "\(bu" 4
Plan out feasibility of allowing other backends (Neo4J, other \s-1DBI,\s0 etc)
.IP "\(bu" 4
Optionally calculate left/right \s-1ID\s0 values for TaxID nodes
.PP
Beyond completing the implementation and optimization, this will
likely be rolled into a more flexible backend at some future point.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Chris Fields"
.IX Header "AUTHOR - Chris Fields"
Email cjfields-at-cpan-dot-org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 8
\& Title   : new
\& Usage   : my $obj = Bio::DB::Taxonomy::flatfile\->new();
\& Function: Builds a new Bio::DB::Taxonomy::flatfile object 
\& Returns : an instance of Bio::DB::Taxonomy::flatfile
\& Args    : \-directory => name of directory where index files should be created
\&           \-nodesfile => name of file containing nodes (nodes.dmp from NCBI)
\&           \-namesfile => name of the file containing names(names.dmp from NCBI)
\&           \-force     => 1 to replace current indexes even if they exist
.Ve
.SS "Bio::DB::Taxonomy interface implementation"
.IX Subsection "Bio::DB::Taxonomy interface implementation"
.SS "get_num_taxa"
.IX Subsection "get_num_taxa"
.Vb 5
\& Title   : get_num_taxa
\& Usage   : my $num = $db\->get_num_taxa();
\& Function: Get the number of taxa stored in the database.
\& Returns : A number
\& Args    : None
.Ve
.SS "get_taxon"
.IX Subsection "get_taxon"
.Vb 9
\& Title   : get_taxon
\& Usage   : my $taxon = $db\->get_taxon(\-taxonid => $taxonid)
\& Function: Get a Bio::Taxon object from the database.
\& Returns : Bio::Taxon object
\& Args    : just a single value which is the database id, OR named args:
\&           \-taxonid => taxonomy id (to query by taxonid)
\&            OR
\&           \-name    => string (to query by a taxonomy name: common name, 
\&                               scientific name, etc)
.Ve
.SS "get_taxonids"
.IX Subsection "get_taxonids"
.Vb 7
\& Title   : get_taxonids
\& Usage   : my @taxonids = $db\->get_taxonids(\*(AqHomo sapiens\*(Aq);
\& Function: Searches for a taxonid (typically ncbi_taxon_id) based on a query
\&           string. Note that multiple taxonids can match to the same supplied
\&           name.
\& Returns : array of integer ids in list context, one of these in scalar context
\& Args    : string representing taxon\*(Aqs name
.Ve
.SS "get_Children_Taxids"
.IX Subsection "get_Children_Taxids"
.Vb 6
\& Title   : get_Children_Taxids
\& Usage   : my @childrenids = $db\->get_Children_Taxids 
\& Function: Get the ids of the children of a node in the taxonomy
\& Returns : Array of Ids
\& Args    : Bio::Taxon or a taxon_id
\& Status  : deprecated (use each_Descendent())
.Ve
.SS "ancestor"
.IX Subsection "ancestor"
.Vb 6
\& Title   : ancestor
\& Usage   : my $ancestor_taxon = $db\->ancestor($taxon)
\& Function: Retrieve the full ancestor taxon of a supplied Taxon from the
\&           database. 
\& Returns : Bio::Taxon
\& Args    : Bio::Taxon (that was retrieved from this database)
.Ve
.SS "each_Descendent"
.IX Subsection "each_Descendent"
.Vb 6
\& Title   : each_Descendent
\& Usage   : my @taxa = $db\->each_Descendent($taxon);
\& Function: Get all the descendents of the supplied Taxon (but not their
\&           descendents, ie. not a recursive fetchall).
\& Returns : Array of Bio::Taxon objects
\& Args    : Bio::Taxon (that was retrieved from this database)
.Ve
.SS "Helper methods"
.IX Subsection "Helper methods"
.SS "index_directory"
.IX Subsection "index_directory"
.Vb 7
\& Title   : index_directory
\& Function : Get/set the location that index files are stored. (this module
\&           will index the supplied database)
\& Usage   : $obj\->index_directory($newval)
\& Returns : value of index_directory (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
\& Note    : kept for backwards compatibility with older DB_File implementation
.Ve
.SS "db_name"
.IX Subsection "db_name"
.Vb 5
\& Title   : db_name
\& Function : Get/set the name of the SQLite3 database where data is stored
\& Usage   : $obj\->db_name($newval)
\& Returns : value of db_name (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "cache_size"
.IX Subsection "cache_size"
.Vb 6
\& Title   : cache_size
\& Function : Get/set the cachesize used for loading the SQLite3 database
\& Usage   : $obj\->cache_size($newval)
\& Returns : value of cache_size (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
\& Note    : we do no checking on whether this value is an integer (SQLite does this for use)
.Ve
