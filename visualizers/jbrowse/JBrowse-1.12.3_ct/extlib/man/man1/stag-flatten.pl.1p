.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "STAG-FLATTEN 1p"
.TH STAG-FLATTEN 1p "2009-12-14" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
stag\-flatten \- turns stag data into a flat table
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  stag\-flatten \-c name \-c person/name dept MyFile.xml
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
reads in a file in a stag format, and 'flattens' it to a tab-delimited
table format. given this data:
.PP
.Vb 7
\&  (company
\&   (dept
\&    (name "special\-operations")
\&    (person
\&     (name "james\-bond"))
\&    (person
\&     (name "fred"))))
.Ve
.PP
the above command will return a two column table
.PP
.Vb 2
\&  special\-operations      james\-bond
\&  special\-operations      fred
.Ve
.PP
If there are multiple values for the columns within the node, then the
cartesian product will be calculated
.SH "USAGE"
.IX Header "USAGE"
.Vb 1
\&  stag\-flatten [\-p PARSER] [\-c COLS] [\-c COLS] NODE <file>
.Ve
.SH "ARGUMENTS"
.IX Header "ARGUMENTS"
.IP "\-p|parser \s-1FORMAT\s0" 4
.IX Item "-p|parser FORMAT"
\&\s-1FORMAT\s0 is one of xml, sxpr or itext
.Sp
xml assumed as default
.IP "\-c|column \s-1COL1,COL2,COL3,..\s0" 4
.IX Item "-c|column COL1,COL2,COL3,.."
the name of the columns/elements to write out
.Sp
this can be specified either with multiple \-c arguments, or with a
comma-seperated (no spaces) list of column (terminal node) names after
a single \-c
.IP "\-n|nest" 4
.IX Item "-n|nest"
if set, then the output will be a compress repeating values into the
same row; each cell in the table will be enclosed by {}, and will
contain a comma-delimited set of values
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Data::Stag
