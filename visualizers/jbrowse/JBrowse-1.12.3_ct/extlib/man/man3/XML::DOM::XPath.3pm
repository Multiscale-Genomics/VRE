.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "XPath 3pm"
.TH XPath 3pm "2008-04-14" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
XML::DOM::XPath \- Perl extension to add XPath support to XML::DOM, using XML::XPath engine
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use XML::DOM::XPath;
\&
\&  my $parser= XML::DOM::Parser\->new();
\&  my $doc = $parser\->parsefile ("file.xml");
\&
\&  # print all HREF attributes of all CODEBASE elements
\&  # compare with the XML::DOM version to see how much easier it is to use
\&  my @nodes = $doc\->findnodes( \*(Aq//CODEBASE[@HREF]/@HREF\*(Aq);
\&  print $_\->getValue, "\en" foreach (@nodes);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
XML::DOM::XPath allows you to use XML::XPath methods to query
a \s-1DOM.\s0 This is often much easier than relying only on getElementsByTagName.
.PP
It lets you use all of the \s-1XML::DOM\s0 methods.
.SH "METHODS"
.IX Header "METHODS"
Those methods can be applied to a whole dom object or to a node.
.SS "findnodes($path)"
.IX Subsection "findnodes($path)"
return a list of nodes found by \f(CW$path\fR.
.SS "findnodes_as_string($path)"
.IX Subsection "findnodes_as_string($path)"
return the nodes found reproduced as \s-1XML.\s0 The result is not guaranteed
to be valid \s-1XML\s0 though.
.SS "findvalue($path)"
.IX Subsection "findvalue($path)"
return the concatenation of the text content of the result nodes
.SS "exists($path)"
.IX Subsection "exists($path)"
return true if the given path exists.
.SS "matches($path)"
.IX Subsection "matches($path)"
return true if the node matches the path.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
.Vb 1
\&  XML::DOM
\&
\&  XML::XPathEngine
.Ve
.SH "AUTHOR"
.IX Header "AUTHOR"
Michel Rodriguez, mirod@cpan.org
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2003 by Michel Rodriguez
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
