.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Data::Stag::Writer 3pm"
.TH Data::Stag::Writer 3pm "2013-09-18" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 1
\&  Data::Stag::Writer \- base class for all Writers
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  # Abstract class \- do not use directly
\&  package MyOutputter;
\&  use base qw(Data::Stag::Writer);
\&
\&  sub e_foo {
\&    my ($self, $foo) = @_;
\&    $self\->writef("data1: %s\en", $foo\->get_data1);
\&    return;
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
base mixin class for all writers
.SH "INHERITANCE"
.IX Header "INHERITANCE"
.Vb 1
\&    This inherits from L<Data::Stag::BaseHandler>
.Ve
.SH "PUBLIC METHODS \-"
.IX Header "PUBLIC METHODS -"
\fInew\fR
.IX Subsection "new"
.PP
.Vb 1
\&       Title: new
\&
\&        Args: [fn str], [fh FILEHANDLE]
\&      Return: L<Data::Stag::BaseHandler>
\&     Example: $w = MyWriter\->new(\-fh=>$fh);
.Ve
.PP
returns the tree that was built from all uncaught events
.PP
\fIfile\fR
.IX Subsection "file"
.PP
.Vb 1
\&       Title: file
\&
\&        Args: filename str
\&     Returns: filename str
\&     Example: $handler\->file("my_output_file.txt");
.Ve
.PP
Setting this will cause all output to be diverted to this file; the
file will be overwritten by default. The filehandle will not be opened
unless any events are thrown
.PP
For more fine-grained control, use \f(CW$handler\fR\->\fIfh()\fR
.PP
\fIfh\fR
.IX Subsection "fh"
.PP
.Vb 1
\&       Title: fh
\&
\&        Args: filehandle FH
\&     Returns: filehandle FH
\&     Example: $handler\->fh(\e*STDOUT);
.Ve
.PP
Gets/Sets the output filehandle for the writer
.PP
\fIsafe_fh\fR
.IX Subsection "safe_fh"
.PP
.Vb 2
\&       Title: safe_fh
\&        Type: PROTECTED
\&
\&        Args: filehandle FH
\&     Returns: filehandle FH
\&     Example: $handler\->fh(\e*STDOUT);
.Ve
.PP
As \fIfh()\fR, but makes sure that the filehandle is initialized
.PP
You should use this if you are overriding this class
.PP
\fIwrite\fR
.IX Subsection "write"
.PP
.Vb 1
\&       Title: write
\&
\&        Type: PROTECTED
\&        Args: message str
\&     Returns: 
\&     Example: $self\->write($stag\->get_blah);
.Ve
.PP
writes output
.PP
to be used by classes that subclass this one
.PP
\fIwritef\fR
.IX Subsection "writef"
.PP
.Vb 1
\&       Title: writef
.Ve
.PP
As write, analagous to printf
.SS "use_color"
.IX Subsection "use_color"
.Vb 3
\&  Usage   \-
\&  Returns \-
\&  Args    \-
.Ve
