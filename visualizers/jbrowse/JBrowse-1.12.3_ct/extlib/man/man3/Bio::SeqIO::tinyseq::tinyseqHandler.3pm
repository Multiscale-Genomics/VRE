.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::SeqIO::tinyseq::tinyseqHandler 3"
.TH Bio::SeqIO::tinyseq::tinyseqHandler 3 "2018-10-02" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::SeqIO::tinyseq::tinyseqHandler \- XML event handlers to support NCBI TinySeq XML parsing
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Do not use this module directly; use the SeqIO handler system:
.PP
.Vb 1
\&  $stream = Bio::SeqIO\->new( \-file => $filename, \-format => \*(Aqtinyseq\*(Aq );
\&
\&  while ( my $seq = $stream\->next_seq ) {
\&    ....
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object provides event handler methods for parsing sequence files
in the \s-1NCBI\s0 TinySeq \s-1XML\s0 format.  A TinySeq is a lightweight \s-1XML\s0 file
of sequence information on one or more sequences, analgous to \s-1FASTA\s0
format.
.PP
See <https://www.ncbi.nlm.nih.gov/dtd/NCBI_TSeq.mod.dtd> for the \s-1DTD.\s0
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Bio::SeqIO, Bio::Seq.
.SH "AUTHOR"
.IX Header "AUTHOR"
Donald Jackson, <donald.jackson@bms.com>
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 6
\&  Title         : new
\&  Usage         : $handler = Bio::SeqIO::tinyseq::tinyseqHandler\->new()
\&  Function      : instantiates a tinyseqHandler for use by
\&                  XML::Parser::PerlSAX
\&  Returns       : Bio::SeqIO::tinyseq::tinyseqHandler object
\&  Args          : NONE
.Ve
.SS "start_document"
.IX Subsection "start_document"
.Vb 5
\&  Title         : start_document
\&  Usage         : NONE
\&  Function      : start_document handler for use by XML::Parser::PerlSAX
\&  Returns       : NONE
\&  Args          : NONE
.Ve
.SS "end_document"
.IX Subsection "end_document"
.Vb 5
\&  Title         : end_document
\&  Usage         : NONE
\&  Function      : end_document handler for use by XML::Parser::PerlSAX
\&  Returns       : NONE
\&  Args          : NONE
.Ve
.SS "start_element"
.IX Subsection "start_element"
.Vb 5
\&  Title         : start_element
\&  Usage         : NONE
\&  Function      : start_element handler for use by XML::Parser::PerlSAX
\&  Returns       : NONE
\&  Args          : NONE
.Ve
.SS "end_element"
.IX Subsection "end_element"
.Vb 5
\&  Title         : end_element
\&  Usage         : NONE
\&  Function      : end_element handler for use by XML::Parser::PerlSAX
\&  Returns       : NONE
\&  Args          : NONE
.Ve
.SS "characters"
.IX Subsection "characters"
.Vb 5
\&  Title         : characters
\&  Usage         : NONE
\&  Function      : characters handler for use by XML::Parser::PerlSAX
\&  Returns       : NONE
\&  Args          : NONE
.Ve
.SS "TSeq"
.IX Subsection "TSeq"
.Vb 5
\&  Title         : TSeq
\&  Usage         : NONE
\&  Function      : event handler for END of a TSeq element
\&  Returns       : loh of parsed sequence atts for Bio::SeqIO::tinyseq
\&  Args          : NONE
.Ve
.SS "_current_element"
.IX Subsection "_current_element"
.Vb 5
\&  Title         : _current_element
\&  Usage         : Internal method
\&  Function      : Utility method to return current element info
\&  Returns       : XML::Parser::PerlSAX hash for current element
\&  Args          : NONE
.Ve
