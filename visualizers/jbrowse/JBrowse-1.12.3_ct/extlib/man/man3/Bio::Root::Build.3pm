.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Root::Build 3"
.TH Bio::Root::Build 3 "2018-10-02" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  ...TO BE ADDED
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a subclass of Module::Build so we can override certain methods and do
fancy stuff
.PP
It was first written against Module::Build::Base v0.2805. Many of the methods
here are copy/pasted from there in their entirety just to change one or two
minor things, since for the most part Module::Build::Base code is hard to
cleanly override.
.PP
\&\fBNote\fR: per bug 3196, the majority of the code in this module has been revised
or commented out to bring it in line with the Module::Build \s-1API.\s0 In particular,
\&'requires/recommends' tags in the Build.PL file were not of the same format as
those for Module::Build, and so caused serious issues with newer versions
(including giving incorrect meta data). Other problematic methods involving
automatic installation of prereq modules via \s-1CPAN\s0 were also removed as they do
not work with more modern perl tools such as perlbrew and cpanm.
.SH "AUTHOR Sendu Bala"
.IX Header "AUTHOR Sendu Bala"
.SS "find_pm_files"
.IX Subsection "find_pm_files"
Our modules are in Bio, not lib
.SS "choose_scripts"
.IX Subsection "choose_scripts"
Ask what scripts to install (this method is unique to bioperl)
.SS "script_files"
.IX Subsection "script_files"
Our version of script_files doesn't take args but just installs those scripts
requested by the user after \fIchoose_scripts()\fR is called. If it wasn't called,
installs all scripts in scripts directory
.SS "prompt"
.IX Subsection "prompt"
Overridden simply to not print the default answer if chosen by hitting return
.SS "ACTION_manifest"
.IX Subsection "ACTION_manifest"
We always generate a new \s-1MANIFEST\s0 instead of allowing existing files to remain
\&\s-1MANIFEST.SKIP\s0 is left alone
.SS "ACTION_install"
.IX Subsection "ACTION_install"
Extended to run scripts post-installation
.SS "test_internet"
.IX Subsection "test_internet"
For use with auto_features, which should require LWP::UserAgent as one of
its reqs
.PP
Note: as of 4\-11\-11, this is no longer called \- if someone wants to run
network tests (off by default) w/o a network, then they are hanging themselves
by their own shoelaces.
.SS "ACTION_ppmdist"
.IX Subsection "ACTION_ppmdist"
Don't copy across man3 docs since they're of little use under Windows and
have bad filenames
.SS "install_types"
.IX Subsection "install_types"
When supplied a true value, pretends libdoc doesn't exist (preventing man3
installation for ppmdist). when supplied false, they exist again
.SS "ACTION_dist"
.IX Subsection "ACTION_dist"
We make all archive formats we want, not just .tar.gz
we also auto-run manifest action, since we always want to re-create
\&\s-1MANIFEST\s0 and \s-1MANIFEST.SKIP\s0 just-in-time
.SS "ACTION_clean"
.IX Subsection "ACTION_clean"
Define custom clean/realclean actions to rearrange config file cleanup
.SS "ACTION_realclean"
.IX Subsection "ACTION_realclean"
Define custom clean/realclean actions to rearrange config file cleanup
.SS "get_metadata"
.IX Subsection "get_metadata"
This wraps the base metafile method to add in version information from
Bio::Root::Version to \s-1META\s0.json and \s-1META\s0.yml if it isn't already present. Note
this should be compliant with meta_add and meta_merge, but occurs after those
steps. If a version is already set and dist_version differs from the set one, a
warning is printed.
.SS "make_zip"
.IX Subsection "make_zip"
Makes zip file for windows users and bzip2 files as well
.SS "prompt_for_network"
.IX Subsection "prompt_for_network"
A method that can be called in a Build.PL script to ask the user if they want
internet tests.
Should only be called if you have tested for yourself that
\&\f(CW$build\fR\->feature('Network Tests') is true
.SS "print_build_script"
.IX Subsection "print_build_script"
Override the build script warnings flag
