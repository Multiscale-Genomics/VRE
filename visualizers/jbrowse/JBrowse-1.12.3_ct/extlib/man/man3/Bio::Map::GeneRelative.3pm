.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Map::GeneRelative 3"
.TH Bio::Map::GeneRelative 3 "2018-10-02" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Map::GeneRelative \- Represents being relative to named sub\-regions of a
                         gene.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Bio::Map::GeneRelative;
\&
\&    # say that a something will have a position relative to the start of the
\&    # gene on map
\&    my $rel = Bio::Map::GeneRelative\->new(\-gene => 0);
\&
\&    # or that something will be relative to the third transcript of a gene
\&    # on a map
\&    $rel = Bio::Map::GeneRelative\->new(\-transcript => 3);
\&
\&    # or to the 5th intron of the default transcript
\&    $rel = Bio::Map::GeneRelative\->new(\-intron => [0, 5]);
\&
\&    # use the $rel as normal; see L<Bio::Map::Relative>
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Be able to say that a given position is relative to some standard part of a
gene.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Sendu Bala"
.IX Header "AUTHOR - Sendu Bala"
Email bix@sendu.me.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 10
\& Title   : new
\& Usage   : my $relative = Bio::Map::Relative\->new();
\& Function: Build a new Bio::Map::Relative object.
\& Returns : Bio::Map::Relative object
\& Args    : \-gene => int       : coordinates are relative to the int\*(Aqth base
\&                                downstream of the Position\*(Aqs map\*(Aqs gene
\&                                [default is gene => 0, ie. relative to the
\&                                start of the gene],
\&           \-transcript => int : or relative to the start of the int\*(Aqth
\&                                transcript of the Position\*(Aqs map\*(Aqs gene,
\&           \-exon => [i, n]    : or relative to the start of the n\*(Aqth
\&                                transcript\*(Aqs i\*(Aqth exon,
\&           \-intron => [i, n]  : or intron,
\&           \-coding => int     : or the start of the int\*(Aqth transcript\*(Aqs coding
\&                                region.
\&
\&           \-description => string : Free text description of what this relative
\&                                    describes
\&
\&           (To say a Position is relative to something and upstream of it,
\&            the Position\*(Aqs start() co\-ordinate should be set negative)
\&           In all cases, a transcript number of 0 means the active transcript.
.Ve
.SS "absolute_conversion"
.IX Subsection "absolute_conversion"
.Vb 6
\& Title   : absolute_conversion
\& Usage   : my $absolute_coord = $relative\->absolute_conversion($pos);
\& Function: Convert the start co\-ordinate of the supplied position into a number
\&           relative to the start of its map.
\& Returns : scalar number
\& Args    : Bio::Map::PositionI object
.Ve
.SS "type"
.IX Subsection "type"
.Vb 5
\& Title   : type
\& Usage   : my $type = $relative\->type();
\& Function: Get the type of thing we are relative to. The types correspond
\&           to a method name, so the value of what we are relative to can
\&           subsequently be found by $value = $relative\->$type;
\&
\&           Note that type is set by the last method that was set, or during
\&           new().
\&
\& Returns : \*(Aqgene\*(Aq, \*(Aqtranscript\*(Aq, \*(Aqexon\*(Aq, \*(Aqintron\*(Aq or \*(Aqcoding\*(Aq
\& Args    : none
.Ve
.SS "gene"
.IX Subsection "gene"
.Vb 8
\& Title   : gene
\& Usage   : my $int = $relative\->gene();
\&           $relative\->gene($int);
\& Function: Get/set the distance from the start of the gene that the Position\*(Aqs
\&           co\-ordiantes are relative to.
\& Returns : int
\& Args    : none to get, OR
\&           int to set; a value of 0 means relative to the start of the gene.
.Ve
.SS "transcript"
.IX Subsection "transcript"
.Vb 8
\& Title   : transcript
\& Usage   : my $int = $relative\->transcript();
\&           $relative\->transcript($int);
\& Function: Get/set which transcript of the Position\*(Aqs map\*(Aqs gene the Position\*(Aqs
\&           co\-ordinates are relative to.
\& Returns : int
\& Args    : none to get, OR
\&           int to set; a value of 0 means the active (default) transcript.
.Ve
.SS "exon"
.IX Subsection "exon"
.Vb 9
\& Title   : exon
\& Usage   : my ($exon_number, $transcript_number) = @{$relative\->exon()};
\&           $relative\->exon($exon_number, $transcript_number);
\& Function: Get/set which exon of which transcript of the Position\*(Aqs map\*(Aqs gene
\&           the Position\*(Aqs co\-ordinates are relative to.
\& Returns : reference to list with two ints, exon number and transcript number
\& Args    : none to get, OR
\&           int (exon number) AND int (transcript number) to set. The second int
\&           is optional and defaults to 0 (meaning default/active transcript).
.Ve
.SS "intron"
.IX Subsection "intron"
.Vb 10
\& Title   : intron
\& Usage   : my ($intron_number, $transcript_number) = @{$relative\->intron()};
\&           $relative\->intron($intron_number, $transcript_number);
\& Function: Get/set which intron of which transcript of the Position\*(Aqs map\*(Aqs gene
\&           the Position\*(Aqs co\-ordinates are relative to.
\& Returns : reference to list with two ints, intron number and transcript number
\& Args    : none to get, OR
\&           int (intron number) AND int (transcript number) to set. The second
\&           int is optional and defaults to 0 (meaning default/active
\&           transcript).
.Ve
.SS "coding"
.IX Subsection "coding"
.Vb 8
\& Title   : coding
\& Usage   : my $transcript_number = $relative\->coding;
\&           $relative\->coding($transcript_number);
\& Function: Get/set which transcript\*(Aqs coding region of the Position\*(Aqs map\*(Aqs gene
\&           the Position\*(Aqs co\-ordinates are relative to.
\& Returns : int
\& Args    : none to get, OR
\&           int to set (the transcript number, see transcript())
.Ve
