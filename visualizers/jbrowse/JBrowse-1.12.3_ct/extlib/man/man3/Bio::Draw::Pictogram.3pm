.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Draw::Pictogram 3"
.TH Bio::Draw::Pictogram 3 "2018-10-02" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Draw::Pictogram \- generate SVG output of Pictogram display for consensus motifs
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Bio::Draw::Pictogram;
\&  use Bio::SeqIO;
\&
\&  my $sio = Bio::SeqIO\->new(\-file=>$ARGV[0],\-format=>\*(Aqfasta\*(Aq);
\&  my @seq;
\&  while(my $seq = $sio\->next_seq){
\&    push @seq, $seq;
\&  }
\&
\&  my $picto = Bio::Draw::Pictogram\->new(\-width=>"800",
\&                                    \-height=>"500",
\&                                    \-fontsize=>"60",
\&                                    \-plot_bits=>1,
\&                                    \-background=>{
\&                                                  \*(AqA\*(Aq=>0.25,
\&                                                  \*(AqC\*(Aq=>0.18,
\&                                                  \*(AqT\*(Aq=>0.32,
\&                                                  \*(AqG\*(Aq=>0.25},
\&                                    \-color=>{\*(AqA\*(Aq=>\*(Aqred\*(Aq,
\&                                             \*(AqG\*(Aq=>\*(Aqblue\*(Aq,
\&                                             \*(AqC\*(Aq=>\*(Aqgreen\*(Aq,
\&                                             \*(AqT\*(Aq=>\*(Aqmagenta\*(Aq});
\&
\&  my $svg = $picto\->make_svg(\e@seq);
\&
\&  print $svg\->xmlify."\en";
\&
\&  #Support for Bio::Matrix::PSM::SiteMatrix now included
\&
\&   use Bio::Matrix::PSM::IO;
\&
\&   my $picto = Bio::Draw::Pictogram\->new(\-width=>"800",
\&                                    \-height=>"500",
\&                                    \-fontsize=>"60",
\&                                    \-plot_bits=>1,
\&                                    \-background=>{
\&                                                  \*(AqA\*(Aq=>0.25,
\&                                                  \*(AqC\*(Aq=>0.18,
\&                                                  \*(AqT\*(Aq=>0.32,
\&                                                  \*(AqG\*(Aq=>0.25},
\&                                    \-color=>{\*(AqA\*(Aq=>\*(Aqred\*(Aq,
\&                                             \*(AqG\*(Aq=>\*(Aqblue\*(Aq,
\&                                             \*(AqC\*(Aq=>\*(Aqgreen\*(Aq,
\&                                             \*(AqT\*(Aq=>\*(Aqmagenta\*(Aq});
\&
\&  my $psm = $psmIO\->next_psm;
\&  my $svg = $picto\->make_svg($psm);
\&  print $svg\->xmlify;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
A module for generating \s-1SVG\s0 output of Pictogram display for consensus
motifs.  This method of representation was describe by Burge and
colleagues: (Burge, C.B.,Tuschl, T., Sharp, P.A. in The \s-1RNA\s0 world \s-1II,
525\-560, CSHL\s0 press, 1999)
.PP
This is a simple module that takes in an array of sequences (assuming
equal lengths) and calculates relative base frequencies where the
height of each letter reflects the frequency of each nucleotide at a
given position. It can also plot the information content at each
position scaled by the background frequencies of each nucleotide.
.PP
It requires the \s-1SVG\-2.26\s0 or later module by Ronan Oger available at
http://www.cpan.org
.PP
Recommended viewing of the \s-1SVG\s0 is the plugin available at Adobe:
http://www.adobe.com/svg
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists. Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Shawn Hoon"
.IX Header "AUTHOR - Shawn Hoon"
Email shawnh@fugu\-sg.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a \*(L"_\*(R".
.SS "new"
.IX Subsection "new"
.Vb 10
\& Title   : new
\& Usage   : my $picto = Bio::Draw::Pictogram\->new(\-width=>"800",
\&                                            \-height=>"500",
\&                                            \-fontsize=>"60",
\&                                            \-plot_bits=>1,
\&                                            \-background=>{
\&                                                          \*(AqA\*(Aq=>0.25,
\&                                                          \*(AqC\*(Aq=>0.18,
\&                                                          \*(AqT\*(Aq=>0.32,
\&                                                          \*(AqG\*(Aq=>0.25},
\&                                            \-color=>{\*(AqA\*(Aq=>\*(Aqred\*(Aq,
\&                                                      \*(AqG\*(Aq=>\*(Aqblue\*(Aq,
\&                                                      \*(AqC\*(Aq=>\*(Aqgreen\*(Aq,
\&                                                      \*(AqT\*(Aq=>\*(Aqmagenta\*(Aq});
\& Function: Constructor for Pictogram Object
\& Returns : L<Bio::Draw::Pictogram>
.Ve
.SS "make_svg"
.IX Subsection "make_svg"
.Vb 5
\& Title   : make_svg
\& Usage   : $picto\->make_svg();
\& Function: make the SVG object
\& Returns : L<SVG>
\& Arguments: A fasta file or array ref of L<Bio::Seq> objects or a L<Bio::Matrix::PSM::SiteMatrixI>
.Ve
.SS "fontsize"
.IX Subsection "fontsize"
.Vb 5
\& Title   : fontsize
\& Usage   : $picto\->fontsize();
\& Function: get/set for fontsize
\& Returns : int
\& Arguments: int
.Ve
.SS "color"
.IX Subsection "color"
.Vb 5
\& Title   : color
\& Usage   : $picto\->color();
\& Function: get/set for color
\& Returns : a hash reference
\& Arguments: a hash  reference
.Ve
.SS "svg_obj"
.IX Subsection "svg_obj"
.Vb 5
\& Title   : svg_obj
\& Usage   : $picto\->svg_obj();
\& Function: get/set for svg_obj
\& Returns : L<SVG>
\& Arguments: L<SVG>
.Ve
.SS "plot_bits"
.IX Subsection "plot_bits"
.Vb 6
\& Title   : plot_bits
\& Usage   : $picto\->plot_bits();
\& Function: get/set for plot_bits to indicate whether to plot
\&           information content at each base position
\& Returns :1/0
\& Arguments: 1/0
.Ve
.SS "normalize"
.IX Subsection "normalize"
.Vb 7
\& Title   : normalize
\& Usage   : $picto\->normalize($newval)
\& Function: get/set to make all columns the same height.
\&           default is to scale height with information
\&           content.
\& Returns : value of normalize (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "background"
.IX Subsection "background"
.Vb 5
\& Title   : background
\& Usage   : $picto\->background();
\& Function: get/set for hash reference of nucleodtide bgd frequencies
\& Returns : hash reference
\& Arguments: hash reference
.Ve
.SS "pwm"
.IX Subsection "pwm"
.Vb 5
\& Title   : pwm
\& Usage   : $picto\->pwm();
\& Function: get/set for pwm
\& Returns : int
\& Arguments: int
.Ve
