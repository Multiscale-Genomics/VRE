.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::GFF3::Transform::SyncDirectives 3pm"
.TH Bio::GFF3::Transform::SyncDirectives 3pm "2014-02-28" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::GFF3::Transform::SyncDirectives \- insert sync (###) directives into an existing GFF3 file.  WARNING: this module does not really work in the general case, read the DESCRIPTION section below.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use Bio::GFF3::Transform::SyncDirectives \*(Aqgff3_add_sync_directives\*(Aq;
\&
\&    my @input_files = ( \*(Aqinput1.gff3\*(Aq, \*(Aqinput2.gff3\*(Aq );
\&    open my $output_fh, \*(Aq>\*(Aq, \*(Aqmyoutputfile.gff3\*(Aq;
\&    gff3_add_sync_directives( $output_fh, @input_files );
.Ve
.SH "DESCRIPTIONS"
.IX Header "DESCRIPTIONS"
This module, and its gff3_insert_sync_directives script, have some
important caveats: they do not support \f(CW\*(C`Derives_from\*(C'\fR, they will not
work if any child features come in the file \fBbefore\fR their parent
(which in practice is unusual), and they do not work when more than
one feature line has the same \s-1ID. \s0 Perhaps in the future I may get
around to writing a more capable version of this.
.SH "FUNCTIONS"
.IX Header "FUNCTIONS"
All functions below are \s-1EXPORT_OK.\s0
.ie n .SS "gff3_add_sync_directives( $out_filehandle, @files )"
.el .SS "gff3_add_sync_directives( \f(CW$out_filehandle\fP, \f(CW@files\fP )"
.IX Subsection "gff3_add_sync_directives( $out_filehandle, @files )"
Read \s-1GFF3\s0 from the given files, add as many sync directives (###) as
possible, and print the resulting \s-1GFF3\s0 to the given output filehandle.
Existing sync directives will not be preserved.
.SH "AUTHOR"
.IX Header "AUTHOR"
Robert Buels <rmb32@cornell.edu>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
This software is copyright (c) 2012 by Robert Buels.
.PP
This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
