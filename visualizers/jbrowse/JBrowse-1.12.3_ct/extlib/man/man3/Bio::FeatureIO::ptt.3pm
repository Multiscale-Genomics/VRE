.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Bio::FeatureIO::ptt 3pm"
.TH Bio::FeatureIO::ptt 3pm "2014-09-05" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::FeatureIO::ptt \- read/write features in PTT format
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\& # read features 
\& my $fin = Bio::FeatureIO\->new(\-file=>\*(Aqgenes.ptt\*(Aq, \-format=>\*(Aqptt\*(Aq);
\& my @cds;
\& while (my $f = $fin\->next_feature) {
\&   push @cds, $f if $f\->strand > 0;
\& }
\&
\& # write features (NOT IMPLEMENTED)
\& my $fout = Bio::FeatureIO\->new(\-fh=>\e*STDOUT, \-format=>\*(Aqptt\*(Aq);
\& for my $f (@cds) {
\&   $fout\->write_feature($f);
\& }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The \s-1PTT\s0 file format is a table of protein features. 
It is used mainly by \s-1NCBI\s0 who produce \s-1PTT\s0 files for 
all their published genomes found in <ftp://ftp.ncbi.nih.gov/genomes/>.
It has the following format:
.IP "Line 1" 4
.IX Item "Line 1"
Description of sequence to which the features belong
 eg. \*(L"Leptospira interrogans chromosome \s-1II,\s0 complete sequence \- 0..358943\*(R"
.Sp
It is usually equivalent to the \s-1DEFINITION\s0 line of a Genbank file,
with the length of the sequence appended. It is unclear why \*(L"0\*(R" is 
used as a starting range, it should be \*(L"1\*(R".
.IP "Line 2" 4
.IX Item "Line 2"
Number of feature lines in the table
 eg. \*(L"367 proteins\*(R"
.IP "Line 3" 4
.IX Item "Line 3"
Column headers, tab separated
 eg. \*(L"Location  Strand  Length  \s-1PID\s0 Gene  Synonym Code  \s-1COG\s0 Product\*(R"
.Sp
.Vb 9
\& Location : "begin..end" span of feature
\& Strand   : "+" or "\-"
\& Length   : number of amino acids excluding the stop codon
\& PID      : analogous to Genbank /db_xref="GI:xxxxxxxxx"
\& Gene     : analogous to Genbank /gene="xxxx"
\& Synonym  : analogous to Genbank /locus_tag="xxxx"
\& Synonym  : analogous to Genbank /locus_tag="xxxx"
\& COG      : CDD COG code with COG letter categories appended
\& Product  : analogous to Genbank /product="xxxx"
.Ve
.IP "Line 4 onwards" 4
.IX Item "Line 4 onwards"
Feature lines, nine columns, tab separated, \*(L"\-\*(R" used for empty fields
 eg. \*(L"2491..3423  + 310 24217063  metF  \s-1LB002 \- COG0685E  5\s0,10\-methylenetetrahydrofolate reductase\*(R"
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  http://bugzilla.open\-bio.org/
.Ve
.SH "AUTHOR \- Torsten Seemann"
.IX Header "AUTHOR - Torsten Seemann"
Email torsten.seemann \s-1AT\s0 infotech.monash.edu.au
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Based on bed.pm and gff.pm by Allen Day.
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "_initialize"
.IX Subsection "_initialize"
.Vb 3
\& Title   : _initialize
\& Function: Reading? parses the header of the input
\&           Writing?
.Ve
.SS "next_feature"
.IX Subsection "next_feature"
.Vb 6
\& Title   : next_feature
\& Usage   : $io\->next_feature()
\& Function: read the next feature from the PTT file
\& Example : 
\& Args    : 
\& Returns : Bio::SeqFeatureI object
.Ve
.SS "write_feature (\s-1NOT IMPLEMENTED\s0)"
.IX Subsection "write_feature (NOT IMPLEMENTED)"
.Vb 6
\& Title   : write_feature
\& Usage   : $io\->write_feature($feature)
\& Function: write a Bio::SeqFeatureI object in PTT format
\& Example : 
\& Args    : Bio::SeqFeatureI object
\& Returns :
.Ve
.SS "description"
.IX Subsection "description"
.Vb 6
\& Title   : description
\& Usage   : $obj\->description($newval)
\& Function: set/get the PTT file description for/from line one
\& Example : 
\& Returns : value of description (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "protein_count"
.IX Subsection "protein_count"
.Vb 6
\& Title   : protein_count
\& Usage   : $obj\->protein_count($newval)
\& Function: set/get the PTT protein count for/from line two
\& Example : 
\& Args    : on set, new value (a scalar or undef, optional)
\& Returns : value of protein_count (a scalar)
.Ve
