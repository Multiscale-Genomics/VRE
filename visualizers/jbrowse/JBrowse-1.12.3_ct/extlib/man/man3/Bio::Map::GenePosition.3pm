.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Map::GenePosition 3"
.TH Bio::Map::GenePosition 3 "2018-10-02" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Map::GenePosition \- A typed position, suitable for modelling the various
                         regions of a gene.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    use Bio::Map::GenePosition;
\&    use Bio::Map::GeneMap;
\&
\&    # say that the first transcript of a particular gene on a particular map
\&    # (species) is 1000bp long
\&    my $map = Bio::Map:GeneMap\->get(\-universal_name => \*(AqBRCA2\*(Aq,
\&                                    \-species => \*(Aqhuman\*(Aq);
\&    my $gene = $map\->gene;
\&    Bio::Map::GenePosition\->new(\-map => $map, 
\&                                \-element => $gene,
\&                                \-start => 0,
\&                                \-length => 1000,
\&                                \-type => \*(Aqtranscript\*(Aq);
\&
\&    # say that the coding region of the gene starts 30bp into the first
\&    # transcript
\&    Bio::Map::GenePosition\->new(\-map => $map, 
\&                                \-element => $gene,
\&                                \-start => 30,
\&                                \-length => 600,
\&                                \-type => \*(Aqcoding\*(Aq);
\&
\&    # A GenePosition isa PositionWithSequence, so can have sequence associated
\&    # with it
\&    my $exon = Bio::Map::GenePosition\->new(\-map => $map, 
\&                                \-element => $gene,
\&                                \-start => 0,
\&                                \-type => \*(Aqexon\*(Aq,
\&                                \-seq => \*(AqATGGGGTGGG\*(Aq);
\&    my $length = $exon\->length; # $length is 10
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Define where various sub-regions (transcripts, exons, introns etc.) of a gene
are. Do this so that you can then go onto to model other mappable elements as
having positions 20bp upstream of transcript 2, or 10bp into intron 3 etc., all
without having to know the absolute position of anything.
.PP
See Bio::Map::GeneRelative and t/Map/Map.t for more example usage.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Sendu Bala"
.IX Header "AUTHOR - Sendu Bala"
Email bix@sendu.me.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 10
\& Title   : new
\& Usage   : my $obj = Bio::Map::GenePosition\->new();
\& Function: Builds a new Bio::Map::GenePosition object 
\& Returns : Bio::Map::GenePosition
\& Args    : \-map      => Bio::Map::GeneMap object
\&           \-element  => Bio::Map::Gene object
\&           \-relative => Bio::Map::GeneRelative object
\&           \-type     => \*(Aqtranscript|coding|exon|intron\*(Aq, REQUIRED
\&           \-seq      => string, length of this string will set the length
\&                        of this position\*(Aqs range
\&
\&           * If this position has no range, or if a single value can describe
\&             the range *
\&           \-value => scalar             : something that describes the single
\&                                          point position or range of this
\&                                          Position, most likely an int
\&
\&           * Or if this position has a range, at least two of *
\&           \-start => int                : value of the start co\-ordinate
\&           \-end => int                  : value of the end co\-ordinate
\&           \-length => int               : length of the range
.Ve
.SS "map"
.IX Subsection "map"
.Vb 7
\& Title   : map
\& Usage   : my $map = $position\->map();
\&           $position\->map($map);
\& Function: Get/set the map the position is in.
\& Returns : L<Bio::Map::MapI>
\& Args    : none to get
\&           new L<Bio::Map::MapI> to set
.Ve
.SS "element"
.IX Subsection "element"
.Vb 7
\& Title   : element
\& Usage   : my $element = $position\->element();
\&           $position\->element($element);
\& Function: Get/set the element the position is for.
\& Returns : L<Bio::Map::MappableI>
\& Args    : none to get
\&           new L<Bio::Map::MappableI> to set
.Ve
.SS "type"
.IX Subsection "type"
.Vb 7
\& Title   : type
\& Usage   : my $type = $position\->type();
\&           $position\->type($type);
\& Function: Get/set the type of this position.
\& Returns : string
\& Args    : none to get, OR
\&           string transcript|coding|exon|intron to set
.Ve
.SS "relative"
.IX Subsection "relative"
.Vb 10
\&  Title   : relative
\&  Usage   : my $relative = $position\->relative();
\&            $position\->relative($relative);
\&  Function: Get/set the thing this Position\*(Aqs coordinates (numerical(), start(),
\&            end()) are relative to, as described by a RelativeI object.
\&  Returns : Bio::Map::GeneRelative. The default GeneRelative returned has a
\&            meaning that depends on the type() of GenePosition this is:
\&            \*(Aqtranscript\*(Aq         : "relative to the start of the gene on the
\&                                    Position\*(Aqs map"
\&            \*(Aqcoding|exon|intron\*(Aq : "relative to the start of the default
\&                                    transcript of the gene on the Position\*(Aqs map"
\&  Args    : none to get, OR
\&            Bio::Map::GeneRelative to set
.Ve
.SS "seq"
.IX Subsection "seq"
.Vb 8
\& Title   : seq
\& Usage   : my $string = $position\->seq();
\& Function: Get/set the sequence as a string of letters. If no sequence is
\&           manually set by you, the position\*(Aqs map will be asked for the
\&           sequence, and if available, that will be returned.
\& Returns : scalar
\& Args    : Optionally on set the new value (a string). An optional second
\&           argument presets the alphabet (otherwise it will be guessed).
.Ve
