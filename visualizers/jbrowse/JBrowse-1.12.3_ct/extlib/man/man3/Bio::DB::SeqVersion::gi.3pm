.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::SeqVersion::gi 3"
.TH Bio::DB::SeqVersion::gi 3 "2018-10-02" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::DB::SeqVersion::gi \- interface to NCBI Sequence Revision History page
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Do not use this module directly, use Bio::DB::SeqVersion.
.PP
.Vb 1
\&    use Bio::DB::SeqVersion;
\&
\&    my $query = Bio::DB::SeqVersion\->new(\-type => \*(Aqgi\*(Aq);
\&
\&    # all GIs, which will include the GI used to query
\&    my @all_gis = $query\->get_all(2);
\&
\&    # the most recent GI, which may or may not be the GI used to query
\&    my $live_gi = $query\->get_recent(2);
\&
\&    # get all the visible data on the Sequence Revision page
\&    my $array_ref = $query\->get_history(11111111);
.Ve
.PP
These methods can also take accession numbers as arguments, just like
the Sequence Revision page itself.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
All sequence entries at GenBank are identified by a pair of
identifiers, an accession and a numeric identifier, and this number is
frequently called a \s-1GI\s0 number (\fBG\fRenInfo \fBI\fRdentifier). The accession
is stable, but each new version of the sequence entry for the accession
receives a new \s-1GI\s0 number (see <https://www.ncbi.nlm.nih.gov/genbank/sequenceids/#historical_note>
for more information on GenBank identifiers). One accession
can have one or more \s-1GI\s0 numbers and the highest of these is the most recent,
or \*(L"live\*(R", \s-1GI.\s0
.PP
Information on an accession and its associated \s-1GI\s0 numbers is available at
the Sequence Revision History page at \s-1NCBI,
\&\s0<https://www.ncbi.nlm.nih.gov/genbank/sequencerevisionhistory/>, this information is
not available in file format. This module queries the Web page and retrieves \s-1GI\s0
numbers and related data given an accession (e.g. \s-1NP_111111, A11111, P12345\s0) or
a \s-1GI\s0 number (e.g. 2, 11111111) as query.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to one
of the Bioperl mailing lists.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution.  Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Brian Osborne"
.IX Header "AUTHOR - Brian Osborne"
Email < osborne at optonline dot net >
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Torsten Seemann \- torsten.seemann \s-1AT\s0 infotech.monash.edu.au
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 4
\& Title   : new
\& Usage   : $gb = Bio::DB::SeqVersion::gi\->new
\& Function: Creates a new query object
\& Returns : New query object
.Ve
.SS "get_all"
.IX Subsection "get_all"
.Vb 5
\& Title   : get_all
\& Usage   : my @gis = $q\->get_all(2)
\& Function: Get all GI numbers given a GI number
\& Returns : An array of GI numbers, earliest GI number is the 0 element
\& Args    : A single GI number (string)
.Ve
.SS "get_recent"
.IX Subsection "get_recent"
.Vb 5
\& Title   : get_recent
\& Usage   : my $newest_gi = $q\->get_recent(2)
\& Function: Get most recent GI given a single GI
\& Returns : String
\& Args    : A single GI number (string)
.Ve
.SS "get_status"
.IX Subsection "get_status"
.Vb 5
\& Title   : get_status
\& Usage   : my $newest_gi = $q\->get_status(2)
\& Function: Get most recent GI given a single GI
\& Returns : String
\& Args    : A single GI number (string)
.Ve
.SS "get_history"
.IX Subsection "get_history"
.Vb 6
\& Title   : get_history
\& Usage   : my $ref = $query_obj\->get_history()
\& Function: Queries the NCBI Revision page, gets the data from the HTML table
\& Returns : Reference to an array of arrays where element 0 refers to the most
\&           recent version and the last element refers to the oldest version.
\&           In the second dimension the elements are:
\&
\&           0      GI number
\&           1      Version
\&           2      Update Date
\&
\&           For example, to get the GI number of the first version:
\&
\&           $ref\->[$#{@$ref}]\->[0]
\&
\&           To get the Update Date of the latest version:
\&
\&           $ref\->[0]\->[2]
\&
\& Args    : One identifier (string)
\& Note    : Status of the GI was returned here previously as the last element in
\&           the row of elemnts above; however the status is currently only
\&           returned for the GI requested (e.g. a single value).  One can get
\&           the status for this using the get_status() method above
.Ve
.SS "_get_request"
.IX Subsection "_get_request"
.Vb 5
\& Title   : _get_request
\& Usage   : my $url = $self\->_get_request
\& Function: GET using NCBI Revision page URL, uses Root::HTTPget
\& Returns : HTML
\& Args    : One identifier (string)
.Ve
.SS "_process_data"
.IX Subsection "_process_data"
.Vb 5
\& Title   : _process_data
\& Usage   : $self\->_process_data($html)
\& Function: extract data from HTML
\& Args    : HTML from Revision History page
\& Returns : reference to an array of arrays
.Ve
