.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::HIV 3"
.TH Bio::DB::HIV 3 "2018-10-02" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::DB::HIV \- Database object interface to the Los Alamos HIV Sequence Database
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    $db = new Bio::DB::HIV;
\&
\&    $seq = $db\->get_Seq_by_id(\*(Aq94284\*(Aq);                                 # LANL sequence id
\&    $seq = $db\->get_Seq_by_acc(\*(AqEF432710\*(Aq);                             # GenBank accession
\&
\&    $q = new Bio::DB::Query::HIVQuery( " (C D)[subtype] SI[phenotype] (symptomatic AIDS)[patient_health] " );
\&
\&    $seqio = $db\->get_Stream_by_query($q);
\&    $seq = $seqio\->next_seq();
\&    ($seq\->annotation\->get_Annotations(\*(AqVirus\*(Aq))[0]\->{subtype}          # returns \*(AqD\*(Aq
\&    ($seq\->annotation\->get_Annotations(\*(AqPatient\*(Aq))[0]\->{patient_health} # returns \*(AqAIDS\*(Aq
\&    ($seq\->annotation\->get_Annotations(\*(Aqaccession\*(Aq))[0]\->{value}        # returns \*(AqK03454\*(Aq
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::DB::HIV, along with Bio::DB::Query::HIVQuery, provides an
interface for obtaining annotated \s-1HIV\s0 and \s-1SIV\s0 sequences from the Los
Alamos National Laboratory (\s-1LANL\s0) \s-1HIV\s0 Sequence Database (
<http://www.hiv.lanl.gov/content/sequence/HIV/mainpage.html>
). Unannotated sequences can be retrieved directly from the database
object, using either \s-1LANL\s0 ids or GenBank accessions. Annotations are
obtained via a query object, and are attached to the correct \f(CW\*(C`Bio::Seq\*(C'\fR
objects when the query is handled by \f(CW\*(C`Bio::DB::HIV::get_Seq_by_query\*(C'\fR
or \f(CW\*(C`Bio::DB::HIV::get_Stream_by_query\*(C'\fR.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and
reponsive experts will be able look at the problem and quickly
address it. Please include a thorough description of the problem
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Mark A. Jensen"
.IX Header "AUTHOR - Mark A. Jensen"
Email maj@fortinbras.us
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Mark A. Jensen
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SH "Constructor"
.IX Header "Constructor"
.SS "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Usage   : my $obj = new Bio::DB::HIV();
\& Function: Builds a new Bio::DB::HIV object
\& Returns : an instance of Bio::DB::HIV
\& Args    :
.Ve
.SH "WebDBSeqI compliance"
.IX Header "WebDBSeqI compliance"
.SS "get_request"
.IX Subsection "get_request"
.Vb 8
\& Title   : get_request
\& Usage   : my $url = $self\->get_request
\& Function: returns a HTTP::Request object
\& Returns :
\& Args    : %qualifiers = a hash of qualifiers with keys in
\&            (\-ids, \-format, \-mode, \-query)
\& Note    : Several layers of requests are performed to get to the sequence;
\&           see Bio::DB::Query::HIVQuery.
.Ve
.SS "postprocess_data"
.IX Subsection "postprocess_data"
.Vb 8
\& Title   : postprocess_data
\& Usage   : $self\->postprocess_data ( \*(Aqtype\*(Aq => \*(Aqstring\*(Aq,
\&                                     \*(Aqlocation\*(Aq => \e$datastr);
\& Function: process downloaded data before loading into a Bio::SeqIO
\& Returns : void
\& Args    : hash with two keys \- \*(Aqtype\*(Aq can be \*(Aqstring\*(Aq or \*(Aqfile\*(Aq
\&                              \- \*(Aqlocation\*(Aq either file location or string
\&                                           reference containing data
.Ve
.SH "WebDBSeqI overrides"
.IX Header "WebDBSeqI overrides"
.SS "get_seq_stream"
.IX Subsection "get_seq_stream"
.Vb 7
\& Title   : get_seq_stream
\& Usage   : my $seqio = $self\->get_seq_stream(%qualifiers)
\& Function: builds a url and queries a web db
\& Returns : a Bio::SeqIO stream capable of producing sequence
\& Args    : %qualifiers = a hash qualifiers that the implementing class
\&           will process to make a url suitable for web querying
\& Note    : Some tightening up of the baseclass version
.Ve
.SS "get_Stream_by_acc"
.IX Subsection "get_Stream_by_acc"
.Vb 7
\&  Title   : get_Stream_by_acc
\&  Usage   : $seq = $db\->get_Stream_by_acc([$acc1, $acc2]);
\&  Function: Gets a series of Seq objects by GenBank accession numbers
\&  Returns : a Bio::SeqIO stream object
\&  Args    : an arrayref of accession numbers for
\&            the desired sequence entries
\&  Note    : For LANL DB, alternative to LANL seqids
.Ve
.SS "get_Stream_by_query"
.IX Subsection "get_Stream_by_query"
.Vb 7
\&  Title   : get_Stream_by_query
\&  Usage   : $stream = $db\->get_Stream_by_query($query);
\&  Function: Gets a series of Seq objects by way of a query string or oject
\&  Returns : a Bio::SeqIO stream object
\&  Args    : $query : Currently, only a Bio::DB::Query::HIVQuery object.
\&            It\*(Aqs a good idea to create the query object first and interrogate
\&            it for the entry count before you fetch a potentially large stream.
.Ve
.SH "Internals"
.IX Header "Internals"
.SS "lanl_base"
.IX Subsection "lanl_base"
.Vb 6
\& Title   : lanl_base
\& Usage   : $obj\->lanl_base($newval)
\& Function: get/set the base url of the LANL HIV database
\& Example :
\& Returns : value of lanl_base (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "map_db"
.IX Subsection "map_db"
.Vb 6
\& Title   : map_db
\& Usage   : $obj\->map_db($newval)
\& Function: get/set the cgi filename for map_db ("Database Map")
\& Example :
\& Returns : value of map_db (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "make_search_if"
.IX Subsection "make_search_if"
.Vb 6
\& Title   : make_search_if
\& Usage   : $obj\->make_search_if($newval)
\& Function: get/set the cgi filename for make_search_if ("Make Search Interface")
\& Example :
\& Returns : value of make_search_if (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "search_"
.IX Subsection "search_"
.Vb 7
\& Title   : search_
\& Usage   : $obj\->search_($newval)
\& Function: get/set the cgi filename for the search query page
\&           ("Search Database")
\& Example :
\& Returns : value of search_ (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "_map_db_uri"
.IX Subsection "_map_db_uri"
.Vb 6
\& Title   : _map_db_uri
\& Usage   :
\& Function: return the full map_db uri ("Database Map")
\& Example :
\& Returns : scalar string
\& Args    : none
.Ve
.SS "_make_search_if_uri"
.IX Subsection "_make_search_if_uri"
.Vb 6
\& Title   : _make_search_if_uri
\& Usage   :
\& Function: return the full make_search_if uri ("Make Search Interface")
\& Example :
\& Returns : scalar string
\& Args    : none
.Ve
.SS "_search_uri"
.IX Subsection "_search_uri"
.Vb 6
\& Title   : _search_uri
\& Usage   :
\& Function: return the full search cgi uri ("Search Database")
\& Example :
\& Returns : scalar string
\& Args    : none
.Ve
.SS "_session_id"
.IX Subsection "_session_id"
.Vb 6
\& Title   : _session_id
\& Usage   : $obj\->_session_id($newval)
\& Function: Contains HIV db session id (initialized in _do_lanl_request)
\& Example :
\& Returns : value of _session_id (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "_response"
.IX Subsection "_response"
.Vb 6
\& Title   : _response
\& Usage   : $obj\->_response($newval)
\& Function: hold the response to search post
\& Example :
\& Returns : value of _response (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "Dude, sorry"
.IX Subsection "Dude, sorry"
.Vb 6
\& Title   : _sorry
\& Usage   : $hiv\->_sorry
\& Function: Throws an exception for unsupported option or parameter
\& Example :
\& Returns :
\& Args    : scalar string
.Ve
