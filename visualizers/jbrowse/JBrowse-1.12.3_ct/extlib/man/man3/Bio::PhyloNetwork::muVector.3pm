.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::PhyloNetwork::muVector 3"
.TH Bio::PhyloNetwork::muVector 3 "2018-10-02" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::PhyloNetwork::muVector \- Module to compute with vectors of arbitrary
dimension
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\& use strict;
\& use warnings;
\&
\& use Bio::PhyloNetwork::muVector;
\&
\& my $vec1=Bio::PhyloNetwork::muVector\->new(4);
\& my $vec2=Bio::PhyloNetwork::muVector\->new([1,2,3,4]);
\& my $vec3=Bio::PhyloNetwork::muVector\->new([10,20,30,40]);
\&
\& my $vec4=$vec3\-10*$vec2;
\& if (($vec4 cmp $vec1) == 0) {
\&   print "$vec4 is zero\en";
\& }
\&
\& my $vec5=Bio::PhyloNetwork::muVector\->new([8,2,2,4]);
\& my $vec6=Bio::PhyloNetwork::muVector\->new([1,2,3,4]);
\&
\& print "Test poset $vec5 > $vec6: ".$vec5\->geq_poset($vec6)."\en";
\& print "Test lex $vec5 > $vec6: ".($vec5 cmp $vec6)."\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a module to work with vectors. It creates
vectors of arbitrary length, defines its basic arithmetic operations,
its lexicographic ordering and the natural structure of poset.
.SH "AUTHOR"
.IX Header "AUTHOR"
Gabriel Cardona, gabriel(dot)cardona(at)uib(dot)es
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
.SS "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Usage   : my $mu = new Bio::PhyloNetwork::muVector();
\& Function: Creates a new Bio::PhyloNetwork::muVector object
\& Returns : Bio::PhyloNetwork::muVector
\& Args    : integer or (reference to) an array
.Ve
.PP
If given an integer as argument, returns a Bio::PhyloNetwork::muVector
object with dimension the integer given and initialized to zero.
If it is an anonimous array, then the vector is initialized with the values
in the array and with the corresponding dimension.
.SS "display"
.IX Subsection "display"
.Vb 5
\& Title   : display
\& Usage   : my $str=$mu\->display()
\& Function: returns an string displaying its contents
\& Returns : string
\& Args    : none
.Ve
.PP
This function is also overloaded to the "" operator.
.SS "add"
.IX Subsection "add"
.Vb 5
\& Title   : add
\& Usage   : $mu\->add($mu2)
\& Function: returns the sum of $mu and $mu2
\& Returns : Bio::PhyloNetwork::muVector
\& Args    : Bio::PhyloNetwork::muVector
.Ve
.PP
This function is also overloaded to the + operator.
.SS "substract"
.IX Subsection "substract"
.Vb 5
\& Title   : substract
\& Usage   : $mu\->substract($mu2)
\& Function: returns the difference of $mu and $mu2
\& Returns : Bio::PhyloNetwork::muVector
\& Args    : Bio::PhyloNetwork::muVector
.Ve
.PP
This function is also overloaded to the \- operator.
.SS "scalarproduct"
.IX Subsection "scalarproduct"
.Vb 5
\& Title   : scalarproduct
\& Usage   : $mu\->scalarproduct($ct)
\& Function: returns the scalar product of $ct and $mu
\& Returns : Bio::PhyloNetwork::muVector
\& Args    : scalar
.Ve
.PP
This function is also overloaded to the * operator.
.SS "comparelex"
.IX Subsection "comparelex"
.Vb 5
\& Title   : comparelex
\& Usage   : $mu1\->comparelex($mu2)
\& Function: compares $mu and $mu2 w.r.t. the lexicographic ordering
\& Returns : scalar (\-1 if $mu1<$mu2, 0 if $mu1=$mu2, 1 if $mu1>$mu2)
\& Args    : Bio::PhyloNetwork::muVector
.Ve
.PP
This function is also overloaded to the <=> and cmp operator.
.SS "geq_poset"
.IX Subsection "geq_poset"
.Vb 5
\& Title   : geq_poset
\& Usage   : $mu1\->geq_poset($mu2)
\& Function: compares $mu and $mu2 w.r.t. the natural partial ordering
\& Returns : boolean (1 if $mu >= $mu2, 0 otherwise)
\& Args    : Bio::PhyloNetwork::muVector
.Ve
.SS "is_positive"
.IX Subsection "is_positive"
.Vb 5
\& Title   : is_positive
\& Usage   : $mu\->is_positive()
\& Function: tests if all components of $mu are positive (or zero)
\& Returns : boolean
\& Args    : none
.Ve
.SS "hamming"
.IX Subsection "hamming"
.Vb 5
\& Title   : hamming
\& Usage   : $mu1\->hamming($mu2)
\& Function: returns the Hamming distance between $mu1 and $mu2
\& Returns : scalar
\& Args    : Bio::PhyloNetwork::muVector
.Ve
.SS "manhattan"
.IX Subsection "manhattan"
.Vb 5
\& Title   : manhattan
\& Usage   : $mu1\->manhattan($mu2)
\& Function: returns the Manhattan distance between $mu1 and $mu2
\& Returns : scalar
\& Args    : Bio::PhyloNetwork::muVector
.Ve
