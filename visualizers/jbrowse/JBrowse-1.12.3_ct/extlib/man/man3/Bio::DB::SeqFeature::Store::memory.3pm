.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::SeqFeature::Store::memory 3"
.TH Bio::DB::SeqFeature::Store::memory 3 "2018-10-02" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::DB::SeqFeature::Store::memory \-\- In\-memory implementation of Bio::DB::SeqFeature::Store
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Bio::DB::SeqFeature::Store;
\&
\&  # Open the sequence database
\&  my $db      = Bio::DB::SeqFeature::Store\->new( \-adaptor => \*(Aqmemory\*(Aq,
\&                                                 \-dsn     => \*(Aq/var/databases/test\*(Aq);
\&  # search... by id
\&  my @features = $db\->fetch_many(@list_of_ids);
\&
\&  # ...by name
\&  @features = $db\->get_features_by_name(\*(AqZK909\*(Aq);
\&
\&  # ...by alias
\&  @features = $db\->get_features_by_alias(\*(Aqsma\-3\*(Aq);
\&
\&  # ...by type
\&  @features = $db\->get_features_by_type(\*(Aqgene\*(Aq);
\&
\&  # ...by location
\&  @features = $db\->get_features_by_location(\-seq_id=>\*(AqChr1\*(Aq,\-start=>4000,\-end=>600000);
\&
\&  # ...by attribute
\&  @features = $db\->get_features_by_attribute({description => \*(Aqprotein kinase\*(Aq})
\&
\&  # ...by the GFF "Note" field
\&  @result_list = $db\->search_notes(\*(Aqkinase\*(Aq);
\&
\&  # ...by arbitrary combinations of selectors
\&  @features = $db\->features(\-name => $name,
\&                            \-type => $types,
\&                            \-seq_id => $seqid,
\&                            \-start  => $start,
\&                            \-end    => $end,
\&                            \-attributes => $attributes);
\&
\&  # ...using an iterator
\&  my $iterator = $db\->get_seq_stream(\-name => $name,
\&                                     \-type => $types,
\&                                     \-seq_id => $seqid,
\&                                     \-start  => $start,
\&                                     \-end    => $end,
\&                                     \-attributes => $attributes);
\&
\&  while (my $feature = $iterator\->next_seq) {
\&    # do something with the feature
\&  }
\&
\&  # ...limiting the search to a particular region
\&  my $segment  = $db\->segment(\*(AqChr1\*(Aq,5000=>6000);
\&  my @features = $segment\->features(\-type=>[\*(AqmRNA\*(Aq,\*(Aqmatch\*(Aq]);
\&
\&  # getting & storing sequence information
\&  # Warning: this returns a string, and not a PrimarySeq object
\&  $db\->insert_sequence(\*(AqChr1\*(Aq,\*(AqGATCCCCCGGGATTCCAAAA...\*(Aq);
\&  my $sequence = $db\->fetch_sequence(\*(AqChr1\*(Aq,5000=>6000);
\&
\&  # what feature types are defined in the database?
\&  my @types    = $db\->types;
\&
\&  # create a new feature in the database
\&  my $feature = $db\->new_feature(\-primary_tag => \*(AqmRNA\*(Aq,
\&                                 \-seq_id      => \*(Aqchr3\*(Aq,
\&                                 \-start      => 10000,
\&                                 \-end        => 11000);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Bio::DB::SeqFeature::Store::memory is the in-memory adaptor for
Bio::DB::SeqFeature::Store. You will not create it directly, but
instead use Bio::DB::SeqFeature::Store\->\fInew()\fR to do so.
.PP
See Bio::DB::SeqFeature::Store for complete usage instructions.
.SS "Using the memory adaptor"
.IX Subsection "Using the memory adaptor"
Before using the memory adaptor, populate a readable-directory on the
file system with annotation and/or sequence files. The annotation
files must be in \s-1GFF3\s0 format, and sholud end in the extension .gff or
\&.gff3. They may be compressed with \*(L"compress\*(R", \*(L"gzip\*(R" or \*(L"bzip2\*(R" (in
which case the appropriate compression extension must be present as
well.)
.PP
You may include sequence data inline in the \s-1GFF3\s0 files, or put the
sequence data in one or more separate FASTA-format files. These files
must end with .fa or .fasta and may be compressed. Because of the way
the adaptor works, you will get much better performance if you keep
the sequence data in separate \s-1FASTA\s0 files.
.PP
Initialize the database using the \-dsn option. This should point to
the directory creating the annotation and sequence files, or to a
single \s-1GFF3\s0 file. Examples:
.PP
.Vb 3
\&  # load all GFF3 and FASTA files located in /var/databases/test directory
\&  $db  = Bio::DB::SeqFeature::Store\->new( \-adaptor => \*(Aqmemory\*(Aq,
\&                                          \-dsn     => \*(Aq/var/databases/test\*(Aq);
\&
\&
\&  # load the data in a single compressed GFF3 file located at
\&  # /usr/annotations/worm.gf33.gz
\&  $db  = Bio::DB::SeqFeature::Store\->new( \-adaptor => \*(Aqmemory\*(Aq,
\&                                          \-dsn     => \*(Aq/usr/annotations/worm.gff3.gz\*(Aq);
.Ve
.PP
For compatibility with the Bio::DB::GFF memory adaptor, \-gff is
recognized as an alias for \-dsn.
.PP
See Bio::DB::SeqFeature::Store for all the access methods supported
by this adaptor. The various methods for storing and updating features
and sequences into the database are supported, including \s-1GFF3\s0 loading
support, but since this is an in-memory adaptor all changes you make
will be lost when the script exits.
.SS "types"
.IX Subsection "types"
.Vb 6
\& Title   : types
\& Usage   : @type_list = $db\->types
\& Function: Get all the types in the database
\& Returns : array of Bio::DB::GFF::Typename objects (arrayref in scalar context)
\& Args    : none
\& Status  : public
.Ve
.SH "BUGS"
.IX Header "BUGS"
This is an early version, so there are certainly some bugs. Please
use the BioPerl bug tracking system to report bugs.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
bioperl,
Bio::DB::SeqFeature,
Bio::DB::SeqFeature::Store,
Bio::DB::SeqFeature::GFF3Loader,
Bio::DB::SeqFeature::Segment,
Bio::DB::SeqFeature::Store::berkeleydb,
Bio::DB::SeqFeature::Store::DBI::mysql
.SH "AUTHOR"
.IX Header "AUTHOR"
Lincoln Stein <lstein@cshl.org>.
.PP
Copyright (c) 2006 Cold Spring Harbor Laboratory.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
