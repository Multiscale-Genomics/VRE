.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Assembly::IO::tigr 3"
.TH Bio::Assembly::IO::tigr 3 "2018-10-02" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Assembly::IO::tigr \- Driver to read and write assembly files in the TIGR
Assembler v2 default format.
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&    # Building an input stream
\&    use Bio::Assembly::IO;
\&
\&    # Assembly loading methods
\&    my $asmio = Bio::Assembly::IO\->new( \-file   => \*(AqSGC0\-424.tasm\*(Aq,
\&                                        \-format => \*(Aqtigr\*(Aq );
\&    my $scaffold = $asmio\->next_assembly;
\&
\&    # Do some things on contigs...
\&
\&    # Assembly writing methods
\&    my $outasm = Bio::Assembly::IO\->new( \-file   => ">SGC0\-modified.tasm",
\&                                         \-format => \*(Aqtigr\*(Aq );
\&    $outasm\->write_assembly( \-scaffold => $assembly,
\&                             \-singlets => 1 );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package loads and writes assembly information in/from files in the default
\&\s-1TIGR\s0 Assembler v2 format. The files are lassie-formatted and often have the
\&.tasm extension. This module was written to be used as a driver module for
Bio::Assembly::IO input/output.
.SS "Implementation"
.IX Subsection "Implementation"
Assemblies are loaded into Bio::Assembly::Scaffold objects composed of
Bio::Assembly::Contig and Bio::Assembly::Singlet objects. Since aligned reads
and contig gapped consensus can be obtained in the tasm files, only
aligned/gapped sequences are added to the different BioPerl objects.
.PP
Additional assembly information is stored as features. Contig objects have
SeqFeature information associated with the primary_tag:
.PP
.Vb 2
\&    _main_contig_feature:$contig_id \-> misc contig information
\&    _quality_clipping:$read_id      \-> quality clipping position
.Ve
.PP
Read objects have sub_seqFeature information associated with the
primary_tag:
.PP
.Vb 1
\&    _main_read_feature:$read_id     \-> misc read information
.Ve
.PP
Singlets are considered by \s-1TIGR\s0 Assembler as contigs of one sequence. Contigs
are represented here with features having these primary_tag:
.PP
.Vb 4
\&    _main_contig_feature:$contig_id
\&    _quality_clipping:$read_primary_id
\&    _main_read_feature:$read_primary_id
\&    _aligned_coord:$read_primary_id
.Ve
.SH "THE TIGR TASM LASSIE FORMAT"
.IX Header "THE TIGR TASM LASSIE FORMAT"
.SS "Description"
.IX Subsection "Description"
In the \s-1TIGR\s0 tasm lassie format, contigs are separated by a line containing a single
pipe character \*(L"|\*(R", whereas the reads in a contig are separated by a blank line.
Singlets can be present in the file and are represented as a contig
composed of a single sequence.
.PP
Other than the two above-mentioned separators, each line has an attribute name,
followed a tab and then an attribute value.
.PP
The tasm format is used by more \s-1TIGR\s0 applications than just \s-1TIGR\s0 Assembler.
Some of the attributes are not used by \s-1TIGR\s0 Assembler or have constant values.
They are indicated by an asterisk *
.PP
Contigs have the following attributes:
.PP
.Vb 10
\&    asmbl_id   \-> contig ID
\&    sequence   \-> contig ungapped consensus sequence (ambiguities are lowercase)
\&    lsequence  \-> gapped consensus sequence (lowercase ambiguities)
\&    quality    \-> gapped consensus quality score (in hexadecimal)
\&    seq_id     \-> *
\&    com_name   \-> *
\&    type       \-> *
\&    method     \-> always \*(Aqasmg\*(Aq *
\&    ed_status  \-> *
\&    redundancy \-> fold coverage of the contig consensus
\&    perc_N     \-> percent of ambiguities in the contig consensus
\&    seq#       \-> number of sequences in the contig
\&    full_cds   \-> *
\&    cds_start  \-> start of coding sequence *
\&    cds_end    \-> end of coding sequence *
\&    ed_pn      \-> name of editor (always \*(AqGRA\*(Aq) *
\&    ed_date    \-> date and time of edition
\&    comment    \-> some comments *
\&    frameshift \-> *
.Ve
.PP
Each read has the following attributes:
.PP
.Vb 10
\&    seq_name  \-> read name
\&    asm_lend  \-> position of first base on contig ungapped consensus sequence
\&    asm_rend  \-> position of last base on contig ungapped consensus sequence
\&    seq_lend  \-> start of quality\-trimmed sequence (aligned read coordinates)
\&    seq_rend  \-> end of quality\-trimmed sequence (aligned read coordinates)
\&    best      \-> always \*(Aq0\*(Aq *
\&    comment   \-> some comments *
\&    db        \-> database name associated with the sequence (e.g. >my_db|seq1234)
\&    offset    \-> offset of the sequence (gapped consensus coordinates)
\&    lsequence \-> aligned read sequence (ambiguities are uppercase)
.Ve
.PP
When asm_rend < asm_lend, the sequence was on the complementary \s-1DNA\s0 strand but
its reverse complement is shown in the aligned sequence of the assembly file,
not the original read.
.PP
Ambiguities are reflected in the contig consensus sequence as
lowercase \s-1IUPAC\s0 characters: a c g t u m r w s y k x n . In the read
sequences, however, ambiguities are uppercase: M R W S Y K X N
.SS "Example"
.IX Subsection "Example"
Example of a contig containing three sequences:
.PP
.Vb 10
\&    sequence    CGATGCTGTACGGCTGTTGCGACAGATTGCGCTGGGTCGATACCGCGTTGGTGATCGGCTTGTTCAGCGGGCTCTGGTTCGGCGACAGCGCGGCGATCTTGGCGGCTGCGAAGGTTGCCGGCGCAATCATGCGCTGCTGACCGTTGACCTGGTCCTGCCAGTACACCCAGTCGCCCACCATGACCTTCAGCGCGTAGCTGTCACAGCCGGCTGTGGTCAGCGCAGTGGCGACGGTGGTGTAGGAGGCGCCAGCAACACCTTGGGTGATCATGTAGCAGCCTTCTGACAGGCCGTAGGTCAGCATGGTCGGCCACTGGGTACCAGTCAGTCGGGTCAACCGAGATTCGCAsCTGAGCGCCACTGCCGCGCAGAGCGTACATGCCCTTGCGGGTCGCGCCGGTAACACCATCCACGCCGATCAGAACTGCGTCGGTGATGGTGGTGTTACCCGAGGTGCCAGTGGTGAAGGCGACGGTCTGGGTGCTGGCCACAGGCGCCAGAGTGGTCGCGCCAACGGTGGCGATGACCAGTTGCGATGGGCCACGGATACCTGACTGCCCGTTGTTCACGGCGCTGACGATGTTCTGCCACAGCGCCAGGCCAGAGCCGGTGATGTTGTCGAACACTTCGGGCGCAACGCCAGGGAGCGAGACGGTCAGCTTCCAGCTCGAAGCAGCGGAGCCAGTAGCCAGGGCGGCGCTGAGCGAGTTGCCGAGCGTGCCGGTGTAGAACGCGGTCAGCGTGGCGCCGGTGGCGGCGGCAGTGTCCTTCAGCGCACTGGTCGCGGCGGTGTCGGTGCCGTCAGTGACGCGCACGGCGCGGATGTTCGAGGCGCCGCCCTGGATTGATACCGCCAGCGCGGTGCACAGGTCGTACTTGCGCACGGTCyGAGTGCCGAACTTCTGCGATGCGTCACCTGGCGAGCCGATAaGCGTGGCGCTGTTCACCGGCCCCCAGTCAGCAATGCCGACGATGCCGAGAATGTCAGTCGGGACGCCATTGATGTAGCGGGTCTTGGGCGCCACTATTTGTATGTACAAATCTGGCGCAGATAAAGCCGCCGTATTCAAATAACCAGCAGGATAGATAGGCATCACGCCTCCAGAATGAAAAAGGCCACCGATTAGGTGGCCTTTGTTGTGTTCGGCTGGCTGTTAGAGCAGCAGCCCGTTTTCCCGCGCAAACGCGAATGGGTCCTTGTCATGCTTCCTGCAATTGCAGGTAGGACAAAGAATTTGCAGGTTGGATTTGTCGTTCGATCCGCCCTTTGCAAGCGGGAACACGTGGTCAACGTGATACCCATCCCTTATGGATATAGTGCACATGGCGCATTTCCAGCGCTGAGCAGCCAGCAAAAATTTTATGTCGTCGCCGGTGTGTGAGCCGACAGCATTTTTCTTGCGAGCCTTGTATGTCCGCGAGAGTGAACGAACTTGCTCCTTGTTGGCTGTCTTCCAGAGCTTTTGAGTAAGCGCACAGAGATCCTTGTTTCTTGATCTCCACTCTCTGGTTGCGGAAAT
\&    lsequence   CGATGCTGTACGGCTGTTGCGACAGATTGCGCTGGGTCGATACCGCGTTGGTGATCGGCTTGTTCAGCGGGCTCTGGTTCGGCGACAGCGCGGCGATCTTGGCGGCTGCGAAGGTTGCCGGCGCAATCATGCGCTGCTGACCGTTGACCTGGTCCTGCCAGTACACCCAGTCGCCCACCATGACCTTCAGCGCGTAGCTGTCACAGCCGGCTGTGGTCAGCGCAGTGGCGACGGTGGTGTAGGAGGCGCCAGCAACACCTTGGGTGATCATGTAGCAGCCTTCTGACAGGCCGTAGGTCAGCATGGTCGGCCACTGGGTACCAGTCAGTCGGGTCAACCGAGATTCG\-CAsCTGAGCGCCACTGCCGCGCAGAGCGTACATGCCCTTGCGGGTCGCGCCGGTAACACCATCCACGCCGATCAGAACTGCGTCGGTGATGGTGGTGTTACCCGAGGTGCCAGTGGTGAAGGCGACGGTCTGGGTGCTGGCCACAGGCGCCAGAGTGGTCGCGCCAACGGTGGCGATGACCAGTTGCGATGGGCCACGGATACCTGACTGCCCGTTGTTCACGGCGCTGACGATGTTCTGCCACAGCGCCAGGCCAGAGCCGGTGATGTTGTCGAACACTTCGGGCGCAACGCCAGGGAGCGAGACGGTCAGCTTCCAGCTCGAAGCAGCGGAGCCAGTAGCCAGGGCGGCGCTGAGCGAGTTGCCGAGCGTGCCGGTGTAGAACGCGGTCAGCGTGGCGCCGGTGGCGGCGGCAGTGTCCTTCAGCGCACTGGTCGCGGCGGTGTCGGTGCCGTCAGTGACGCGCACGGCGCGGATGTTCGAGGCGCCGCCCTGGATTGATACCGCCAGCGCGGTGCACAGGTCGTACTTGCGCACGGTCyGAGTGCCGAACTTCTGCGATGCGTCACCTGGCGAGCCGATAaGCGTGGCGCTGTTCACCGGCCCCCAGTCAGCAATGCCGACGATGCCGAGAATGTCAGTCGGGACGCCATTGATGTAGCGGGTCTTGGGCGCCACTATTTGTATGTACAAATCTGGCGCAGATAAAGCCGCCGTATTCAAATAACCAGCAGGATAGATAGGCATCACGCCTCCAGAATGAAAAAGGCCACCGATTAGGTGGCCTTTGTTGTGTTCGGCTGGCTGTTAGAGCAGCAGCCCGTTTTCCCGCGCAAACGCGAATGGGTCCTTGTCATGCTTCCTGCAATTGCAGGTAGGACAAAGAATTTGCAGGTTGGATTTGTCGTTCGATCCGCCCTTTGCAAGCGGGAACACGTGGTCAACGTGATACCCATCCCTTATGGATATAGTGCACATGGCGCATTTCCAGCGCTGAGCAGCCAGCAAAAATTTTATGTCGTCGCCGGTGTGTGAGCCGACAGCATTTTTCTTGCGAGCCTTGTATGTCCGCGAGAGTGAACGAACTTGCTCCTTGTTGGCTGTCTTCCAGAGCTTTTGAGTAAGCGCACAGAGATCCTTGTTTCTTGATCTCCACTCTCTGGTTGCGGAAAT
\&    quality     0x
\&    asmbl_id    93
\&    seq_id      
\&    com_name    
\&    type        
\&    method      asmg
\&    ed_status   
\&    redundancy  1.11
\&    perc_N      0.20
\&    seq#        3
\&    full_cds    
\&    cds_start   
\&    cds_end     
\&    ed_pn       GRA
\&    ed_date     08/16/07 17:10:12
\&    comment     
\&    frameshift  
\&
\&    seq_name    SDSU_RFPERU_010_C09.x01.phd.1
\&    asm_lend    1
\&    asm_rend    4423
\&    seq_lend    1
\&    seq_rend    442
\&    best        0
\&    comment     
\&    db  
\&    offset      0
\&    lsequence   CGATGCTGTACGGCTGTTGCGACAGATTGCGCTGGGTCGATACCGCGTTGGTGATCGGCTTGTTCAGCGGGCTCTGGTTCGGCGACAGCGCGGCGATCTTGGCGGCTGCGAAGGTTGCCGGCGCAATCATGCGCTGCTGACCGTTGACCTGGTCCTGCCAGTACACCCAGTCGCCCACCATGACCTTCAGCGCGTAGCTGTCACAGCCGGCTGTGGTCAGCGCAGTGGCGACGGTGGTGTAGGAGGCGCCAGCAACACCTTGGGTGATCATGTAGCAGCCTTCTGACAGGCCGTAGGTCAGCATGGTCGGCCACTGGGTACCAGTCAGTCGGGTCAACCGAGATTCG\-CAGCTGAGCGCCACTGCCGCGCAGAGCGTACATGCCCTTGCGGGTCGCGCCGGTAACACCATCCACGCCGATCAGAACTGCGTCGGTGATGGTGG
\&
\&    seq_name    SDSU_RFPERU_002_H12.x01.phd.1
\&    asm_lend    339
\&    asm_rend    940
\&    seq_lend    1
\&    seq_rend    602
\&    best        0
\&    comment     
\&    db  
\&    offset      338
\&    lsequence   CGAGATTCGCCACCTGAGCGCCACTGCCGCGCAGAGCGTACATGCCCTTGCGGGTCGCGCCGGTAACACCATCCACGCCGATCAGAACTGCGTCGGTGATGGTGGTGTTACCCGAGGTGCCAGTGGTGAAGGCGACGGTCTGGGTGCTGGCCACAGGCGCCAGAGTGGTCGCGCCAACGGTGGCGATGACCAGTTGCGATGGGCCACGGATACCTGACTGCCCGTTGTTCACGGCGCTGACGATGTTCTGCCACAGCGCCAGGCCAGAGCCGGTGATGTTGTCGAACACTTCGGGCGCAACGCCAGGGAGCGAGACGGTCAGCTTCCAGCTCGAAGCAGCGGAGCCAGTAGCCAGGGCGGCGCTGAGCGAGTTGCCGAGCGTGCCGGTGTAGAACGCGGTCAGCGTGGCGCCGGTGGCGGCGGCAGTGTCCTTCAGCGCACTGGTCGCGGCGGTGTCGGTGCCGTCAGTGACGCGCACGGCGCGGATGTTCGAGGCGCCGCCCTGGATTGATACCGCCAGCGCGGTGCACAGGTCGTACTTGCGCACGGTCCGAGTGCCGAACTTCTGCGATGCGTCACCTGGCGAGCCGATA\-GCGTGGCGC
\&
\&    seq_name    SDSU_RFPERU_009_E07.x01.phd.1
\&    asm_lend    880
\&    asm_rend    1520
\&    seq_lend    641
\&    seq_rend    1
\&    best        0
\&    comment     
\&    db  
\&    offset      8803
\&    lsequence   CGCACGGTCTGAGTGCCGAACTTCTGCGATGCGTCACCTGGCGAGCCGATAAGCGTGGCGCTGTTCACCGGCCCCCAGTCAGCAATGCCGACGATGCCGAGAATGTCAGTCGGGACGCCATTGATGTAGCGGGTCTTGGGCGCCACTATTTGTATGTACAAATCTGGCGCAGATAAAGCCGCCGTATTCAAATAACCAGCAGGATAGATAGGCATCACGCCTCCAGAATGAAAAAGGCCACCGATTAGGTGGCCTTTGTTGTGTTCGGCTGGCTGTTAGAGCAGCAGCCCGTTTTCCCGCGCAAACGCGAATGGGTCCTTGTCATGCTTCCTGCAATTGCAGGTAGGACAAAGAATTTGCAGGTTGGATTTGTCGTTCGATCCGCCCTTTGCAAGCGGGAACACGTGGTCAACGTGATACCCATCCCTTATGGATATAGTGCACATGGCGCATTTCCAGCGCTGAGCAGCCAGCAAAAATTTTATGTCGTCGCCGGTGTGTGAGCCGACAGCATTTTTCTTGCGAGCCTTGTATGTCCGCGAGAGTGAACGAACTTGCTCCTTGTTGGCTGTCTTCCAGAGCTTTTGAGTAAGCGCACAGAGATCCTTGTTTCTTGATCTCCACTCTCTGGTTGCGGAAAT
\&    |
.Ve
.PP
\&...
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to the
Bioperl mailing lists  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the BioPerl bug tracking system to help us keep track
the bugs and their resolution. Bug reports can be submitted via email
or the web:
.PP
.Vb 2
\&  bioperl\-bugs@bio.perl.org
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Florent E Angly"
.IX Header "AUTHOR - Florent E Angly"
Email florent dot angly at gmail dot com
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a \*(L"_\*(R".
.SS "next_assembly"
.IX Subsection "next_assembly"
.Vb 5
\& Title   : next_assembly
\& Usage   : my $scaffold = $asmio\->next_assembly();
\& Function: return the next assembly in the tasm\-formatted stream
\& Returns : Bio::Assembly::Scaffold object
\& Args    : none
.Ve
.SS "next_contig"
.IX Subsection "next_contig"
.Vb 5
\& Title   : next_contig
\& Usage   : my $contig = $asmio\->next_contig();
\& Function: return the next contig or singlet TIGR\-formatted stream
\& Returns : Bio::Assembly::Contig or Bio::Assembly::Singlet
\& Args    : none
.Ve
.SS "_qual_hex2dec"
.IX Subsection "_qual_hex2dec"
.Vb 5
\&    Title   : _qual_hex2dec
\&    Usage   : my dec_quality = $self\->_qual_hex2dec($hex_quality);
\&    Function: convert an hexadecimal quality score into a decimal quality score 
\&    Returns : string
\&    Args    : string
.Ve
.SS "_qual_dec2hex"
.IX Subsection "_qual_dec2hex"
.Vb 5
\&    Title   : _qual_dec2hex
\&    Usage   : my hex_quality = $self\->_qual_dec2hex($dec_quality);
\&    Function: convert a decimal quality score into an hexadecimal quality score 
\&    Returns : string
\&    Args    : string
.Ve
.SS "_store_contig"
.IX Subsection "_store_contig"
.Vb 6
\&    Title   : _store_contig
\&    Usage   : my $contigobj = $self\->_store_contig(\e%contiginfo, $contigobj);
\&    Function: store information of a contig belonging to a scaffold in the
\&              appropriate object
\&    Returns : Bio::Assembly::Contig object
\&    Args    : hash, Bio::Assembly::Contig
.Ve
.SS "_store_read"
.IX Subsection "_store_read"
.Vb 5
\&    Title   : _store_read
\&    Usage   : my $readobj = $self\->_store_read(\e%readinfo, $contigobj);
\&    Function: store information of a read belonging to a contig in a contig object
\&    Returns : Bio::LocatableSeq
\&    Args    : hash, Bio::Assembly::Contig
.Ve
.SS "_store_singlet"
.IX Subsection "_store_singlet"
.Vb 5
\&    Title   : _store_singlet
\&    Usage   : my $singletobj = $self\->_store_read(\e%readinfo, \e%contiginfo);
\&    Function: store information of a singlet belonging to a scaffold in a singlet object
\&    Returns : Bio::Assembly::Singlet
\&    Args    : hash, hash
.Ve
.SS "write_assembly"
.IX Subsection "write_assembly"
.Vb 10
\&    Title   : write_assembly
\&    Usage   : $asmio\->write_assembly($assembly)
\&    Function: Write the assembly object in TIGR Assembler compatible format. The
\&              contig IDs are sorted naturally if the Sort::Naturally module is
\&              present, or lexically otherwise. Internally, write_assembly use
\&              the write_contig, write_footer and write_header methods. Use these
\&              methods if you want more control on the writing process.
\&    Returns : 1 on success, 0 for error
\&    Args    : A Bio::Assembly::Scaffold object
\&              1 to write singlets in the assembly file, 0 otherwise
.Ve
.SS "write_contig"
.IX Subsection "write_contig"
.Vb 7
\&    Title   : write_contig
\&    Usage   : $asmio\->write_contig($contig)
\&    Function: Write a contig or singlet object in TIGR compatible format. Quality
\&              scores are automatically generated if the contig does not contain
\&              any
\&    Returns : 1 on success, 0 for error
\&    Args    : A Bio::Assembly::Contig or Singlet object
.Ve
.SS "write_header"
.IX Subsection "write_header"
.Vb 7
\&    Title   : write_header
\&    Usage   : $asmio\->write_header($assembly)
\&    Function: In the TIGR Asseformat assembly driver, this does nothing. The
\&              method is present for compatibility with other assembly drivers
\&              that need to write a file header.
\&    Returns : 1 on success, 0 for error
\&    Args    : A Bio::Assembly::Scaffold object
.Ve
.SS "write_footer"
.IX Subsection "write_footer"
.Vb 6
\&    Title   : write_footer
\&    Usage   : $asmio\->write_footer($assembly)
\&    Function: Write TIGR footer, i.e. do nothing except making sure that the
\&              file does not end with a \*(Aq|\*(Aq.
\&    Returns : 1 on success, 0 for error
\&    Args    : A Bio::Assembly::Scaffold object
.Ve
.SS "_perc_N"
.IX Subsection "_perc_N"
.Vb 9
\&    Title   : _perc_N
\&    Usage   : my $perc_N = $asmio\->_perc_N($sequence_string)
\&    Function: Calculate the percent of ambiguities in a sequence.
\&              M R W S Y K X N are regarded as ambiguities in an aligned read
\&              sequence by TIGR Assembler. In the case of a gapped contig
\&              consensus sequence, all lowercase symbols are ambiguities, i.e.:
\&              a c g t u m r w s y k x n.
\&    Returns : decimal number
\&    Args    : string
.Ve
.SS "_redundancy"
.IX Subsection "_redundancy"
.Vb 6
\&    Title   : _redundancy
\&    Usage   : my $ref = $asmio\->_redundancy($contigobj)
\&    Function: Calculate the fold coverage (redundancy) of a contig consensus
\&              (average number of read base pairs covering the consensus)
\&    Returns : decimal number
\&    Args    : Bio::Assembly::Contig
.Ve
.SS "_ungap"
.IX Subsection "_ungap"
.Vb 5
\&    Title   : _ungap
\&    Usage   : my $ungapped = $asmio\->_ungap($gapped)
\&    Function: Remove the gaps from a sequence. Gaps are \- in TIGR Assembler
\&    Returns : string
\&    Args    : string
.Ve
.SS "_date_time"
.IX Subsection "_date_time"
.Vb 5
\&    Title   : _date_time
\&    Usage   : my $timepoint = $asmio\->date_time
\&    Function: Get date and time (MM//DD/YY HH:MM:SS)
\&    Returns : string
\&    Args    : none
.Ve
.SS "_split_seq_name_and_db"
.IX Subsection "_split_seq_name_and_db"
.Vb 5
\&    Title   : _split_seq_name_and_db
\&    Usage   : my ($seqname, $db) = $asmio\->_split_seq_name_and_db($id)
\&    Function: Extract seq_name and db from sequence id
\&    Returns : seq_name, db
\&    Args    : id
.Ve
.SS "_merge_seq_name_and_db"
.IX Subsection "_merge_seq_name_and_db"
.Vb 5
\&    Title   : _merge_seq_name_and_db
\&    Usage   : my $id = $asmio\->_merge_seq_name_and_db($seq_name, $db)
\&    Function: Construct id from seq_name and db
\&    Returns : id
\&    Args    : seq_name, db
.Ve
.SS "_coord"
.IX Subsection "_coord"
.Vb 5
\&    Title   : _coord
\&    Usage   : my $id = $asmio\->_\|_coord($readobj, $contigobj)
\&    Function: Get different coordinates for the read
\&    Returns : number, number, number, number, number
\&    Args    : Bio::Assembly::Seq, Bio::Assembly::Contig
.Ve
