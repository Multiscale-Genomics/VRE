.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::Taxonomy 3"
.TH Bio::DB::Taxonomy 3 "2018-10-02" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::DB::Taxonomy \- Access to a taxonomy database
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 4
\&  use Bio::DB::Taxonomy;
\&  my $db = Bio::DB::Taxonomy\->new(\-source => \*(Aqentrez\*(Aq);
\&  # use NCBI Entrez over HTTP
\&  my $taxonid = $db\->get_taxonid(\*(AqHomo sapiens\*(Aq);
\&
\&  # get a taxon
\&  my $taxon = $db\->get_taxon(\-taxonid => $taxonid);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a front end module for access to a taxonomy database.
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Jason Stajich"
.IX Header "AUTHOR - Jason Stajich"
Email jason\-at\-bioperl.org
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Sendu Bala: bix@sendu.me.uk
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 8
\& Title   : new
\& Usage   : my $obj = Bio::DB::Taxonomy\->new(\-source => \*(Aqentrez\*(Aq);
\& Function: Builds a new Bio::DB::Taxonomy object.
\& Returns : an instance of Bio::DB::Taxonomy
\& Args    : \-source => which database source \*(Aqentrez\*(Aq (NCBI taxonomy online),
\&                      \*(Aqflatfile\*(Aq (local NCBI taxonomy), \*(Aqgreengenes\*(Aq (local
\&                      GreenGenes taxonomy), \*(Aqsilva\*(Aq (local Silva taxonomy), or
\&                      \*(Aqlist\*(Aq (Do\-It\-Yourself taxonomy)
.Ve
.SS "get_num_taxa"
.IX Subsection "get_num_taxa"
.Vb 5
\& Title   : get_num_taxa
\& Usage   : my $num = $db\->get_num_taxa();
\& Function: Get the number of taxa stored in the database.
\& Returns : A number
\& Args    : None
.Ve
.SS "get_taxon"
.IX Subsection "get_taxon"
.Vb 9
\& Title   : get_taxon
\& Usage   : my $taxon = $db\->get_taxon(\-taxonid => $taxonid);
\& Function: Get a Bio::Taxon object from the database.
\& Returns : Bio::Taxon object
\& Args    : just a single value which is the database id, OR named args:
\&           \-taxonid => taxonomy id (to query by taxonid)
\&             OR
\&           \-name    => string (to query by a taxonomy name: common name, 
\&                       scientific name, etc)
.Ve
.SS "get_taxonids"
.IX Subsection "get_taxonids"
.Vb 7
\& Title   : get_taxonids
\& Usage   : my @taxonids = $db\->get_taxonids(\*(AqHomo sapiens\*(Aq);
\& Function: Searches for a taxonid (typically ncbi_taxon_id) based on a query
\&           string. Note that multiple taxonids can match to the same supplied
\&           name.
\& Returns : array of integer ids in list context, one of these in scalar context
\& Args    : string representing the taxon\*(Aqs name
.Ve
.SS "get_tree"
.IX Subsection "get_tree"
.Vb 10
\& Title   : get_tree
\& Usage   : my $tree = $db\->get_tree(@species_names);
\& Function: Generate a tree comprised of the full lineages of all the supplied
\&           species names. The nodes for the requested species are given
\&           name(\*(Aqsupplied\*(Aq) values corresponding to the supplied name, such that
\&           they can be identified if the real species name in the database
\&           (stored under node_name()) is different. The nodes are also given an
\&           arbitrary branch length of 1.
\& Returns : Bio::Tree::Tree
\& Args    : A list of species names (strings) to include in the tree.
.Ve
.SS "ancestor"
.IX Subsection "ancestor"
.Vb 6
\& Title   : ancestor
\& Usage   : my $ancestor_taxon = $db\->ancestor($taxon);
\& Function: Retrieve the full ancestor taxon of a supplied Taxon from the
\&           database. 
\& Returns : Bio::Taxon
\& Args    : Bio::Taxon (that was retrieved from this database)
.Ve
.SS "each_Descendent"
.IX Subsection "each_Descendent"
.Vb 6
\& Title   : each_Descendent
\& Usage   : my @taxa = $db\->each_Descendent($taxon);
\& Function: Get all the descendents of the supplied Taxon (but not their
\&           descendents, ie. not a recursive fetchall).
\& Returns : Array of Bio::Taxon objects
\& Args    : Bio::Taxon (that was retrieved from this database)
.Ve
.SS "get_all_Descendents"
.IX Subsection "get_all_Descendents"
.Vb 5
\& Title   : get_all_Descendents
\& Usage   : my @taxa = $db\->get_all_Descendents($taxon);
\& Function: Like each_Descendent(), but do a recursive fetchall
\& Returns : Array of Bio::Taxon objects
\& Args    : Bio::Taxon (that was retrieved from this database)
.Ve
.SS "_load_tax_module"
.IX Subsection "_load_tax_module"
.Vb 3
\& Title   : _load_tax_module
\& Usage   : *INTERNAL Bio::DB::Taxonomy stuff*
\& Function: Loads up (like use) a module at run time on demand
.Ve
.SS "_handle_internal_id"
.IX Subsection "_handle_internal_id"
.Vb 10
\& Title   : _handle_internal_id
\& Usage   : *INTERNAL Bio::DB::Taxonomy stuff*
\& Function: Add an internal ID to a taxon object, ensuring that the taxon gets
\&           the same internal ID, regardless of which database it is retrieved
\&           from.
\& Returns : The assigned internal ID
\& Args    : * A Bio::Taxon
\&           * An optional boolean to decide whether or not to try and do the job
\&             using scientific name & rank in addition to taxon ID. This is
\&             useful if your IDs are not comparable to that of other databases,
\&             e.g. if they are arbitrary, as in the case of Bio::DB::Taxonomy::list.
\&             CAVEAT: will handle ambiguous names within a database fine, but not
\&             across multiple databases.
.Ve
