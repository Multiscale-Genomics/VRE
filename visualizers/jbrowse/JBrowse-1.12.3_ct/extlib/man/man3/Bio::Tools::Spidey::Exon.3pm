.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::Tools::Spidey::Exon 3"
.TH Bio::Tools::Spidey::Exon 3 "2018-10-02" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::Tools::Spidey::Exon \- A single exon determined by an alignment
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  # See Bio::Tools::Spidey::Results for a description of the context.
\&
\&  # an instance of this class is\-a Bio::SeqFeature::SimilarityPair
\&
\&  # coordinates of the exon (recommended way):
\&  print "exon from ", $exon\->start(),
\&        " to ", $exon\->end(), "\en";
\&
\&  # the same (feature1() inherited from Bio::SeqFeature::FeaturePair)
\&  print "exon from ", $exon\->feature1()\->start(),
\&        " to ", $exon\->feature1()\->end(), "\en";
\&  # also the same (query() inherited from Bio::SeqFeature::SimilarityPair):
\&  print "exon from ", $exon\->query()\->start(),
\&        " to ", $exon\->query()\->end(), "\en";
\&
\&  # coordinates on the matching EST (recommended way):
\&  print "matches on EST from ", $exon\->est_hit()\->start(),
\&        " to ", $exon\->est_hit()\->end(), "\en";
\&
\&  # the same (feature2() inherited from Bio::SeqFeature::FeaturePair)
\&  print "matches on EST from ", $exon\->feature2()\->start(),
\&        " to ", $exon\->feature2()\->end(), "\en";
\&  # also the same (subject() inherited from Bio::SeqFeature::SimilarityPair):
\&  print "exon from ", $exon\->subject()\->start(),
\&        " to ", $exon\->subject()\->end(), "\en";
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class inherits from Bio::SeqFeature::SimilarityPair and represents an
exon on a genomic sequence determined by similarity, that is, by aligning an
\&\s-1EST\s0 sequence (using Spidey in this case). Consequently, the notion of query and
subject is always from the perspective of the genomic sequence: query refers
to the genomic seq, subject to the aligned \s-1EST\s0 hit. Because of this,
\&\f(CW$exon\fR\->\fIstart()\fR, \f(CW$exon\fR\->\fIend()\fR etc will always return what you expect.
.PP
To get the coordinates on the matching \s-1EST,\s0 refer to the properties of the
feature returned by est_hit().
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this
and other Bioperl modules. Send your comments and suggestions preferably
 to one of the Bioperl mailing lists.
Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
the bugs and their resolution. Bug reports can be submitted via the
web:
.PP
.Vb 1
\&  https://github.com/bioperl/bioperl\-live/issues
.Ve
.SH "AUTHOR \- Ryan Golhar"
.IX Header "AUTHOR - Ryan Golhar"
Email golharam@umdnj.edu
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. 
Internal methods are usually preceded with a _
.SS "percentage_id"
.IX Subsection "percentage_id"
.Vb 5
\& Title   : percentage_id
\& Usage   : $obj\->percentage_id
\& Function: This is the percent id as reported by Spidey
\& Returns : value of percentage_id
\& Args    :
.Ve
.SS "est_hit"
.IX Subsection "est_hit"
.Vb 7
\& Title   : est_hit
\& Usage   : $est_feature = $obj\->est_hit();
\& Function: Returns the EST hit pointing to (i.e., aligned to by Spidey) this
\&           exon (i.e., genomic region). At present, merely a synonym for
\&           $obj\->feature2().
\& Returns : An Bio::SeqFeatureI implementing object.
\& Args    :
.Ve
.SS "mismatches"
.IX Subsection "mismatches"
.Vb 6
\& Title   : mismatches
\& Usage   : $obj\->mismatches;
\& Function: Returns the mismatches of the cDNA to (i.e., aligned to by Spidey) this
\&           exon (i.e., genomic region). 
\& Returns : value of mismatches.
\& Args    :
.Ve
.SS "gaps"
.IX Subsection "gaps"
.Vb 6
\& Title   : gaps
\& Usage   : $obj\->gaps;
\& Function: Returns the gaps of the cDNA to (i.e., aligned to by Spidey) this
\&           exon (i.e., genomic region). 
\& Returns : value of gaps.
\& Args    :
.Ve
.SS "donor"
.IX Subsection "donor"
.Vb 6
\& Title   : donor
\& Usage   : $obj\->donor;
\& Function: Returns 0 if a splice donor site does not exist, or 
\&           1 if a splice donor site exists
\& Returns : value of existence of donor splice site (0 or 1)
\& Args    :
.Ve
.SS "acceptor"
.IX Subsection "acceptor"
.Vb 6
\& Title   : acceptor
\& Usage   : $obj\->acceptor;
\& Function: Returns 0 if a splice acceptor site does not exist, or 
\&           1 if a splice acceptor site exists
\& Returns : value of existence of acceptor splice site (0 or 1)
\& Args    :
.Ve
